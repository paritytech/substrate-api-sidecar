{
    "magicNumber": "1635018093",
    "metadata": {
        "v11": {
            "modules": [
                {
                    "name": "System",
                    "storage": {
                        "prefix": "System",
                        "items": [
                            {
                                "name": "Account",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Blake2_128Concat",
                                        "key": "AccountId",
                                        "value": "AccountInfo",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                                "docs": [
                                    " The full account information for a particular account ID."
                                ]
                            },
                            {
                                "name": "ExtrinsicCount",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "u32"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Total extrinsics count for the current block."
                                ]
                            },
                            {
                                "name": "BlockWeight",
                                "modifier": "Default",
                                "type": {
                                    "plain": "ExtrinsicsWeight"
                                },
                                "fallback": "0x00000000000000000000000000000000",
                                "docs": [
                                    " The current weight for the block."
                                ]
                            },
                            {
                                "name": "AllExtrinsicsLen",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "u32"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Total length (in bytes) for all extrinsics put together, for the current block."
                                ]
                            },
                            {
                                "name": "BlockHash",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "BlockNumber",
                                        "value": "Hash",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "docs": [
                                    " Map of block numbers to block hashes."
                                ]
                            },
                            {
                                "name": "ExtrinsicData",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "u32",
                                        "value": "Bytes",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                                ]
                            },
                            {
                                "name": "Number",
                                "modifier": "Default",
                                "type": {
                                    "plain": "BlockNumber"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " The current block number being processed. Set by `execute_block`."
                                ]
                            },
                            {
                                "name": "ParentHash",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Hash"
                                },
                                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "docs": [
                                    " Hash of the previous block."
                                ]
                            },
                            {
                                "name": "ExtrinsicsRoot",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Hash"
                                },
                                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "docs": [
                                    " Extrinsics root of the current block, also part of the block header."
                                ]
                            },
                            {
                                "name": "Digest",
                                "modifier": "Default",
                                "type": {
                                    "plain": "DigestOf"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Digest of the current block, also part of the block header."
                                ]
                            },
                            {
                                "name": "Events",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<EventRecord>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Events deposited for the current block."
                                ]
                            },
                            {
                                "name": "EventCount",
                                "modifier": "Default",
                                "type": {
                                    "plain": "EventIndex"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " The number of events in the `Events<T>` list."
                                ]
                            },
                            {
                                "name": "EventTopics",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Blake2_128Concat",
                                        "key": "Hash",
                                        "value": "Vec<(BlockNumber,EventIndex)>",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                                    " of events in the `<Events<T>>` list.",
                                    "",
                                    " All topic vectors have deterministic storage locations depending on the topic. This",
                                    " allows light-clients to leverage the changes trie storage tracking mechanism and",
                                    " in case of changes fetch the list of events of interest.",
                                    "",
                                    " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                                    " the `EventIndex` then in case if the topic has the same contents on the next block",
                                    " no notification will be triggered thus the event might be lost."
                                ]
                            },
                            {
                                "name": "LastRuntimeUpgrade",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "LastRuntimeUpgradeInfo"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                                ]
                            },
                            {
                                "name": "ExecutionPhase",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "Phase"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The execution phase of the block."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "fill_block",
                            "args": [
                                {
                                    "name": "_ratio",
                                    "type": "Perbill"
                                }
                            ],
                            "docs": [
                                " A dispatch that will fill the block weight up to the given ratio."
                            ]
                        },
                        {
                            "name": "remark",
                            "args": [
                                {
                                    "name": "_remark",
                                    "type": "Bytes"
                                }
                            ],
                            "docs": [
                                " Make some on-chain remark.",
                                "",
                                " # <weight>",
                                " - `O(1)`",
                                " - Base Weight: 0.665 µs, independent of remark length.",
                                " - No DB operations.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "set_heap_pages",
                            "args": [
                                {
                                    "name": "pages",
                                    "type": "u64"
                                }
                            ],
                            "docs": [
                                " Set the number of pages in the WebAssembly environment's heap.",
                                "",
                                " # <weight>",
                                " - `O(1)`",
                                " - 1 storage write.",
                                " - Base Weight: 1.405 µs",
                                " - 1 write to HEAP_PAGES",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "set_code",
                            "args": [
                                {
                                    "name": "code",
                                    "type": "Bytes"
                                }
                            ],
                            "docs": [
                                " Set the new runtime code.",
                                "",
                                " # <weight>",
                                " - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                                " - 1 storage write (codec `O(C)`).",
                                " - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is expensive).",
                                " - 1 event.",
                                " The weight of this function is dependent on the runtime, but generally this is very expensive.",
                                " We will treat this as a full block.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "set_code_without_checks",
                            "args": [
                                {
                                    "name": "code",
                                    "type": "Bytes"
                                }
                            ],
                            "docs": [
                                " Set the new runtime code without doing any checks of the given `code`.",
                                "",
                                " # <weight>",
                                " - `O(C)` where `C` length of `code`",
                                " - 1 storage write (codec `O(C)`).",
                                " - 1 event.",
                                " The weight of this function is dependent on the runtime. We will treat this as a full block.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "set_changes_trie_config",
                            "args": [
                                {
                                    "name": "changes_trie_config",
                                    "type": "Option<ChangesTrieConfiguration>"
                                }
                            ],
                            "docs": [
                                " Set the new changes trie configuration.",
                                "",
                                " # <weight>",
                                " - `O(1)`",
                                " - 1 storage write or delete (codec `O(1)`).",
                                " - 1 call to `deposit_log`: Uses `append` API, so O(1)",
                                " - Base Weight: 7.218 µs",
                                " - DB Weight:",
                                "     - Writes: Changes Trie, System Digest",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "set_storage",
                            "args": [
                                {
                                    "name": "items",
                                    "type": "Vec<KeyValue>"
                                }
                            ],
                            "docs": [
                                " Set some items of storage.",
                                "",
                                " # <weight>",
                                " - `O(I)` where `I` length of `items`",
                                " - `I` storage writes (`O(1)`).",
                                " - Base Weight: 0.568 * i µs",
                                " - Writes: Number of items",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "kill_storage",
                            "args": [
                                {
                                    "name": "keys",
                                    "type": "Vec<Key>"
                                }
                            ],
                            "docs": [
                                " Kill some items from storage.",
                                "",
                                " # <weight>",
                                " - `O(IK)` where `I` length of `keys` and `K` length of one key",
                                " - `I` storage deletions.",
                                " - Base Weight: .378 * i µs",
                                " - Writes: Number of items",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "kill_prefix",
                            "args": [
                                {
                                    "name": "prefix",
                                    "type": "Key"
                                },
                                {
                                    "name": "_subkeys",
                                    "type": "u32"
                                }
                            ],
                            "docs": [
                                " Kill all storage items with a key that starts with the given prefix.",
                                "",
                                " **NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                                " the prefix we are removing to accurately calculate the weight of this function.",
                                "",
                                " # <weight>",
                                " - `O(P)` where `P` amount of keys with prefix `prefix`",
                                " - `P` storage deletions.",
                                " - Base Weight: 0.834 * P µs",
                                " - Writes: Number of subkeys + 1",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "suicide",
                            "args": [],
                            "docs": [
                                " Kill the sending account, assuming there are no references outstanding and the composite",
                                " data is equal to its default value.",
                                "",
                                " # <weight>",
                                " - `O(1)`",
                                " - 1 storage read and deletion.",
                                " --------------------",
                                " Base Weight: 8.626 µs",
                                " No DB Read or Write operations because caller is already in overlay",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "ExtrinsicSuccess",
                            "args": [
                                "DispatchInfo"
                            ],
                            "docs": [
                                " An extrinsic completed successfully."
                            ]
                        },
                        {
                            "name": "ExtrinsicFailed",
                            "args": [
                                "DispatchError",
                                "DispatchInfo"
                            ],
                            "docs": [
                                " An extrinsic failed."
                            ]
                        },
                        {
                            "name": "CodeUpdated",
                            "args": [],
                            "docs": [
                                " `:code` was updated."
                            ]
                        },
                        {
                            "name": "NewAccount",
                            "args": [
                                "AccountId"
                            ],
                            "docs": [
                                " A new account was created."
                            ]
                        },
                        {
                            "name": "KilledAccount",
                            "args": [
                                "AccountId"
                            ],
                            "docs": [
                                " An account was reaped."
                            ]
                        }
                    ],
                    "constants": [
                        {
                            "name": "BlockHashCount",
                            "type": "BlockNumber",
                            "value": "0x60090000",
                            "docs": [
                                " The maximum number of blocks to allow in mortal eras."
                            ]
                        },
                        {
                            "name": "MaximumBlockWeight",
                            "type": "Weight",
                            "value": "0x00204aa9d1010000",
                            "docs": [
                                " The maximum weight of a block."
                            ]
                        },
                        {
                            "name": "DbWeight",
                            "type": "RuntimeDbWeight",
                            "value": "0x40787d010000000000e1f50500000000",
                            "docs": [
                                " The weight of runtime database operations the runtime can invoke."
                            ]
                        },
                        {
                            "name": "BlockExecutionWeight",
                            "type": "Weight",
                            "value": "0x00f2052a01000000",
                            "docs": [
                                " The base weight of executing a block, independent of the transactions in the block."
                            ]
                        },
                        {
                            "name": "ExtrinsicBaseWeight",
                            "type": "Weight",
                            "value": "0x4059730700000000",
                            "docs": [
                                " The base weight of an Extrinsic in the block, independent of the of extrinsic being executed."
                            ]
                        },
                        {
                            "name": "MaximumBlockLength",
                            "type": "u32",
                            "value": "0x00005000",
                            "docs": [
                                " The maximum length of a block (in bytes)."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InvalidSpecName",
                            "docs": [
                                " The name of specification does not match between the current runtime",
                                " and the new runtime."
                            ]
                        },
                        {
                            "name": "SpecVersionNeedsToIncrease",
                            "docs": [
                                " The specification version is not allowed to decrease between the current runtime",
                                " and the new runtime."
                            ]
                        },
                        {
                            "name": "FailedToExtractRuntimeVersion",
                            "docs": [
                                " Failed to extract the runtime version from the new runtime.",
                                "",
                                " Either calling `Core_version` or decoding `RuntimeVersion` failed."
                            ]
                        },
                        {
                            "name": "NonDefaultComposite",
                            "docs": [
                                " Suicide called when the account has non-default composite data."
                            ]
                        },
                        {
                            "name": "NonZeroRefCount",
                            "docs": [
                                " There is a non-zero reference count preventing the account from being purged."
                            ]
                        }
                    ]
                },
                {
                    "name": "RandomnessCollectiveFlip",
                    "storage": {
                        "prefix": "RandomnessCollectiveFlip",
                        "items": [
                            {
                                "name": "RandomMaterial",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<Hash>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Series of block headers from the last 81 blocks that acts as random seed material. This",
                                    " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                                    " the oldest hash."
                                ]
                            }
                        ]
                    },
                    "calls": null,
                    "events": null,
                    "constants": [],
                    "errors": []
                },
                {
                    "name": "Scheduler",
                    "storage": {
                        "prefix": "Scheduler",
                        "items": [
                            {
                                "name": "Agenda",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "BlockNumber",
                                        "value": "Vec<Option<Scheduled>>",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Items to be executed, indexed by the block number that they should be executed on."
                                ]
                            },
                            {
                                "name": "Lookup",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "Bytes",
                                        "value": "TaskAddress",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Lookup from identity to the block number and index of the task."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "schedule",
                            "args": [
                                {
                                    "name": "when",
                                    "type": "BlockNumber"
                                },
                                {
                                    "name": "maybe_periodic",
                                    "type": "Option<Period>"
                                },
                                {
                                    "name": "priority",
                                    "type": "Priority"
                                },
                                {
                                    "name": "call",
                                    "type": "Call"
                                }
                            ],
                            "docs": [
                                " Anonymously schedule a task.",
                                "",
                                " # <weight>",
                                " - S = Number of already scheduled calls",
                                " - Base Weight: 22.29 + .126 * S µs",
                                " - DB Weight:",
                                "     - Read: Agenda",
                                "     - Write: Agenda",
                                " - Will use base weight of 25 which should be good for up to 30 scheduled calls",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "cancel",
                            "args": [
                                {
                                    "name": "when",
                                    "type": "BlockNumber"
                                },
                                {
                                    "name": "index",
                                    "type": "u32"
                                }
                            ],
                            "docs": [
                                " Cancel an anonymously scheduled task.",
                                "",
                                " # <weight>",
                                " - S = Number of already scheduled calls",
                                " - Base Weight: 22.15 + 2.869 * S µs",
                                " - DB Weight:",
                                "     - Read: Agenda",
                                "     - Write: Agenda, Lookup",
                                " - Will use base weight of 100 which should be good for up to 30 scheduled calls",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "schedule_named",
                            "args": [
                                {
                                    "name": "id",
                                    "type": "Bytes"
                                },
                                {
                                    "name": "when",
                                    "type": "BlockNumber"
                                },
                                {
                                    "name": "maybe_periodic",
                                    "type": "Option<Period>"
                                },
                                {
                                    "name": "priority",
                                    "type": "Priority"
                                },
                                {
                                    "name": "call",
                                    "type": "Call"
                                }
                            ],
                            "docs": [
                                " Schedule a named task.",
                                "",
                                " # <weight>",
                                " - S = Number of already scheduled calls",
                                " - Base Weight: 29.6 + .159 * S µs",
                                " - DB Weight:",
                                "     - Read: Agenda, Lookup",
                                "     - Write: Agenda, Lookup",
                                " - Will use base weight of 35 which should be good for more than 30 scheduled calls",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "cancel_named",
                            "args": [
                                {
                                    "name": "id",
                                    "type": "Bytes"
                                }
                            ],
                            "docs": [
                                " Cancel a named scheduled task.",
                                "",
                                " # <weight>",
                                " - S = Number of already scheduled calls",
                                " - Base Weight: 24.91 + 2.907 * S µs",
                                " - DB Weight:",
                                "     - Read: Agenda, Lookup",
                                "     - Write: Agenda, Lookup",
                                " - Will use base weight of 100 which should be good for up to 30 scheduled calls",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "Scheduled",
                            "args": [
                                "BlockNumber",
                                "u32"
                            ],
                            "docs": []
                        },
                        {
                            "name": "Canceled",
                            "args": [
                                "BlockNumber",
                                "u32"
                            ],
                            "docs": []
                        },
                        {
                            "name": "Dispatched",
                            "args": [
                                "TaskAddress",
                                "Option<Bytes>",
                                "DispatchResult"
                            ],
                            "docs": []
                        }
                    ],
                    "constants": [],
                    "errors": []
                },
                {
                    "name": "Babe",
                    "storage": {
                        "prefix": "Babe",
                        "items": [
                            {
                                "name": "EpochIndex",
                                "modifier": "Default",
                                "type": {
                                    "plain": "u64"
                                },
                                "fallback": "0x0000000000000000",
                                "docs": [
                                    " Current epoch index."
                                ]
                            },
                            {
                                "name": "Authorities",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<(AuthorityId,BabeAuthorityWeight)>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Current epoch authorities."
                                ]
                            },
                            {
                                "name": "GenesisSlot",
                                "modifier": "Default",
                                "type": {
                                    "plain": "u64"
                                },
                                "fallback": "0x0000000000000000",
                                "docs": [
                                    " The slot at which the first epoch actually started. This is 0",
                                    " until the first block of the chain."
                                ]
                            },
                            {
                                "name": "CurrentSlot",
                                "modifier": "Default",
                                "type": {
                                    "plain": "u64"
                                },
                                "fallback": "0x0000000000000000",
                                "docs": [
                                    " Current slot number."
                                ]
                            },
                            {
                                "name": "Randomness",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Randomness"
                                },
                                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "docs": [
                                    " The epoch randomness for the *current* epoch.",
                                    "",
                                    " # Security",
                                    "",
                                    " This MUST NOT be used for gambling, as it can be influenced by a",
                                    " malicious validator in the short term. It MAY be used in many",
                                    " cryptographic protocols, however, so long as one remembers that this",
                                    " (like everything else on-chain) it is public. For example, it can be",
                                    " used where a number is needed that cannot have been chosen by an",
                                    " adversary, for purposes such as public-coin zero-knowledge proofs."
                                ]
                            },
                            {
                                "name": "NextEpochConfig",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "NextConfigDescriptor"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Next epoch configuration, if changed."
                                ]
                            },
                            {
                                "name": "NextRandomness",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Randomness"
                                },
                                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "docs": [
                                    " Next epoch randomness."
                                ]
                            },
                            {
                                "name": "SegmentIndex",
                                "modifier": "Default",
                                "type": {
                                    "plain": "u32"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " Randomness under construction.",
                                    "",
                                    " We make a tradeoff between storage accesses and list length.",
                                    " We store the under-construction randomness in segments of up to",
                                    " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                                    "",
                                    " Once a segment reaches this length, we begin the next one.",
                                    " We reset all segments and return to `0` at the beginning of every",
                                    " epoch."
                                ]
                            },
                            {
                                "name": "UnderConstruction",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "u32",
                                        "value": "Vec<Randomness>",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                                ]
                            },
                            {
                                "name": "Initialized",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "MaybeRandomness"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Temporary value (cleared at block finalization) which is `Some`",
                                    " if per-block initialization has already been called for current block."
                                ]
                            },
                            {
                                "name": "Lateness",
                                "modifier": "Default",
                                "type": {
                                    "plain": "BlockNumber"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " How late the current block is compared to its parent.",
                                    "",
                                    " This entry is populated as part of block execution and is cleaned up",
                                    " on block finalization. Querying this storage entry outside of block",
                                    " execution context should always yield zero."
                                ]
                            }
                        ]
                    },
                    "calls": [],
                    "events": null,
                    "constants": [
                        {
                            "name": "EpochDuration",
                            "type": "u64",
                            "value": "0x6009000000000000",
                            "docs": [
                                " The number of **slots** that an epoch takes. We couple sessions to",
                                " epochs, i.e. we start a new session once the new epoch begins."
                            ]
                        },
                        {
                            "name": "ExpectedBlockTime",
                            "type": "Moment",
                            "value": "0x7017000000000000",
                            "docs": [
                                " The expected average block time at which BABE should be creating",
                                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                                " what the expected average block time should be based on the slot",
                                " duration and the security parameter `c` (where `1 - c` represents",
                                " the probability of a slot being empty)."
                            ]
                        }
                    ],
                    "errors": []
                },
                {
                    "name": "Timestamp",
                    "storage": {
                        "prefix": "Timestamp",
                        "items": [
                            {
                                "name": "Now",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Moment"
                                },
                                "fallback": "0x0000000000000000",
                                "docs": [
                                    " Current time for the current block."
                                ]
                            },
                            {
                                "name": "DidUpdate",
                                "modifier": "Default",
                                "type": {
                                    "plain": "bool"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Did the timestamp get updated in this block?"
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "set",
                            "args": [
                                {
                                    "name": "now",
                                    "type": "Compact<Moment>"
                                }
                            ],
                            "docs": [
                                " Set the current time.",
                                "",
                                " This call should be invoked exactly once per block. It will panic at the finalization",
                                " phase, if this call hasn't been invoked by that time.",
                                "",
                                " The timestamp should be greater than the previous one by the amount specified by",
                                " `MinimumPeriod`.",
                                "",
                                " The dispatch origin for this call must be `Inherent`.",
                                "",
                                " # <weight>",
                                " - `O(T)` where `T` complexity of `on_timestamp_set`",
                                " - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in `on_finalize`)",
                                " - 1 event handler `on_timestamp_set` `O(T)`.",
                                " - Benchmark: 7.678 (min squares analysis)",
                                "   - NOTE: This benchmark was done for a runtime with insignificant `on_timestamp_set` handlers.",
                                "     New benchmarking is needed when adding new handlers.",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": null,
                    "constants": [
                        {
                            "name": "MinimumPeriod",
                            "type": "Moment",
                            "value": "0xb80b000000000000",
                            "docs": [
                                " The minimum period between blocks. Beware that this is different to the *expected* period",
                                " that the block production apparatus provides. Your chosen consensus system will generally",
                                " work with this to determine a sensible block time. e.g. For Aura, it will be double this",
                                " period on default settings."
                            ]
                        }
                    ],
                    "errors": []
                },
                {
                    "name": "Indices",
                    "storage": {
                        "prefix": "Indices",
                        "items": [
                            {
                                "name": "Accounts",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Blake2_128Concat",
                                        "key": "AccountIndex",
                                        "value": "(AccountId,BalanceOf)",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The lookup from index to account."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "claim",
                            "args": [
                                {
                                    "name": "index",
                                    "type": "AccountIndex"
                                }
                            ],
                            "docs": [
                                " Assign an previously unassigned index.",
                                "",
                                " Payment: `Deposit` is reserved from the sender account.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " - `index`: the index to be claimed. This must not be in use.",
                                "",
                                " Emits `IndexAssigned` if successful.",
                                "",
                                " # <weight>",
                                " - `O(1)`.",
                                " - One storage mutation (codec `O(1)`).",
                                " - One reserve operation.",
                                " - One event.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "transfer",
                            "args": [
                                {
                                    "name": "new",
                                    "type": "AccountId"
                                },
                                {
                                    "name": "index",
                                    "type": "AccountIndex"
                                }
                            ],
                            "docs": [
                                " Assign an index already owned by the sender to another account. The balance reservation",
                                " is effectively transferred to the new account.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " - `index`: the index to be re-assigned. This must be owned by the sender.",
                                " - `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                                "",
                                " Emits `IndexAssigned` if successful.",
                                "",
                                " # <weight>",
                                " - `O(1)`.",
                                " - One storage mutation (codec `O(1)`).",
                                " - One transfer operation.",
                                " - One event.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "free",
                            "args": [
                                {
                                    "name": "index",
                                    "type": "AccountIndex"
                                }
                            ],
                            "docs": [
                                " Free up an index owned by the sender.",
                                "",
                                " Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                                "",
                                " The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                                "",
                                " - `index`: the index to be freed. This must be owned by the sender.",
                                "",
                                " Emits `IndexFreed` if successful.",
                                "",
                                " # <weight>",
                                " - `O(1)`.",
                                " - One storage mutation (codec `O(1)`).",
                                " - One reserve operation.",
                                " - One event.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "force_transfer",
                            "args": [
                                {
                                    "name": "new",
                                    "type": "AccountId"
                                },
                                {
                                    "name": "index",
                                    "type": "AccountIndex"
                                }
                            ],
                            "docs": [
                                " Force an index to an account. This doesn't require a deposit. If the index is already",
                                " held, then any deposit is reimbursed to its current owner.",
                                "",
                                " The dispatch origin for this call must be _Root_.",
                                "",
                                " - `index`: the index to be (re-)assigned.",
                                " - `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                                "",
                                " Emits `IndexAssigned` if successful.",
                                "",
                                " # <weight>",
                                " - `O(1)`.",
                                " - One storage mutation (codec `O(1)`).",
                                " - Up to one reserve operation.",
                                " - One event.",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "IndexAssigned",
                            "args": [
                                "AccountId",
                                "AccountIndex"
                            ],
                            "docs": [
                                " A account index was assigned."
                            ]
                        },
                        {
                            "name": "IndexFreed",
                            "args": [
                                "AccountIndex"
                            ],
                            "docs": [
                                " A account index has been freed up (unassigned)."
                            ]
                        }
                    ],
                    "constants": [],
                    "errors": []
                },
                {
                    "name": "Balances",
                    "storage": {
                        "prefix": "Balances",
                        "items": [
                            {
                                "name": "TotalIssuance",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Balance"
                                },
                                "fallback": "0x00000000000000000000000000000000",
                                "docs": [
                                    " The total units issued in the system."
                                ]
                            },
                            {
                                "name": "Account",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Blake2_128Concat",
                                        "key": "AccountId",
                                        "value": "AccountData",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                                "docs": [
                                    " The balance of an account.",
                                    "",
                                    " NOTE: THIS MAY NEVER BE IN EXISTENCE AND YET HAVE A `total().is_zero()`. If the total",
                                    " is ever zero, then the entry *MUST* be removed.",
                                    "",
                                    " NOTE: This is only used in the case that this module is used to store balances."
                                ]
                            },
                            {
                                "name": "Locks",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Blake2_128Concat",
                                        "key": "AccountId",
                                        "value": "Vec<BalanceLock>",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Any liquidity locks on some account balances.",
                                    " NOTE: Should only be accessed when setting, changing and freeing a lock."
                                ]
                            },
                            {
                                "name": "StorageVersion",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Releases"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Storage version of the pallet.",
                                    "",
                                    " This is set to v2.0.0 for new networks."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "transfer",
                            "args": [
                                {
                                    "name": "dest",
                                    "type": "LookupSource"
                                },
                                {
                                    "name": "value",
                                    "type": "Compact<Balance>"
                                }
                            ],
                            "docs": [
                                " Transfer some liquid free balance to another account.",
                                "",
                                " `transfer` will set the `FreeBalance` of the sender and receiver.",
                                " It will decrease the total issuance of the system by the `TransferFee`.",
                                " If the sender's account is below the existential deposit as a result",
                                " of the transfer, the account will be reaped.",
                                "",
                                " The dispatch origin for this call must be `Signed` by the transactor.",
                                "",
                                " # <weight>",
                                " - Dependent on arguments but not critical, given proper implementations for",
                                "   input config types. See related functions below.",
                                " - It contains a limited number of reads and writes internally and no complex computation.",
                                "",
                                " Related functions:",
                                "",
                                "   - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                                "   - Transferring balances to accounts that did not exist before will cause",
                                "      `T::OnNewAccount::on_new_account` to be called.",
                                "   - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                                "   - `transfer_keep_alive` works the same way as `transfer`, but has an additional",
                                "     check that the transfer will not kill the origin account.",
                                " ---------------------------------",
                                " - Base Weight: 73.64 µs, worst case scenario (account created, account removed)",
                                " - DB Weight: 1 Read and 1 Write to destination account",
                                " - Origin account is already in memory, so no DB operations for them.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "set_balance",
                            "args": [
                                {
                                    "name": "who",
                                    "type": "LookupSource"
                                },
                                {
                                    "name": "new_free",
                                    "type": "Compact<Balance>"
                                },
                                {
                                    "name": "new_reserved",
                                    "type": "Compact<Balance>"
                                }
                            ],
                            "docs": [
                                " Set the balances of a given account.",
                                "",
                                " This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                                " also decrease the total issuance of the system (`TotalIssuance`).",
                                " If the new free or reserved balance is below the existential deposit,",
                                " it will reset the account nonce (`frame_system::AccountNonce`).",
                                "",
                                " The dispatch origin for this call is `root`.",
                                "",
                                " # <weight>",
                                " - Independent of the arguments.",
                                " - Contains a limited number of reads and writes.",
                                " ---------------------",
                                " - Base Weight:",
                                "     - Creating: 27.56 µs",
                                "     - Killing: 35.11 µs",
                                " - DB Weight: 1 Read, 1 Write to `who`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "force_transfer",
                            "args": [
                                {
                                    "name": "source",
                                    "type": "LookupSource"
                                },
                                {
                                    "name": "dest",
                                    "type": "LookupSource"
                                },
                                {
                                    "name": "value",
                                    "type": "Compact<Balance>"
                                }
                            ],
                            "docs": [
                                " Exactly as `transfer`, except the origin must be root and the source account may be",
                                " specified.",
                                " # <weight>",
                                " - Same as transfer, but additional read and write because the source account is",
                                "   not assumed to be in the overlay.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "transfer_keep_alive",
                            "args": [
                                {
                                    "name": "dest",
                                    "type": "LookupSource"
                                },
                                {
                                    "name": "value",
                                    "type": "Compact<Balance>"
                                }
                            ],
                            "docs": [
                                " Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                                " origin account.",
                                "",
                                " 99% of the time you want [`transfer`] instead.",
                                "",
                                " [`transfer`]: struct.Module.html#method.transfer",
                                " # <weight>",
                                " - Cheaper than transfer because account cannot be killed.",
                                " - Base Weight: 51.4 µs",
                                " - DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)",
                                " #</weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "Endowed",
                            "args": [
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " An account was created with some free balance."
                            ]
                        },
                        {
                            "name": "DustLost",
                            "args": [
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " An account was removed whose balance was non-zero but below ExistentialDeposit,",
                                " resulting in an outright loss."
                            ]
                        },
                        {
                            "name": "Transfer",
                            "args": [
                                "AccountId",
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " Transfer succeeded (from, to, value)."
                            ]
                        },
                        {
                            "name": "BalanceSet",
                            "args": [
                                "AccountId",
                                "Balance",
                                "Balance"
                            ],
                            "docs": [
                                " A balance was set by root (who, free, reserved)."
                            ]
                        },
                        {
                            "name": "Deposit",
                            "args": [
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " Some amount was deposited (e.g. for transaction fees)."
                            ]
                        }
                    ],
                    "constants": [
                        {
                            "name": "ExistentialDeposit",
                            "type": "Balance",
                            "value": "0x00e40b54020000000000000000000000",
                            "docs": [
                                " The minimum amount required to keep an account open."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "VestingBalance",
                            "docs": [
                                " Vesting balance too high to send value"
                            ]
                        },
                        {
                            "name": "LiquidityRestrictions",
                            "docs": [
                                " Account liquidity restrictions prevent withdrawal"
                            ]
                        },
                        {
                            "name": "Overflow",
                            "docs": [
                                " Got an overflow after adding"
                            ]
                        },
                        {
                            "name": "InsufficientBalance",
                            "docs": [
                                " Balance too low to send value"
                            ]
                        },
                        {
                            "name": "ExistentialDeposit",
                            "docs": [
                                " Value too low to create account due to existential deposit"
                            ]
                        },
                        {
                            "name": "KeepAlive",
                            "docs": [
                                " Transfer/payment would kill account"
                            ]
                        },
                        {
                            "name": "ExistingVestingSchedule",
                            "docs": [
                                " A vesting schedule already exists for this account"
                            ]
                        },
                        {
                            "name": "DeadAccount",
                            "docs": [
                                " Beneficiary account must pre-exist"
                            ]
                        }
                    ]
                },
                {
                    "name": "TransactionPayment",
                    "storage": {
                        "prefix": "TransactionPayment",
                        "items": [
                            {
                                "name": "NextFeeMultiplier",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Multiplier"
                                },
                                "fallback": "0x00000000000000000000000000000000",
                                "docs": []
                            }
                        ]
                    },
                    "calls": null,
                    "events": null,
                    "constants": [
                        {
                            "name": "TransactionByteFee",
                            "type": "BalanceOf",
                            "value": "0x40420f00000000000000000000000000",
                            "docs": [
                                " The fee to be paid for making a transaction; the per-byte portion."
                            ]
                        },
                        {
                            "name": "WeightToFee",
                            "type": "Vec<WeightToFeeCoefficient>",
                            "value": "0x040000000000000000000000000000000000b4c4040001",
                            "docs": [
                                " The polynomial that is applied in order to derive fee from weight."
                            ]
                        }
                    ],
                    "errors": []
                },
                {
                    "name": "Authorship",
                    "storage": {
                        "prefix": "Authorship",
                        "items": [
                            {
                                "name": "Uncles",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<UncleEntryItem>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Uncles"
                                ]
                            },
                            {
                                "name": "Author",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "AccountId"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Author of current block."
                                ]
                            },
                            {
                                "name": "DidSetUncles",
                                "modifier": "Default",
                                "type": {
                                    "plain": "bool"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Whether uncles were already set in this block."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "set_uncles",
                            "args": [
                                {
                                    "name": "new_uncles",
                                    "type": "Vec<Header>"
                                }
                            ],
                            "docs": [
                                " Provide a set of uncles."
                            ]
                        }
                    ],
                    "events": null,
                    "constants": [],
                    "errors": [
                        {
                            "name": "InvalidUncleParent",
                            "docs": [
                                " The uncle parent not in the chain."
                            ]
                        },
                        {
                            "name": "UnclesAlreadySet",
                            "docs": [
                                " Uncles already set in the block."
                            ]
                        },
                        {
                            "name": "TooManyUncles",
                            "docs": [
                                " Too many uncles."
                            ]
                        },
                        {
                            "name": "GenesisUncle",
                            "docs": [
                                " The uncle is genesis."
                            ]
                        },
                        {
                            "name": "TooHighUncle",
                            "docs": [
                                " The uncle is too high in chain."
                            ]
                        },
                        {
                            "name": "UncleAlreadyIncluded",
                            "docs": [
                                " The uncle is already included."
                            ]
                        },
                        {
                            "name": "OldUncle",
                            "docs": [
                                " The uncle isn't recent enough to be included."
                            ]
                        }
                    ]
                },
                {
                    "name": "Staking",
                    "storage": {
                        "prefix": "Staking",
                        "items": [
                            {
                                "name": "HistoryDepth",
                                "modifier": "Default",
                                "type": {
                                    "plain": "u32"
                                },
                                "fallback": "0x54000000",
                                "docs": [
                                    " Number of eras to keep in history.",
                                    "",
                                    " Information is kept for eras in `[current_era - history_depth; current_era]`.",
                                    "",
                                    " Must be more than the number of eras delayed by session otherwise.",
                                    " I.e. active era must always be in history.",
                                    " I.e. `active_era > current_era - history_depth` must be guaranteed."
                                ]
                            },
                            {
                                "name": "ValidatorCount",
                                "modifier": "Default",
                                "type": {
                                    "plain": "u32"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " The ideal number of staking participants."
                                ]
                            },
                            {
                                "name": "MinimumValidatorCount",
                                "modifier": "Default",
                                "type": {
                                    "plain": "u32"
                                },
                                "fallback": "0x04000000",
                                "docs": [
                                    " Minimum number of staking participants before emergency conditions are imposed."
                                ]
                            },
                            {
                                "name": "Invulnerables",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<AccountId>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                                    " easy to initialize and the performance hit is minimal (we expect no more than four",
                                    " invulnerables) and restricted to testnets."
                                ]
                            },
                            {
                                "name": "Bonded",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "AccountId",
                                        "value": "AccountId",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Map from all locked \"stash\" accounts to the controller account."
                                ]
                            },
                            {
                                "name": "Ledger",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Blake2_128Concat",
                                        "key": "AccountId",
                                        "value": "StakingLedger",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
                                ]
                            },
                            {
                                "name": "Payee",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "AccountId",
                                        "value": "RewardDestination",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Where the reward payment should be made. Keyed by stash."
                                ]
                            },
                            {
                                "name": "Validators",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "AccountId",
                                        "value": "ValidatorPrefs",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The map from (wannabe) validator stash key to the preferences of that validator."
                                ]
                            },
                            {
                                "name": "Nominators",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "AccountId",
                                        "value": "Nominations",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The map from nominator stash key to the set of stash keys of all validators to nominate."
                                ]
                            },
                            {
                                "name": "CurrentEra",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "EraIndex"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The current era index.",
                                    "",
                                    " This is the latest planned era, depending on how the Session pallet queues the validator",
                                    " set, it might be active or not."
                                ]
                            },
                            {
                                "name": "ActiveEra",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "ActiveEraInfo"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The active era information, it holds index and start.",
                                    "",
                                    " The active era is the era currently rewarded.",
                                    " Validator set of this era must be equal to `SessionInterface::validators`."
                                ]
                            },
                            {
                                "name": "ErasStartSessionIndex",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "EraIndex",
                                        "value": "SessionIndex",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The session index at which the era start for the last `HISTORY_DEPTH` eras."
                                ]
                            },
                            {
                                "name": "ErasStakers",
                                "modifier": "Default",
                                "type": {
                                    "doubleMap": {
                                        "hasher": "Twox64Concat",
                                        "key1": "EraIndex",
                                        "key2": "AccountId",
                                        "value": "Exposure",
                                        "key2Hasher": "Twox64Concat"
                                    }
                                },
                                "fallback": "0x000000",
                                "docs": [
                                    " Exposure of validator at era.",
                                    "",
                                    " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                                    "",
                                    " Is it removed after `HISTORY_DEPTH` eras.",
                                    " If stakers hasn't been set or has been removed then empty exposure is returned."
                                ]
                            },
                            {
                                "name": "ErasStakersClipped",
                                "modifier": "Default",
                                "type": {
                                    "doubleMap": {
                                        "hasher": "Twox64Concat",
                                        "key1": "EraIndex",
                                        "key2": "AccountId",
                                        "value": "Exposure",
                                        "key2Hasher": "Twox64Concat"
                                    }
                                },
                                "fallback": "0x000000",
                                "docs": [
                                    " Clipped Exposure of validator at era.",
                                    "",
                                    " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                                    " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                                    " (Note: the field `total` and `own` of the exposure remains unchanged).",
                                    " This is used to limit the i/o cost for the nominator payout.",
                                    "",
                                    " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                                    "",
                                    " Is it removed after `HISTORY_DEPTH` eras.",
                                    " If stakers hasn't been set or has been removed then empty exposure is returned."
                                ]
                            },
                            {
                                "name": "ErasValidatorPrefs",
                                "modifier": "Default",
                                "type": {
                                    "doubleMap": {
                                        "hasher": "Twox64Concat",
                                        "key1": "EraIndex",
                                        "key2": "AccountId",
                                        "value": "ValidatorPrefs",
                                        "key2Hasher": "Twox64Concat"
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Similar to `ErasStakers`, this holds the preferences of validators.",
                                    "",
                                    " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                                    "",
                                    " Is it removed after `HISTORY_DEPTH` eras."
                                ]
                            },
                            {
                                "name": "ErasValidatorReward",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "EraIndex",
                                        "value": "BalanceOf",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                                    "",
                                    " Eras that haven't finished yet or has been removed doesn't have reward."
                                ]
                            },
                            {
                                "name": "ErasRewardPoints",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "EraIndex",
                                        "value": "EraRewardPoints",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x0000000000",
                                "docs": [
                                    " Rewards for the last `HISTORY_DEPTH` eras.",
                                    " If reward hasn't been set or has been removed then 0 reward is returned."
                                ]
                            },
                            {
                                "name": "ErasTotalStake",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "EraIndex",
                                        "value": "BalanceOf",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00000000000000000000000000000000",
                                "docs": [
                                    " The total amount staked for the last `HISTORY_DEPTH` eras.",
                                    " If total hasn't been set or has been removed then 0 stake is returned."
                                ]
                            },
                            {
                                "name": "ForceEra",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Forcing"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Mode of era forcing."
                                ]
                            },
                            {
                                "name": "SlashRewardFraction",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Perbill"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " The percentage of the slash that is distributed to reporters.",
                                    "",
                                    " The rest of the slashed value is handled by the `Slash`."
                                ]
                            },
                            {
                                "name": "CanceledSlashPayout",
                                "modifier": "Default",
                                "type": {
                                    "plain": "BalanceOf"
                                },
                                "fallback": "0x00000000000000000000000000000000",
                                "docs": [
                                    " The amount of currency given to reporters of a slash event which was",
                                    " canceled by extraordinary circumstances (e.g. governance)."
                                ]
                            },
                            {
                                "name": "UnappliedSlashes",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "EraIndex",
                                        "value": "Vec<UnappliedSlash>",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " All unapplied slashes that are queued for later."
                                ]
                            },
                            {
                                "name": "BondedEras",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<(EraIndex,SessionIndex)>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " A mapping from still-bonded eras to the first session index of that era.",
                                    "",
                                    " Must contains information for eras for the range:",
                                    " `[active_era - bounding_duration; active_era]`"
                                ]
                            },
                            {
                                "name": "ValidatorSlashInEra",
                                "modifier": "Optional",
                                "type": {
                                    "doubleMap": {
                                        "hasher": "Twox64Concat",
                                        "key1": "EraIndex",
                                        "key2": "AccountId",
                                        "value": "(Perbill,BalanceOf)",
                                        "key2Hasher": "Twox64Concat"
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " All slashing events on validators, mapped by era to the highest slash proportion",
                                    " and slash value of the era."
                                ]
                            },
                            {
                                "name": "NominatorSlashInEra",
                                "modifier": "Optional",
                                "type": {
                                    "doubleMap": {
                                        "hasher": "Twox64Concat",
                                        "key1": "EraIndex",
                                        "key2": "AccountId",
                                        "value": "BalanceOf",
                                        "key2Hasher": "Twox64Concat"
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " All slashing events on nominators, mapped by era to the highest slash value of the era."
                                ]
                            },
                            {
                                "name": "SlashingSpans",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "AccountId",
                                        "value": "SlashingSpans",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Slashing spans for stash accounts."
                                ]
                            },
                            {
                                "name": "SpanSlash",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "(AccountId,SpanIndex)",
                                        "value": "SpanRecord",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "docs": [
                                    " Records information about the maximum slash of a stash within a slashing span,",
                                    " as well as how much reward has been paid out."
                                ]
                            },
                            {
                                "name": "EarliestUnappliedSlash",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "EraIndex"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The earliest era for which we have a pending, unapplied slash."
                                ]
                            },
                            {
                                "name": "SnapshotValidators",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "Vec<AccountId>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Snapshot of validators at the beginning of the current election window. This should only",
                                    " have a value when [`EraElectionStatus`] == `ElectionStatus::Open(_)`."
                                ]
                            },
                            {
                                "name": "SnapshotNominators",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "Vec<AccountId>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Snapshot of nominators at the beginning of the current election window. This should only",
                                    " have a value when [`EraElectionStatus`] == `ElectionStatus::Open(_)`."
                                ]
                            },
                            {
                                "name": "QueuedElected",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "ElectionResult"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The next validator set. At the end of an era, if this is available (potentially from the",
                                    " result of an offchain worker), it is immediately used. Otherwise, the on-chain election",
                                    " is executed."
                                ]
                            },
                            {
                                "name": "QueuedScore",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "PhragmenScore"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The score of the current [`QueuedElected`]."
                                ]
                            },
                            {
                                "name": "EraElectionStatus",
                                "modifier": "Default",
                                "type": {
                                    "plain": "ElectionStatus"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Flag to control the execution of the offchain election. When `Open(_)`, we accept",
                                    " solutions to be submitted."
                                ]
                            },
                            {
                                "name": "IsCurrentSessionFinal",
                                "modifier": "Default",
                                "type": {
                                    "plain": "bool"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " True if the current **planned** session is final. Note that this does not take era",
                                    " forcing into account."
                                ]
                            },
                            {
                                "name": "StorageVersion",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Releases"
                                },
                                "fallback": "0x02",
                                "docs": [
                                    " True if network has been upgraded to this version.",
                                    " Storage version of the pallet.",
                                    "",
                                    " This is set to v3.0.0 for new networks."
                                ]
                            },
                            {
                                "name": "MigrateEra",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "EraIndex"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The era where we migrated from Lazy Payouts to Simple Payouts"
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "bond",
                            "args": [
                                {
                                    "name": "controller",
                                    "type": "LookupSource"
                                },
                                {
                                    "name": "value",
                                    "type": "Compact<BalanceOf>"
                                },
                                {
                                    "name": "payee",
                                    "type": "RewardDestination"
                                }
                            ],
                            "docs": [
                                " Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                                " be the account that controls it.",
                                "",
                                " `value` must be more than the `minimum_balance` specified by `T::Currency`.",
                                "",
                                " The dispatch origin for this call must be _Signed_ by the stash account.",
                                "",
                                " Emits `Bonded`.",
                                "",
                                " # <weight>",
                                " - Independent of the arguments. Moderate complexity.",
                                " - O(1).",
                                " - Three extra DB entries.",
                                "",
                                " NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                                " unless the `origin` falls below _existential deposit_ and gets removed as dust.",
                                " ------------------",
                                " Base Weight: 67.87 µs",
                                " DB Weight:",
                                " - Read: Bonded, Ledger, [Origin Account], Current Era, History Depth, Locks",
                                " - Write: Bonded, Payee, [Origin Account], Locks, Ledger",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "bond_extra",
                            "args": [
                                {
                                    "name": "max_additional",
                                    "type": "Compact<BalanceOf>"
                                }
                            ],
                            "docs": [
                                " Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                                " for staking.",
                                "",
                                " Use this if there are additional funds in your stash account that you wish to bond.",
                                " Unlike [`bond`] or [`unbond`] this function does not impose any limitation on the amount",
                                " that can be added.",
                                "",
                                " The dispatch origin for this call must be _Signed_ by the stash, not the controller and",
                                " it can be only called when [`EraElectionStatus`] is `Closed`.",
                                "",
                                " Emits `Bonded`.",
                                "",
                                " # <weight>",
                                " - Independent of the arguments. Insignificant complexity.",
                                " - O(1).",
                                " - One DB entry.",
                                " ------------",
                                " Base Weight: 54.88 µs",
                                " DB Weight:",
                                " - Read: Era Election Status, Bonded, Ledger, [Origin Account], Locks",
                                " - Write: [Origin Account], Locks, Ledger",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "unbond",
                            "args": [
                                {
                                    "name": "value",
                                    "type": "Compact<BalanceOf>"
                                }
                            ],
                            "docs": [
                                " Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                                " period ends. If this leaves an amount actively bonded less than",
                                " T::Currency::minimum_balance(), then it is increased to the full amount.",
                                "",
                                " Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                                " the funds out of management ready for transfer.",
                                "",
                                " No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
                                " can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need",
                                " to be called first to remove some of the chunks (if possible).",
                                "",
                                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                                "",
                                " Emits `Unbonded`.",
                                "",
                                " See also [`Call::withdraw_unbonded`].",
                                "",
                                " # <weight>",
                                " - Independent of the arguments. Limited but potentially exploitable complexity.",
                                " - Contains a limited number of reads.",
                                " - Each call (requires the remainder of the bonded balance to be above `minimum_balance`)",
                                "   will cause a new entry to be inserted into a vector (`Ledger.unlocking`) kept in storage.",
                                "   The only way to clean the aforementioned storage item is also user-controlled via",
                                "   `withdraw_unbonded`.",
                                " - One DB entry.",
                                " ----------",
                                " Base Weight: 50.34 µs",
                                " DB Weight:",
                                " - Read: Era Election Status, Ledger, Current Era, Locks, [Origin Account]",
                                " - Write: [Origin Account], Locks, Ledger",
                                " </weight>"
                            ]
                        },
                        {
                            "name": "withdraw_unbonded",
                            "args": [
                                {
                                    "name": "num_slashing_spans",
                                    "type": "u32"
                                }
                            ],
                            "docs": [
                                " Remove any unlocked chunks from the `unlocking` queue from our management.",
                                "",
                                " This essentially frees up that balance to be used by the stash account to do",
                                " whatever it wants.",
                                "",
                                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                                "",
                                " Emits `Withdrawn`.",
                                "",
                                " See also [`Call::unbond`].",
                                "",
                                " # <weight>",
                                " - Could be dependent on the `origin` argument and how much `unlocking` chunks exist.",
                                "  It implies `consolidate_unlocked` which loops over `Ledger.unlocking`, which is",
                                "  indirectly user-controlled. See [`unbond`] for more detail.",
                                " - Contains a limited number of reads, yet the size of which could be large based on `ledger`.",
                                " - Writes are limited to the `origin` account key.",
                                " ---------------",
                                " Complexity O(S) where S is the number of slashing spans to remove",
                                " Base Weight:",
                                " Update: 50.52 + .028 * S µs",
                                " - Reads: EraElectionStatus, Ledger, Current Era, Locks, [Origin Account]",
                                " - Writes: [Origin Account], Locks, Ledger",
                                " Kill: 79.41 + 2.366 * S µs",
                                " - Reads: EraElectionStatus, Ledger, Current Era, Bonded, Slashing Spans, [Origin Account], Locks",
                                " - Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators, [Origin Account], Locks",
                                " - Writes Each: SpanSlash * S",
                                " NOTE: Weight annotation is the kill scenario, we refund otherwise.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "validate",
                            "args": [
                                {
                                    "name": "prefs",
                                    "type": "ValidatorPrefs"
                                }
                            ],
                            "docs": [
                                " Declare the desire to validate for the origin controller.",
                                "",
                                " Effects will be felt at the beginning of the next era.",
                                "",
                                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                                "",
                                " # <weight>",
                                " - Independent of the arguments. Insignificant complexity.",
                                " - Contains a limited number of reads.",
                                " - Writes are limited to the `origin` account key.",
                                " -----------",
                                " Base Weight: 17.13 µs",
                                " DB Weight:",
                                " - Read: Era Election Status, Ledger",
                                " - Write: Nominators, Validators",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "nominate",
                            "args": [
                                {
                                    "name": "targets",
                                    "type": "Vec<LookupSource>"
                                }
                            ],
                            "docs": [
                                " Declare the desire to nominate `targets` for the origin controller.",
                                "",
                                " Effects will be felt at the beginning of the next era. This can only be called when",
                                " [`EraElectionStatus`] is `Closed`.",
                                "",
                                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                                "",
                                " # <weight>",
                                " - The transaction's complexity is proportional to the size of `targets` (N)",
                                " which is capped at CompactAssignments::LIMIT (MAX_NOMINATIONS).",
                                " - Both the reads and writes follow a similar pattern.",
                                " ---------",
                                " Base Weight: 22.34 + .36 * N µs",
                                " where N is the number of targets",
                                " DB Weight:",
                                " - Reads: Era Election Status, Ledger, Current Era",
                                " - Writes: Validators, Nominators",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "chill",
                            "args": [],
                            "docs": [
                                " Declare no desire to either validate or nominate.",
                                "",
                                " Effects will be felt at the beginning of the next era.",
                                "",
                                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                                "",
                                " # <weight>",
                                " - Independent of the arguments. Insignificant complexity.",
                                " - Contains one read.",
                                " - Writes are limited to the `origin` account key.",
                                " --------",
                                " Base Weight: 16.53 µs",
                                " DB Weight:",
                                " - Read: EraElectionStatus, Ledger",
                                " - Write: Validators, Nominators",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "set_payee",
                            "args": [
                                {
                                    "name": "payee",
                                    "type": "RewardDestination"
                                }
                            ],
                            "docs": [
                                " (Re-)set the payment target for a controller.",
                                "",
                                " Effects will be felt at the beginning of the next era.",
                                "",
                                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                "",
                                " # <weight>",
                                " - Independent of the arguments. Insignificant complexity.",
                                " - Contains a limited number of reads.",
                                " - Writes are limited to the `origin` account key.",
                                " ---------",
                                " - Base Weight: 11.33 µs",
                                " - DB Weight:",
                                "     - Read: Ledger",
                                "     - Write: Payee",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "set_controller",
                            "args": [
                                {
                                    "name": "controller",
                                    "type": "LookupSource"
                                }
                            ],
                            "docs": [
                                " (Re-)set the controller of a stash.",
                                "",
                                " Effects will be felt at the beginning of the next era.",
                                "",
                                " The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                                "",
                                " # <weight>",
                                " - Independent of the arguments. Insignificant complexity.",
                                " - Contains a limited number of reads.",
                                " - Writes are limited to the `origin` account key.",
                                " ----------",
                                " Base Weight: 25.22 µs",
                                " DB Weight:",
                                " - Read: Bonded, Ledger New Controller, Ledger Old Controller",
                                " - Write: Bonded, Ledger New Controller, Ledger Old Controller",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "set_validator_count",
                            "args": [
                                {
                                    "name": "new",
                                    "type": "Compact<u32>"
                                }
                            ],
                            "docs": [
                                " Sets the ideal number of validators.",
                                "",
                                " The dispatch origin must be Root.",
                                "",
                                " # <weight>",
                                " Base Weight: 1.717 µs",
                                " Write: Validator Count",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "force_no_eras",
                            "args": [],
                            "docs": [
                                " Force there to be no new eras indefinitely.",
                                "",
                                " The dispatch origin must be Root.",
                                "",
                                " # <weight>",
                                " - No arguments.",
                                " - Base Weight: 1.857 µs",
                                " - Write: ForceEra",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "force_new_era",
                            "args": [],
                            "docs": [
                                " Force there to be a new era at the end of the next session. After this, it will be",
                                " reset to normal (non-forced) behaviour.",
                                "",
                                " The dispatch origin must be Root.",
                                "",
                                " # <weight>",
                                " - No arguments.",
                                " - Base Weight: 1.959 µs",
                                " - Write ForceEra",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "set_invulnerables",
                            "args": [
                                {
                                    "name": "validators",
                                    "type": "Vec<AccountId>"
                                }
                            ],
                            "docs": [
                                " Set the validators who cannot be slashed (if any).",
                                "",
                                " The dispatch origin must be Root.",
                                "",
                                " # <weight>",
                                " - O(V)",
                                " - Base Weight: 2.208 + .006 * V µs",
                                " - Write: Invulnerables",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "force_unstake",
                            "args": [
                                {
                                    "name": "stash",
                                    "type": "AccountId"
                                },
                                {
                                    "name": "num_slashing_spans",
                                    "type": "u32"
                                }
                            ],
                            "docs": [
                                " Force a current staker to become completely unstaked, immediately.",
                                "",
                                " The dispatch origin must be Root.",
                                "",
                                " # <weight>",
                                " O(S) where S is the number of slashing spans to be removed",
                                " Base Weight: 53.07 + 2.365 * S µs",
                                " Reads: Bonded, Slashing Spans, Account, Locks",
                                " Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators, Account, Locks",
                                " Writes Each: SpanSlash * S",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "force_new_era_always",
                            "args": [],
                            "docs": [
                                " Force there to be a new era at the end of sessions indefinitely.",
                                "",
                                " The dispatch origin must be Root.",
                                "",
                                " # <weight>",
                                " - Base Weight: 2.05 µs",
                                " - Write: ForceEra",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "cancel_deferred_slash",
                            "args": [
                                {
                                    "name": "era",
                                    "type": "EraIndex"
                                },
                                {
                                    "name": "slash_indices",
                                    "type": "Vec<u32>"
                                }
                            ],
                            "docs": [
                                " Cancel enactment of a deferred slash.",
                                "",
                                " Can be called by either the root origin or the `T::SlashCancelOrigin`.",
                                "",
                                " Parameters: era and indices of the slashes for that era to kill.",
                                "",
                                " # <weight>",
                                " Complexity: O(U + S)",
                                " with U unapplied slashes weighted with U=1000",
                                " and S is the number of slash indices to be canceled.",
                                " - Base: 5870 + 34.61 * S µs",
                                " - Read: Unapplied Slashes",
                                " - Write: Unapplied Slashes",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "payout_nominator",
                            "args": [
                                {
                                    "name": "era",
                                    "type": "EraIndex"
                                },
                                {
                                    "name": "validators",
                                    "type": "Vec<(AccountId,u32)>"
                                }
                            ],
                            "docs": [
                                " **This extrinsic will be removed after `MigrationEra + HistoryDepth` has passed, giving",
                                " opportunity for users to claim all rewards before moving to Simple Payouts. After this",
                                " time, you should use `payout_stakers` instead.**",
                                "",
                                " Make one nominator's payout for one era.",
                                "",
                                " - `who` is the controller account of the nominator to pay out.",
                                " - `era` may not be lower than one following the most recently paid era. If it is higher,",
                                "   then it indicates an instruction to skip the payout of all previous eras.",
                                " - `validators` is the list of all validators that `who` had exposure to during `era`,",
                                "   alongside the index of `who` in the clipped exposure of the validator.",
                                "   I.e. each element is a tuple of",
                                "   `(validator, index of `who` in clipped exposure of validator)`.",
                                "   If it is incomplete, then less than the full reward will be paid out.",
                                "   It must not exceed `MAX_NOMINATIONS`.",
                                "",
                                " WARNING: once an era is payed for a validator such validator can't claim the payout of",
                                " previous era.",
                                "",
                                " WARNING: Incorrect arguments here can result in loss of payout. Be very careful.",
                                "",
                                " # <weight>",
                                " - Number of storage read of `O(validators)`; `validators` is the argument of the call,",
                                "   and is bounded by `MAX_NOMINATIONS`.",
                                " - Each storage read is `O(N)` size and decode complexity; `N` is the  maximum",
                                "   nominations that can be given to a single validator.",
                                " - Computation complexity: `O(MAX_NOMINATIONS * logN)`; `MAX_NOMINATIONS` is the",
                                "   maximum number of validators that may be nominated by a single nominator, it is",
                                "   bounded only economically (all nominators are required to place a minimum stake).",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "payout_validator",
                            "args": [
                                {
                                    "name": "era",
                                    "type": "EraIndex"
                                }
                            ],
                            "docs": [
                                " **This extrinsic will be removed after `MigrationEra + HistoryDepth` has passed, giving",
                                " opportunity for users to claim all rewards before moving to Simple Payouts. After this",
                                " time, you should use `payout_stakers` instead.**",
                                "",
                                " Make one validator's payout for one era.",
                                "",
                                " - `who` is the controller account of the validator to pay out.",
                                " - `era` may not be lower than one following the most recently paid era. If it is higher,",
                                "   then it indicates an instruction to skip the payout of all previous eras.",
                                "",
                                " WARNING: once an era is payed for a validator such validator can't claim the payout of",
                                " previous era.",
                                "",
                                " WARNING: Incorrect arguments here can result in loss of payout. Be very careful.",
                                "",
                                " # <weight>",
                                " - Time complexity: O(1).",
                                " - Contains a limited number of reads and writes.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "payout_stakers",
                            "args": [
                                {
                                    "name": "validator_stash",
                                    "type": "AccountId"
                                },
                                {
                                    "name": "era",
                                    "type": "EraIndex"
                                }
                            ],
                            "docs": [
                                " Pay out all the stakers behind a single validator for a single era.",
                                "",
                                " - `validator_stash` is the stash account of the validator. Their nominators, up to",
                                "   `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                                " - `era` may be any era between `[current_era - history_depth; current_era]`.",
                                "",
                                " The origin of this call must be _Signed_. Any account can call this function, even if",
                                " it is not one of the stakers.",
                                "",
                                " This can only be called when [`EraElectionStatus`] is `Closed`.",
                                "",
                                " # <weight>",
                                " - Time complexity: at most O(MaxNominatorRewardedPerValidator).",
                                " - Contains a limited number of reads and writes.",
                                " -----------",
                                " N is the Number of payouts for the validator (including the validator)",
                                " Base Weight: 110 + 54.2 * N µs (Median Slopes)",
                                " DB Weight:",
                                " - Read: EraElectionStatus, CurrentEra, HistoryDepth, MigrateEra, ErasValidatorReward,",
                                "         ErasStakersClipped, ErasRewardPoints, ErasValidatorPrefs (8 items)",
                                " - Read Each: Bonded, Ledger, Payee, Locks, System Account (5 items)",
                                " - Write Each: System Account, Locks, Ledger (3 items)",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "rebond",
                            "args": [
                                {
                                    "name": "value",
                                    "type": "Compact<BalanceOf>"
                                }
                            ],
                            "docs": [
                                " Rebond a portion of the stash scheduled to be unlocked.",
                                "",
                                " The dispatch origin must be signed by the controller, and it can be only called when",
                                " [`EraElectionStatus`] is `Closed`.",
                                "",
                                " # <weight>",
                                " - Time complexity: O(L), where L is unlocking chunks",
                                " - Bounded by `MAX_UNLOCKING_CHUNKS`.",
                                " - Storage changes: Can't increase storage, only decrease it.",
                                " ---------------",
                                " - Base Weight: 34.51 µs * .048 L µs",
                                " - DB Weight:",
                                "     - Reads: EraElectionStatus, Ledger, Locks, [Origin Account]",
                                "     - Writes: [Origin Account], Locks, Ledger",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "set_history_depth",
                            "args": [
                                {
                                    "name": "new_history_depth",
                                    "type": "Compact<EraIndex>"
                                },
                                {
                                    "name": "_era_items_deleted",
                                    "type": "Compact<u32>"
                                }
                            ],
                            "docs": [
                                " Set `HistoryDepth` value. This function will delete any history information",
                                " when `HistoryDepth` is reduced.",
                                "",
                                " Parameters:",
                                " - `new_history_depth`: The new history depth you would like to set.",
                                " - `era_items_deleted`: The number of items that will be deleted by this dispatch.",
                                "    This should report all the storage items that will be deleted by clearing old",
                                "    era history. Needed to report an accurate weight for the dispatch. Trusted by",
                                "    `Root` to report an accurate number.",
                                "",
                                " Origin must be root.",
                                "",
                                " # <weight>",
                                " - E: Number of history depths removed, i.e. 10 -> 7 = 3",
                                " - Base Weight: 29.13 * E µs",
                                " - DB Weight:",
                                "     - Reads: Current Era, History Depth",
                                "     - Writes: History Depth",
                                "     - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs",
                                "     - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake, ErasStartSessionIndex",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "reap_stash",
                            "args": [
                                {
                                    "name": "stash",
                                    "type": "AccountId"
                                },
                                {
                                    "name": "num_slashing_spans",
                                    "type": "u32"
                                }
                            ],
                            "docs": [
                                " Remove all data structure concerning a staker/stash once its balance is zero.",
                                " This is essentially equivalent to `withdraw_unbonded` except it can be called by anyone",
                                " and the target `stash` must have no funds left.",
                                "",
                                " This can be called from any origin.",
                                "",
                                " - `stash`: The stash account to reap. Its balance must be zero.",
                                "",
                                " # <weight>",
                                " Complexity: O(S) where S is the number of slashing spans on the account.",
                                " Base Weight: 75.94 + 2.396 * S µs",
                                " DB Weight:",
                                " - Reads: Stash Account, Bonded, Slashing Spans, Locks",
                                " - Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators, Stash Account, Locks",
                                " - Writes Each: SpanSlash * S",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "submit_election_solution",
                            "args": [
                                {
                                    "name": "winners",
                                    "type": "Vec<ValidatorIndex>"
                                },
                                {
                                    "name": "compact",
                                    "type": "CompactAssignments"
                                },
                                {
                                    "name": "score",
                                    "type": "PhragmenScore"
                                },
                                {
                                    "name": "era",
                                    "type": "EraIndex"
                                },
                                {
                                    "name": "size",
                                    "type": "ElectionSize"
                                }
                            ],
                            "docs": [
                                " Submit a phragmen result to the chain. If the solution:",
                                "",
                                " 1. is valid.",
                                " 2. has a better score than a potentially existing solution on chain.",
                                "",
                                " then, it will be _put_ on chain.",
                                "",
                                " A solution consists of two pieces of data:",
                                "",
                                " 1. `winners`: a flat vector of all the winners of the round.",
                                " 2. `assignments`: the compact version of an assignment vector that encodes the edge",
                                "    weights.",
                                "",
                                " Both of which may be computed using [`phragmen`], or any other algorithm.",
                                "",
                                " Additionally, the submitter must provide:",
                                "",
                                " - The `score` that they claim their solution has.",
                                "",
                                " Both validators and nominators will be represented by indices in the solution. The",
                                " indices should respect the corresponding types ([`ValidatorIndex`] and",
                                " [`NominatorIndex`]). Moreover, they should be valid when used to index into",
                                " [`SnapshotValidators`] and [`SnapshotNominators`]. Any invalid index will cause the",
                                " solution to be rejected. These two storage items are set during the election window and",
                                " may be used to determine the indices.",
                                "",
                                " A solution is valid if:",
                                "",
                                " 0. It is submitted when [`EraElectionStatus`] is `Open`.",
                                " 1. Its claimed score is equal to the score computed on-chain.",
                                " 2. Presents the correct number of winners.",
                                " 3. All indexes must be value according to the snapshot vectors. All edge values must",
                                "    also be correct and should not overflow the granularity of the ratio type (i.e. 256",
                                "    or billion).",
                                " 4. For each edge, all targets are actually nominated by the voter.",
                                " 5. Has correct self-votes.",
                                "",
                                " A solutions score is consisted of 3 parameters:",
                                "",
                                " 1. `min { support.total }` for each support of a winner. This value should be maximized.",
                                " 2. `sum { support.total }` for each support of a winner. This value should be minimized.",
                                " 3. `sum { support.total^2 }` for each support of a winner. This value should be",
                                "    minimized (to ensure less variance)",
                                "",
                                " # <weight>",
                                " See `crate::weight` module.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "submit_election_solution_unsigned",
                            "args": [
                                {
                                    "name": "winners",
                                    "type": "Vec<ValidatorIndex>"
                                },
                                {
                                    "name": "compact",
                                    "type": "CompactAssignments"
                                },
                                {
                                    "name": "score",
                                    "type": "PhragmenScore"
                                },
                                {
                                    "name": "era",
                                    "type": "EraIndex"
                                },
                                {
                                    "name": "size",
                                    "type": "ElectionSize"
                                }
                            ],
                            "docs": [
                                " Unsigned version of `submit_election_solution`.",
                                "",
                                " Note that this must pass the [`ValidateUnsigned`] check which only allows transactions",
                                " from the local node to be included. In other words, only the block author can include a",
                                " transaction in the block.",
                                "",
                                " # <weight>",
                                " See `crate::weight` module.",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "EraPayout",
                            "args": [
                                "EraIndex",
                                "Balance",
                                "Balance"
                            ],
                            "docs": [
                                " The era payout has been set; the first balance is the validator-payout; the second is",
                                " the remainder from the maximum amount of reward."
                            ]
                        },
                        {
                            "name": "Reward",
                            "args": [
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " The staker has been rewarded by this amount. `AccountId` is the stash account."
                            ]
                        },
                        {
                            "name": "Slash",
                            "args": [
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " One validator (and its nominators) has been slashed by the given amount."
                            ]
                        },
                        {
                            "name": "OldSlashingReportDiscarded",
                            "args": [
                                "SessionIndex"
                            ],
                            "docs": [
                                " An old slashing report from a prior era was discarded because it could",
                                " not be processed."
                            ]
                        },
                        {
                            "name": "StakingElection",
                            "args": [
                                "ElectionCompute"
                            ],
                            "docs": [
                                " A new set of stakers was elected with the given computation method."
                            ]
                        },
                        {
                            "name": "SolutionStored",
                            "args": [
                                "ElectionCompute"
                            ],
                            "docs": [
                                " A new solution for the upcoming election has been stored."
                            ]
                        },
                        {
                            "name": "Bonded",
                            "args": [
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " An account has bonded this amount.",
                                "",
                                " NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                                " it will not be emitted for staking rewards when they are added to stake."
                            ]
                        },
                        {
                            "name": "Unbonded",
                            "args": [
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " An account has unbonded this amount."
                            ]
                        },
                        {
                            "name": "Withdrawn",
                            "args": [
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                                " from the unlocking queue."
                            ]
                        }
                    ],
                    "constants": [
                        {
                            "name": "SessionsPerEra",
                            "type": "SessionIndex",
                            "value": "0x06000000",
                            "docs": [
                                " Number of sessions per era."
                            ]
                        },
                        {
                            "name": "BondingDuration",
                            "type": "EraIndex",
                            "value": "0x1c000000",
                            "docs": [
                                " Number of eras that staked funds must remain bonded for."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "NotController",
                            "docs": [
                                " Not a controller account."
                            ]
                        },
                        {
                            "name": "NotStash",
                            "docs": [
                                " Not a stash account."
                            ]
                        },
                        {
                            "name": "AlreadyBonded",
                            "docs": [
                                " Stash is already bonded."
                            ]
                        },
                        {
                            "name": "AlreadyPaired",
                            "docs": [
                                " Controller is already paired."
                            ]
                        },
                        {
                            "name": "EmptyTargets",
                            "docs": [
                                " Targets cannot be empty."
                            ]
                        },
                        {
                            "name": "DuplicateIndex",
                            "docs": [
                                " Duplicate index."
                            ]
                        },
                        {
                            "name": "InvalidSlashIndex",
                            "docs": [
                                " Slash record index out of bounds."
                            ]
                        },
                        {
                            "name": "InsufficientValue",
                            "docs": [
                                " Can not bond with value less than minimum balance."
                            ]
                        },
                        {
                            "name": "NoMoreChunks",
                            "docs": [
                                " Can not schedule more unlock chunks."
                            ]
                        },
                        {
                            "name": "NoUnlockChunk",
                            "docs": [
                                " Can not rebond without unlocking chunks."
                            ]
                        },
                        {
                            "name": "FundedTarget",
                            "docs": [
                                " Attempting to target a stash that still has funds."
                            ]
                        },
                        {
                            "name": "InvalidEraToReward",
                            "docs": [
                                " Invalid era to reward."
                            ]
                        },
                        {
                            "name": "InvalidNumberOfNominations",
                            "docs": [
                                " Invalid number of nominations."
                            ]
                        },
                        {
                            "name": "NotSortedAndUnique",
                            "docs": [
                                " Items are not sorted and unique."
                            ]
                        },
                        {
                            "name": "AlreadyClaimed",
                            "docs": [
                                " Rewards for this era have already been claimed for this validator."
                            ]
                        },
                        {
                            "name": "PhragmenEarlySubmission",
                            "docs": [
                                " The submitted result is received out of the open window."
                            ]
                        },
                        {
                            "name": "PhragmenWeakSubmission",
                            "docs": [
                                " The submitted result is not as good as the one stored on chain."
                            ]
                        },
                        {
                            "name": "SnapshotUnavailable",
                            "docs": [
                                " The snapshot data of the current window is missing."
                            ]
                        },
                        {
                            "name": "PhragmenBogusWinnerCount",
                            "docs": [
                                " Incorrect number of winners were presented."
                            ]
                        },
                        {
                            "name": "PhragmenBogusWinner",
                            "docs": [
                                " One of the submitted winners is not an active candidate on chain (index is out of range",
                                " in snapshot)."
                            ]
                        },
                        {
                            "name": "PhragmenBogusCompact",
                            "docs": [
                                " Error while building the assignment type from the compact. This can happen if an index",
                                " is invalid, or if the weights _overflow_."
                            ]
                        },
                        {
                            "name": "PhragmenBogusNominator",
                            "docs": [
                                " One of the submitted nominators is not an active nominator on chain."
                            ]
                        },
                        {
                            "name": "PhragmenBogusNomination",
                            "docs": [
                                " One of the submitted nominators has an edge to which they have not voted on chain."
                            ]
                        },
                        {
                            "name": "PhragmenSlashedNomination",
                            "docs": [
                                " One of the submitted nominators has an edge which is submitted before the last non-zero",
                                " slash of the target."
                            ]
                        },
                        {
                            "name": "PhragmenBogusSelfVote",
                            "docs": [
                                " A self vote must only be originated from a validator to ONLY themselves."
                            ]
                        },
                        {
                            "name": "PhragmenBogusEdge",
                            "docs": [
                                " The submitted result has unknown edges that are not among the presented winners."
                            ]
                        },
                        {
                            "name": "PhragmenBogusScore",
                            "docs": [
                                " The claimed score does not match with the one computed from the data."
                            ]
                        },
                        {
                            "name": "PhragmenBogusElectionSize",
                            "docs": [
                                " The election size is invalid."
                            ]
                        },
                        {
                            "name": "CallNotAllowed",
                            "docs": [
                                " The call is not allowed at the given time due to restrictions of election period."
                            ]
                        },
                        {
                            "name": "IncorrectHistoryDepth",
                            "docs": [
                                " Incorrect previous history depth input provided."
                            ]
                        },
                        {
                            "name": "IncorrectSlashingSpans",
                            "docs": [
                                " Incorrect number of slashing spans provided."
                            ]
                        }
                    ]
                },
                {
                    "name": "Offences",
                    "storage": {
                        "prefix": "Offences",
                        "items": [
                            {
                                "name": "Reports",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ReportIdOf",
                                        "value": "OffenceDetails",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The primary structure that holds all offence records keyed by report identifiers."
                                ]
                            },
                            {
                                "name": "DeferredOffences",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<DeferredOffenceOf>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Deferred reports that have been rejected by the offence handler and need to be submitted",
                                    " at a later time."
                                ]
                            },
                            {
                                "name": "ConcurrentReportsIndex",
                                "modifier": "Default",
                                "type": {
                                    "doubleMap": {
                                        "hasher": "Twox64Concat",
                                        "key1": "Kind",
                                        "key2": "OpaqueTimeSlot",
                                        "value": "Vec<ReportIdOf>",
                                        "key2Hasher": "Twox64Concat"
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " A vector of reports of the same kind that happened at the same time slot."
                                ]
                            },
                            {
                                "name": "ReportsByKindIndex",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "Kind",
                                        "value": "Bytes",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Enumerates all reports of a kind along with the time they happened.",
                                    "",
                                    " All reports are sorted by the time of offence.",
                                    "",
                                    " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                                    " different types are not supported at the moment so we are doing the manual serialization."
                                ]
                            }
                        ]
                    },
                    "calls": [],
                    "events": [
                        {
                            "name": "Offence",
                            "args": [
                                "Kind",
                                "OpaqueTimeSlot",
                                "bool"
                            ],
                            "docs": [
                                " There is an offence reported of the given `kind` happened at the `session_index` and",
                                " (kind-specific) time slot. This event is not deposited for duplicate slashes. last",
                                " element indicates of the offence was applied (true) or queued (false)."
                            ]
                        }
                    ],
                    "constants": [],
                    "errors": []
                },
                {
                    "name": "Historical",
                    "storage": null,
                    "calls": null,
                    "events": null,
                    "constants": [],
                    "errors": []
                },
                {
                    "name": "Session",
                    "storage": {
                        "prefix": "Session",
                        "items": [
                            {
                                "name": "Validators",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<ValidatorId>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The current set of validators."
                                ]
                            },
                            {
                                "name": "CurrentIndex",
                                "modifier": "Default",
                                "type": {
                                    "plain": "SessionIndex"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " Current index of the session."
                                ]
                            },
                            {
                                "name": "QueuedChanged",
                                "modifier": "Default",
                                "type": {
                                    "plain": "bool"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " True if the underlying economic identities or weighting behind the validators",
                                    " has changed in the queued validator set."
                                ]
                            },
                            {
                                "name": "QueuedKeys",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<(ValidatorId,Keys)>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The queued keys for the next session. When the next session begins, these keys",
                                    " will be used to determine the validator's session keys."
                                ]
                            },
                            {
                                "name": "DisabledValidators",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<u32>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Indices of disabled validators.",
                                    "",
                                    " The set is cleared when `on_session_ending` returns a new set of identities."
                                ]
                            },
                            {
                                "name": "NextKeys",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ValidatorId",
                                        "value": "Keys",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The next session keys for a validator."
                                ]
                            },
                            {
                                "name": "KeyOwner",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "(KeyTypeId,Bytes)",
                                        "value": "ValidatorId",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "set_keys",
                            "args": [
                                {
                                    "name": "keys",
                                    "type": "Keys"
                                },
                                {
                                    "name": "proof",
                                    "type": "Bytes"
                                }
                            ],
                            "docs": [
                                " Sets the session key(s) of the function caller to `keys`.",
                                " Allows an account to set its session key prior to becoming a validator.",
                                " This doesn't take effect until the next session.",
                                "",
                                " The dispatch origin of this function must be signed.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(1)`",
                                "   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                                " - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                                " - DbWrites: `origin account`, `NextKeys`",
                                " - DbReads per key id: `KeyOwner`",
                                " - DbWrites per key id: `KeyOwner`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "purge_keys",
                            "args": [],
                            "docs": [
                                " Removes any session key(s) of the function caller.",
                                " This doesn't take effect until the next session.",
                                "",
                                " The dispatch origin of this function must be signed.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(1)` in number of key types.",
                                "   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                                " - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                                " - DbWrites: `NextKeys`, `origin account`",
                                " - DbWrites per key id: `KeyOwnder`",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "NewSession",
                            "args": [
                                "SessionIndex"
                            ],
                            "docs": [
                                " New session has happened. Note that the argument is the session index, not the block",
                                " number as the type might suggest."
                            ]
                        }
                    ],
                    "constants": [],
                    "errors": [
                        {
                            "name": "InvalidProof",
                            "docs": [
                                " Invalid ownership proof."
                            ]
                        },
                        {
                            "name": "NoAssociatedValidatorId",
                            "docs": [
                                " No associated validator ID for account."
                            ]
                        },
                        {
                            "name": "DuplicatedKey",
                            "docs": [
                                " Registered duplicate key."
                            ]
                        },
                        {
                            "name": "NoKeys",
                            "docs": [
                                " No keys are associated with this account."
                            ]
                        }
                    ]
                },
                {
                    "name": "FinalityTracker",
                    "storage": {
                        "prefix": "FinalityTracker",
                        "items": [
                            {
                                "name": "RecentHints",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<BlockNumber>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Recent hints."
                                ]
                            },
                            {
                                "name": "OrderedHints",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<BlockNumber>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Ordered recent hints."
                                ]
                            },
                            {
                                "name": "Median",
                                "modifier": "Default",
                                "type": {
                                    "plain": "BlockNumber"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " The median."
                                ]
                            },
                            {
                                "name": "Update",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "BlockNumber"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Final hint to apply in the block. `None` means \"same as parent\"."
                                ]
                            },
                            {
                                "name": "Initialized",
                                "modifier": "Default",
                                "type": {
                                    "plain": "bool"
                                },
                                "fallback": "0x00",
                                "docs": []
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "final_hint",
                            "args": [
                                {
                                    "name": "hint",
                                    "type": "Compact<BlockNumber>"
                                }
                            ],
                            "docs": [
                                " Hint that the author of this block thinks the best finalized",
                                " block is the given number."
                            ]
                        }
                    ],
                    "events": null,
                    "constants": [
                        {
                            "name": "WindowSize",
                            "type": "BlockNumber",
                            "value": "0x65000000",
                            "docs": [
                                " The number of recent samples to keep from this chain. Default is 101."
                            ]
                        },
                        {
                            "name": "ReportLatency",
                            "type": "BlockNumber",
                            "value": "0xe8030000",
                            "docs": [
                                " The delay after which point things become suspicious. Default is 1000."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "AlreadyUpdated",
                            "docs": [
                                " Final hint must be updated only once in the block"
                            ]
                        },
                        {
                            "name": "BadHint",
                            "docs": [
                                " Finalized height above block number"
                            ]
                        }
                    ]
                },
                {
                    "name": "Grandpa",
                    "storage": {
                        "prefix": "GrandpaFinality",
                        "items": [
                            {
                                "name": "State",
                                "modifier": "Default",
                                "type": {
                                    "plain": "StoredState"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " State of the current authority set."
                                ]
                            },
                            {
                                "name": "PendingChange",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "StoredPendingChange"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Pending change: (signaled at, scheduled change)."
                                ]
                            },
                            {
                                "name": "NextForced",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "BlockNumber"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " next block number where we can force a change."
                                ]
                            },
                            {
                                "name": "Stalled",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "(BlockNumber,BlockNumber)"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " `true` if we are currently stalled."
                                ]
                            },
                            {
                                "name": "CurrentSetId",
                                "modifier": "Default",
                                "type": {
                                    "plain": "SetId"
                                },
                                "fallback": "0x0000000000000000",
                                "docs": [
                                    " The number of changes (both in terms of keys and underlying economic responsibilities)",
                                    " in the \"set\" of Grandpa validators from genesis."
                                ]
                            },
                            {
                                "name": "SetIdSession",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "SetId",
                                        "value": "SessionIndex",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                                    " members were responsible.",
                                    "",
                                    " TWOX-NOTE: `SetId` is not under user control."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "report_equivocation",
                            "args": [
                                {
                                    "name": "equivocation_proof",
                                    "type": "EquivocationProof"
                                },
                                {
                                    "name": "key_owner_proof",
                                    "type": "KeyOwnerProof"
                                }
                            ],
                            "docs": [
                                " Report voter equivocation/misbehavior. This method will verify the",
                                " equivocation proof and validate the given key ownership proof",
                                " against the extracted offender. If both are valid, the offence",
                                " will be reported.",
                                "",
                                " Since the weight of the extrinsic is 0, in order to avoid DoS by",
                                " submission of invalid equivocation reports, a mandatory pre-validation of",
                                " the extrinsic is implemented in a `SignedExtension`."
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "NewAuthorities",
                            "args": [
                                "AuthorityList"
                            ],
                            "docs": [
                                " New authority set has been applied."
                            ]
                        },
                        {
                            "name": "Paused",
                            "args": [],
                            "docs": [
                                " Current authority set has been paused."
                            ]
                        },
                        {
                            "name": "Resumed",
                            "args": [],
                            "docs": [
                                " Current authority set has been resumed."
                            ]
                        }
                    ],
                    "constants": [],
                    "errors": [
                        {
                            "name": "PauseFailed",
                            "docs": [
                                " Attempt to signal GRANDPA pause when the authority set isn't live",
                                " (either paused or already pending pause)."
                            ]
                        },
                        {
                            "name": "ResumeFailed",
                            "docs": [
                                " Attempt to signal GRANDPA resume when the authority set isn't paused",
                                " (either live or already pending resume)."
                            ]
                        },
                        {
                            "name": "ChangePending",
                            "docs": [
                                " Attempt to signal GRANDPA change with one already pending."
                            ]
                        },
                        {
                            "name": "TooSoon",
                            "docs": [
                                " Cannot signal forced change so soon after last."
                            ]
                        },
                        {
                            "name": "InvalidKeyOwnershipProof",
                            "docs": [
                                " A key ownership proof provided as part of an equivocation report is invalid."
                            ]
                        },
                        {
                            "name": "DuplicateOffenceReport",
                            "docs": [
                                " A given equivocation report is valid but already previously reported."
                            ]
                        }
                    ]
                },
                {
                    "name": "ImOnline",
                    "storage": {
                        "prefix": "ImOnline",
                        "items": [
                            {
                                "name": "HeartbeatAfter",
                                "modifier": "Default",
                                "type": {
                                    "plain": "BlockNumber"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " The block number after which it's ok to send heartbeats in current session.",
                                    "",
                                    " At the beginning of each session we set this to a value that should",
                                    " fall roughly in the middle of the session duration.",
                                    " The idea is to first wait for the validators to produce a block",
                                    " in the current session, so that the heartbeat later on will not be necessary."
                                ]
                            },
                            {
                                "name": "Keys",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<AuthorityId>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The current set of keys that may issue a heartbeat."
                                ]
                            },
                            {
                                "name": "ReceivedHeartbeats",
                                "modifier": "Optional",
                                "type": {
                                    "doubleMap": {
                                        "hasher": "Twox64Concat",
                                        "key1": "SessionIndex",
                                        "key2": "AuthIndex",
                                        "value": "Bytes",
                                        "key2Hasher": "Twox64Concat"
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " For each session index, we keep a mapping of `AuthIndex` to",
                                    " `offchain::OpaqueNetworkState`."
                                ]
                            },
                            {
                                "name": "AuthoredBlocks",
                                "modifier": "Default",
                                "type": {
                                    "doubleMap": {
                                        "hasher": "Twox64Concat",
                                        "key1": "SessionIndex",
                                        "key2": "ValidatorId",
                                        "value": "u32",
                                        "key2Hasher": "Twox64Concat"
                                    }
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " For each session index, we keep a mapping of `T::ValidatorId` to the",
                                    " number of blocks authored by the given authority."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "heartbeat",
                            "args": [
                                {
                                    "name": "heartbeat",
                                    "type": "Heartbeat"
                                },
                                {
                                    "name": "_signature",
                                    "type": "Signature"
                                }
                            ],
                            "docs": [
                                " # <weight>",
                                " - Complexity: `O(K + E)` where K is length of `Keys` and E is length of",
                                "   `Heartbeat.network_state.external_address`",
                                "",
                                "   - `O(K)`: decoding of length `K`",
                                "   - `O(E)`: decoding/encoding of length `E`",
                                " - DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
                                "   `ReceivedHeartbeats`",
                                " - DbWrites: `ReceivedHeartbeats`",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "HeartbeatReceived",
                            "args": [
                                "AuthorityId"
                            ],
                            "docs": [
                                " A new heartbeat was received from `AuthorityId`"
                            ]
                        },
                        {
                            "name": "AllGood",
                            "args": [],
                            "docs": [
                                " At the end of the session, no offence was committed."
                            ]
                        },
                        {
                            "name": "SomeOffline",
                            "args": [
                                "Vec<IdentificationTuple>"
                            ],
                            "docs": [
                                " At the end of the session, at least one validator was found to be offline."
                            ]
                        }
                    ],
                    "constants": [],
                    "errors": [
                        {
                            "name": "InvalidKey",
                            "docs": [
                                " Non existent public key."
                            ]
                        },
                        {
                            "name": "DuplicatedHeartbeat",
                            "docs": [
                                " Duplicated heartbeat."
                            ]
                        }
                    ]
                },
                {
                    "name": "AuthorityDiscovery",
                    "storage": null,
                    "calls": [],
                    "events": null,
                    "constants": [],
                    "errors": []
                },
                {
                    "name": "Democracy",
                    "storage": {
                        "prefix": "Democracy",
                        "items": [
                            {
                                "name": "PublicPropCount",
                                "modifier": "Default",
                                "type": {
                                    "plain": "PropIndex"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " The number of (public) proposals that have been made so far."
                                ]
                            },
                            {
                                "name": "PublicProps",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<(PropIndex,Hash,AccountId)>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The public proposals. Unsorted. The second item is the proposal's hash."
                                ]
                            },
                            {
                                "name": "DepositOf",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "PropIndex",
                                        "value": "(Vec<AccountId>,BalanceOf)",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Those who have locked a deposit.",
                                    "",
                                    " TWOX-NOTE: Safe, as increasing integer keys are safe."
                                ]
                            },
                            {
                                "name": "Preimages",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Identity",
                                        "key": "Hash",
                                        "value": "PreimageStatus",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                                    " The block number is the block at which it was deposited."
                                ]
                            },
                            {
                                "name": "ReferendumCount",
                                "modifier": "Default",
                                "type": {
                                    "plain": "ReferendumIndex"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " The next free referendum index, aka the number of referenda started so far."
                                ]
                            },
                            {
                                "name": "LowestUnbaked",
                                "modifier": "Default",
                                "type": {
                                    "plain": "ReferendumIndex"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " The lowest referendum index representing an unbaked referendum. Equal to",
                                    " `ReferendumCount` if there isn't a unbaked referendum."
                                ]
                            },
                            {
                                "name": "ReferendumInfoOf",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ReferendumIndex",
                                        "value": "ReferendumInfo",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Information concerning any given referendum.",
                                    "",
                                    " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
                                ]
                            },
                            {
                                "name": "VotingOf",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "AccountId",
                                        "value": "Voting",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                                "docs": [
                                    " All votes for a particular voter. We store the balance for the number of votes that we",
                                    " have recorded. The second item is the total amount of delegations, that will be added.",
                                    "",
                                    " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                                ]
                            },
                            {
                                "name": "Proxy",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "AccountId",
                                        "value": "ProxyState",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Who is able to vote for whom. Value is the fund-holding account, key is the",
                                    " vote-transaction-sending account.",
                                    "",
                                    " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                                ]
                            },
                            {
                                "name": "Locks",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "AccountId",
                                        "value": "BlockNumber",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Accounts for which there are locks in action which may be removed at some point in the",
                                    " future. The value is the block number at which the lock expires and may be removed.",
                                    "",
                                    " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                                ]
                            },
                            {
                                "name": "LastTabledWasExternal",
                                "modifier": "Default",
                                "type": {
                                    "plain": "bool"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " True if the last referendum tabled was submitted externally. False if it was a public",
                                    " proposal."
                                ]
                            },
                            {
                                "name": "NextExternal",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "(Hash,VoteThreshold)"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The referendum to be tabled whenever it would be valid to table an external proposal.",
                                    " This happens when a referendum needs to be tabled and one of two conditions are met:",
                                    " - `LastTabledWasExternal` is `false`; or",
                                    " - `PublicProps` is empty."
                                ]
                            },
                            {
                                "name": "Blacklist",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Identity",
                                        "key": "Hash",
                                        "value": "(BlockNumber,Vec<AccountId>)",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                                    " (until when it may not be resubmitted) and who vetoed it."
                                ]
                            },
                            {
                                "name": "Cancellations",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Identity",
                                        "key": "Hash",
                                        "value": "bool",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Record of all proposals that have been subject to emergency cancellation."
                                ]
                            },
                            {
                                "name": "StorageVersion",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "Releases"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Storage version of the pallet.",
                                    "",
                                    " New networks start with last version."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "propose",
                            "args": [
                                {
                                    "name": "proposal_hash",
                                    "type": "Hash"
                                },
                                {
                                    "name": "value",
                                    "type": "Compact<BalanceOf>"
                                }
                            ],
                            "docs": [
                                " Propose a sensitive action to be taken.",
                                "",
                                " The dispatch origin of this call must be _Signed_ and the sender must",
                                " have funds to cover the deposit.",
                                "",
                                " - `proposal_hash`: The hash of the proposal preimage.",
                                " - `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                                "",
                                " Emits `Proposed`.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(1)`",
                                " - Db reads: `PublicPropCount`, `PublicProps`",
                                " - Db writes: `PublicPropCount`, `PublicProps`, `DepositOf`",
                                " -------------------",
                                " Base Weight: 42.58 + .127 * P µs with `P` the number of proposals `PublicProps`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "second",
                            "args": [
                                {
                                    "name": "proposal",
                                    "type": "Compact<PropIndex>"
                                },
                                {
                                    "name": "seconds_upper_bound",
                                    "type": "Compact<u32>"
                                }
                            ],
                            "docs": [
                                " Signals agreement with a particular proposal.",
                                "",
                                " The dispatch origin of this call must be _Signed_ and the sender",
                                " must have funds to cover the deposit, equal to the original deposit.",
                                "",
                                " - `proposal`: The index of the proposal to second.",
                                " - `seconds_upper_bound`: an upper bound on the current number of seconds on this",
                                "   proposal. Extrinsic is weighted according to this value with no refund.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(S)` where S is the number of seconds a proposal already has.",
                                " - Db reads: `DepositOf`",
                                " - Db writes: `DepositOf`",
                                " ---------",
                                " - Base Weight: 22.28 + .229 * S µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "vote",
                            "args": [
                                {
                                    "name": "ref_index",
                                    "type": "Compact<ReferendumIndex>"
                                },
                                {
                                    "name": "vote",
                                    "type": "AccountVote"
                                }
                            ],
                            "docs": [
                                " Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                                " otherwise it is a vote to keep the status quo.",
                                "",
                                " The dispatch origin of this call must be _Signed_.",
                                "",
                                " - `ref_index`: The index of the referendum to vote for.",
                                " - `vote`: The vote configuration.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(R)` where R is the number of referendums the voter has voted on.",
                                "   weight is charged as if maximum votes.",
                                " - Db reads: `ReferendumInfoOf`, `VotingOf`, `balances locks`",
                                " - Db writes: `ReferendumInfoOf`, `VotingOf`, `balances locks`",
                                " --------------------",
                                " - Base Weight:",
                                "     - Vote New: 49.24 + .333 * R µs",
                                "     - Vote Existing: 49.94 + .343 * R µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "proxy_vote",
                            "args": [
                                {
                                    "name": "ref_index",
                                    "type": "Compact<ReferendumIndex>"
                                },
                                {
                                    "name": "vote",
                                    "type": "AccountVote"
                                }
                            ],
                            "docs": [
                                " Vote in a referendum on behalf of a stash. If `vote.is_aye()`, the vote is to enact",
                                " the proposal; otherwise it is a vote to keep the status quo.",
                                "",
                                " The dispatch origin of this call must be _Signed_.",
                                "",
                                " - `ref_index`: The index of the referendum to proxy vote for.",
                                " - `vote`: The vote configuration.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(R)` where R is the number of referendums the proxy has voted on.",
                                "   weight is charged as if maximum votes.",
                                " - Db reads: `ReferendumInfoOf`, `VotingOf`, `balances locks`, `Proxy`, `proxy account`",
                                " - Db writes: `ReferendumInfoOf`, `VotingOf`, `balances locks`",
                                " ------------",
                                " - Base Weight:",
                                "     - Proxy Vote New: 54.35 + .344 * R µs",
                                "     - Proxy Vote Existing: 54.35 + .35 * R µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "emergency_cancel",
                            "args": [
                                {
                                    "name": "ref_index",
                                    "type": "ReferendumIndex"
                                }
                            ],
                            "docs": [
                                " Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                                " referendum.",
                                "",
                                " The dispatch origin of this call must be `CancellationOrigin`.",
                                "",
                                " -`ref_index`: The index of the referendum to cancel.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(1)`.",
                                " - Db reads: `ReferendumInfoOf`, `Cancellations`",
                                " - Db writes: `ReferendumInfoOf`, `Cancellations`",
                                " -------------",
                                " - Base Weight: 34.25 µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "external_propose",
                            "args": [
                                {
                                    "name": "proposal_hash",
                                    "type": "Hash"
                                }
                            ],
                            "docs": [
                                " Schedule a referendum to be tabled once it is legal to schedule an external",
                                " referendum.",
                                "",
                                " The dispatch origin of this call must be `ExternalOrigin`.",
                                "",
                                " - `proposal_hash`: The preimage hash of the proposal.",
                                "",
                                " # <weight>",
                                " - Complexity `O(V)` with V number of vetoers in the blacklist of proposal.",
                                "   Decoding vec of length V. Charged as maximum",
                                " - Db reads: `NextExternal`, `Blacklist`",
                                " - Db writes: `NextExternal`",
                                " - Base Weight: 13.8 + .106 * V µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "external_propose_majority",
                            "args": [
                                {
                                    "name": "proposal_hash",
                                    "type": "Hash"
                                }
                            ],
                            "docs": [
                                " Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                                " an external referendum.",
                                "",
                                " The dispatch of this call must be `ExternalMajorityOrigin`.",
                                "",
                                " - `proposal_hash`: The preimage hash of the proposal.",
                                "",
                                " Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                                " pre-scheduled `external_propose` call.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(1)`",
                                " - Db write: `NextExternal`",
                                " - Base Weight: 3.065 µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "external_propose_default",
                            "args": [
                                {
                                    "name": "proposal_hash",
                                    "type": "Hash"
                                }
                            ],
                            "docs": [
                                " Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                                " schedule an external referendum.",
                                "",
                                " The dispatch of this call must be `ExternalDefaultOrigin`.",
                                "",
                                " - `proposal_hash`: The preimage hash of the proposal.",
                                "",
                                " Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                                " pre-scheduled `external_propose` call.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(1)`",
                                " - Db write: `NextExternal`",
                                " - Base Weight: 3.087 µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "fast_track",
                            "args": [
                                {
                                    "name": "proposal_hash",
                                    "type": "Hash"
                                },
                                {
                                    "name": "voting_period",
                                    "type": "BlockNumber"
                                },
                                {
                                    "name": "delay",
                                    "type": "BlockNumber"
                                }
                            ],
                            "docs": [
                                " Schedule the currently externally-proposed majority-carries referendum to be tabled",
                                " immediately. If there is no externally-proposed referendum currently, or if there is one",
                                " but it is not a majority-carries referendum then it fails.",
                                "",
                                " The dispatch of this call must be `FastTrackOrigin`.",
                                "",
                                " - `proposal_hash`: The hash of the current external proposal.",
                                " - `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                                "   `FastTrackVotingPeriod` if too low.",
                                " - `delay`: The number of block after voting has ended in approval and this should be",
                                "   enacted. This doesn't have a minimum amount.",
                                "",
                                " Emits `Started`.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(1)`",
                                " - Db reads: `NextExternal`, `ReferendumCount`",
                                " - Db writes: `NextExternal`, `ReferendumCount`, `ReferendumInfoOf`",
                                " - Base Weight: 30.1 µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "veto_external",
                            "args": [
                                {
                                    "name": "proposal_hash",
                                    "type": "Hash"
                                }
                            ],
                            "docs": [
                                " Veto and blacklist the external proposal hash.",
                                "",
                                " The dispatch origin of this call must be `VetoOrigin`.",
                                "",
                                " - `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                                "",
                                " Emits `Vetoed`.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(V + log(V))` where V is number of `existing vetoers`",
                                "   Performs a binary search on `existing_vetoers` which should not be very large.",
                                " - Db reads: `NextExternal`, `Blacklist`",
                                " - Db writes: `NextExternal`, `Blacklist`",
                                " - Base Weight: 29.87 + .188 * V µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "cancel_referendum",
                            "args": [
                                {
                                    "name": "ref_index",
                                    "type": "Compact<ReferendumIndex>"
                                }
                            ],
                            "docs": [
                                " Remove a referendum.",
                                "",
                                " The dispatch origin of this call must be _Root_.",
                                "",
                                " - `ref_index`: The index of the referendum to cancel.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(1)`.",
                                " - Db writes: `ReferendumInfoOf`",
                                " - Base Weight: 21.57 µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "cancel_queued",
                            "args": [
                                {
                                    "name": "which",
                                    "type": "ReferendumIndex"
                                }
                            ],
                            "docs": [
                                " Cancel a proposal queued for enactment.",
                                "",
                                " The dispatch origin of this call must be _Root_.",
                                "",
                                " - `which`: The index of the referendum to cancel.",
                                "",
                                " # <weight>",
                                " - `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`.",
                                " - Db reads: `scheduler lookup`, scheduler agenda`",
                                " - Db writes: `scheduler lookup`, scheduler agenda`",
                                " - Base Weight: 36.78 + 3.277 * D µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "activate_proxy",
                            "args": [
                                {
                                    "name": "proxy",
                                    "type": "AccountId"
                                }
                            ],
                            "docs": [
                                " Specify a proxy that is already open to us. Called by the stash.",
                                "",
                                " NOTE: Used to be called `set_proxy`.",
                                "",
                                " The dispatch origin of this call must be _Signed_.",
                                "",
                                " - `proxy`: The account that will be activated as proxy.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(1)`",
                                " - Db reads: `Proxy`",
                                " - Db writes: `Proxy`",
                                " - Base Weight: 7.972 µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "close_proxy",
                            "args": [],
                            "docs": [
                                " Clear the proxy. Called by the proxy.",
                                "",
                                " NOTE: Used to be called `resign_proxy`.",
                                "",
                                " The dispatch origin of this call must be _Signed_.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(1)`",
                                " - Db reads: `Proxy`, `sender account`",
                                " - Db writes: `Proxy`, `sender account`",
                                " - Base Weight: 15.41 µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "deactivate_proxy",
                            "args": [
                                {
                                    "name": "proxy",
                                    "type": "AccountId"
                                }
                            ],
                            "docs": [
                                " Deactivate the proxy, but leave open to this account. Called by the stash.",
                                "",
                                " The proxy must already be active.",
                                "",
                                " NOTE: Used to be called `remove_proxy`.",
                                "",
                                " The dispatch origin of this call must be _Signed_.",
                                "",
                                " - `proxy`: The account that will be deactivated as proxy.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(1)`",
                                " - Db reads: `Proxy`",
                                " - Db writes: `Proxy`",
                                " - Base Weight: 8.03 µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "delegate",
                            "args": [
                                {
                                    "name": "to",
                                    "type": "AccountId"
                                },
                                {
                                    "name": "conviction",
                                    "type": "Conviction"
                                },
                                {
                                    "name": "balance",
                                    "type": "BalanceOf"
                                }
                            ],
                            "docs": [
                                " Delegate the voting power (with some given conviction) of the sending account.",
                                "",
                                " The balance delegated is locked for as long as it's delegated, and thereafter for the",
                                " time appropriate for the conviction's lock period.",
                                "",
                                " The dispatch origin of this call must be _Signed_, and the signing account must either:",
                                "   - be delegating already; or",
                                "   - have no voting activity (if there is, then it will need to be removed/consolidated",
                                "     through `reap_vote` or `unvote`).",
                                "",
                                " - `to`: The account whose voting the `target` account's voting power will follow.",
                                " - `conviction`: The conviction that will be attached to the delegated votes. When the",
                                "   account is undelegated, the funds will be locked for the corresponding period.",
                                " - `balance`: The amount of the account's balance to be used in delegating. This must",
                                "   not be more than the account's current balance.",
                                "",
                                " Emits `Delegated`.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(R)` where R is the number of referendums the voter delegating to has",
                                "   voted on. Weight is charged as if maximum votes.",
                                " - Db reads: 2*`VotingOf`, `balances locks`",
                                " - Db writes: 2*`VotingOf`, `balances locks`",
                                " - Db reads per votes: `ReferendumInfoOf`",
                                " - Db writes per votes: `ReferendumInfoOf`",
                                " - Base Weight: 65.78 + 8.229 * R µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "undelegate",
                            "args": [],
                            "docs": [
                                " Undelegate the voting power of the sending account.",
                                "",
                                " Tokens may be unlocked following once an amount of time consistent with the lock period",
                                " of the conviction with which the delegation was issued.",
                                "",
                                " The dispatch origin of this call must be _Signed_ and the signing account must be",
                                " currently delegating.",
                                "",
                                " Emits `Undelegated`.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(R)` where R is the number of referendums the voter delegating to has",
                                "   voted on. Weight is charged as if maximum votes.",
                                " - Db reads: 2*`VotingOf`",
                                " - Db writes: 2*`VotingOf`",
                                " - Db reads per votes: `ReferendumInfoOf`",
                                " - Db writes per votes: `ReferendumInfoOf`",
                                " - Base Weight: 33.29 + 8.104 * R µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "clear_public_proposals",
                            "args": [],
                            "docs": [
                                " Clears all public proposals.",
                                "",
                                " The dispatch origin of this call must be _Root_.",
                                "",
                                " # <weight>",
                                " - `O(1)`.",
                                " - Db writes: `PublicProps`",
                                " - Base Weight: 2.505 µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "note_preimage",
                            "args": [
                                {
                                    "name": "encoded_proposal",
                                    "type": "Bytes"
                                }
                            ],
                            "docs": [
                                " Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                                " in the dispatch queue but does require a deposit, returned once enacted.",
                                "",
                                " The dispatch origin of this call must be _Signed_.",
                                "",
                                " - `encoded_proposal`: The preimage of a proposal.",
                                "",
                                " Emits `PreimageNoted`.",
                                "",
                                " # <weight>",
                                " see `weight_for::note_preimage`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "note_preimage_operational",
                            "args": [
                                {
                                    "name": "encoded_proposal",
                                    "type": "Bytes"
                                }
                            ],
                            "docs": [
                                " Same as `note_preimage` but origin is `OperationalPreimageOrigin`."
                            ]
                        },
                        {
                            "name": "note_imminent_preimage",
                            "args": [
                                {
                                    "name": "encoded_proposal",
                                    "type": "Bytes"
                                }
                            ],
                            "docs": [
                                " Register the preimage for an upcoming proposal. This requires the proposal to be",
                                " in the dispatch queue. No deposit is needed.",
                                "",
                                " The dispatch origin of this call must be _Signed_.",
                                "",
                                " - `encoded_proposal`: The preimage of a proposal.",
                                "",
                                " Emits `PreimageNoted`.",
                                "",
                                " # <weight>",
                                " see `weight_for::note_preimage`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "note_imminent_preimage_operational",
                            "args": [
                                {
                                    "name": "encoded_proposal",
                                    "type": "Bytes"
                                }
                            ],
                            "docs": [
                                " Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."
                            ]
                        },
                        {
                            "name": "reap_preimage",
                            "args": [
                                {
                                    "name": "proposal_hash",
                                    "type": "Hash"
                                },
                                {
                                    "name": "proposal_len_upper_bound",
                                    "type": "Compact<u32>"
                                }
                            ],
                            "docs": [
                                " Remove an expired proposal preimage and collect the deposit.",
                                "",
                                " The dispatch origin of this call must be _Signed_.",
                                "",
                                " - `proposal_hash`: The preimage hash of a proposal.",
                                " - `proposal_length_upper_bound`: an upper bound on length of the proposal.",
                                "   Extrinsic is weighted according to this value with no refund.",
                                "",
                                " This will only work after `VotingPeriod` blocks from the time that the preimage was",
                                " noted, if it's the same account doing it. If it's a different account, then it'll only",
                                " work an additional `EnactmentPeriod` later.",
                                "",
                                " Emits `PreimageReaped`.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(D)` where D is length of proposal.",
                                " - Db reads: `Preimages`",
                                " - Db writes: `Preimages`",
                                " - Base Weight: 39.31 + .003 * b µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "unlock",
                            "args": [
                                {
                                    "name": "target",
                                    "type": "AccountId"
                                }
                            ],
                            "docs": [
                                " Unlock tokens that have an expired lock.",
                                "",
                                " The dispatch origin of this call must be _Signed_.",
                                "",
                                " - `target`: The account to remove the lock on.",
                                "",
                                " # <weight>",
                                " - Complexity `O(R)` with R number of vote of target.",
                                " - Db reads: `VotingOf`, `balances locks`, `target account`",
                                " - Db writes: `VotingOf`, `balances locks`, `target account`",
                                " - Base Weight:",
                                "     - Unlock Remove: 42.96 + .048 * R",
                                "     - Unlock Set: 37.63 + .327 * R",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "open_proxy",
                            "args": [
                                {
                                    "name": "target",
                                    "type": "AccountId"
                                }
                            ],
                            "docs": [
                                " Become a proxy.",
                                "",
                                " This must be called prior to a later `activate_proxy`.",
                                "",
                                " Origin must be a Signed.",
                                "",
                                " - `target`: The account whose votes will later be proxied.",
                                "",
                                " `close_proxy` must be called before the account can be destroyed.",
                                "",
                                " # <weight>",
                                " - Complexity: O(1)",
                                " - Db reads: `Proxy`, `proxy account`",
                                " - Db writes: `Proxy`, `proxy account`",
                                " - Base Weight: 14.86 µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "remove_vote",
                            "args": [
                                {
                                    "name": "index",
                                    "type": "ReferendumIndex"
                                }
                            ],
                            "docs": [
                                " Remove a vote for a referendum.",
                                "",
                                " If:",
                                " - the referendum was cancelled, or",
                                " - the referendum is ongoing, or",
                                " - the referendum has ended such that",
                                "   - the vote of the account was in opposition to the result; or",
                                "   - there was no conviction to the account's vote; or",
                                "   - the account made a split vote",
                                " ...then the vote is removed cleanly and a following call to `unlock` may result in more",
                                " funds being available.",
                                "",
                                " If, however, the referendum has ended and:",
                                " - it finished corresponding to the vote of the account, and",
                                " - the account made a standard vote with conviction, and",
                                " - the lock period of the conviction is not over",
                                " ...then the lock will be aggregated into the overall account's lock, which may involve",
                                " *overlocking* (where the two locks are combined into a single lock that is the maximum",
                                " of both the amount locked and the time is it locked for).",
                                "",
                                " The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                                " registered for referendum `index`.",
                                "",
                                " - `index`: The index of referendum of the vote to be removed.",
                                "",
                                " # <weight>",
                                " - `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                                "   Weight is calculated for the maximum number of vote.",
                                " - Db reads: `ReferendumInfoOf`, `VotingOf`",
                                " - Db writes: `ReferendumInfoOf`, `VotingOf`",
                                " - Base Weight: 21.03 + .359 * R",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "remove_other_vote",
                            "args": [
                                {
                                    "name": "target",
                                    "type": "AccountId"
                                },
                                {
                                    "name": "index",
                                    "type": "ReferendumIndex"
                                }
                            ],
                            "docs": [
                                " Remove a vote for a referendum.",
                                "",
                                " If the `target` is equal to the signer, then this function is exactly equivalent to",
                                " `remove_vote`. If not equal to the signer, then the vote must have expired,",
                                " either because the referendum was cancelled, because the voter lost the referendum or",
                                " because the conviction period is over.",
                                "",
                                " The dispatch origin of this call must be _Signed_.",
                                "",
                                " - `target`: The account of the vote to be removed; this account must have voted for",
                                "   referendum `index`.",
                                " - `index`: The index of referendum of the vote to be removed.",
                                "",
                                " # <weight>",
                                " - `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                                "   Weight is calculated for the maximum number of vote.",
                                " - Db reads: `ReferendumInfoOf`, `VotingOf`",
                                " - Db writes: `ReferendumInfoOf`, `VotingOf`",
                                " - Base Weight: 19.15 + .372 * R",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "proxy_delegate",
                            "args": [
                                {
                                    "name": "to",
                                    "type": "AccountId"
                                },
                                {
                                    "name": "conviction",
                                    "type": "Conviction"
                                },
                                {
                                    "name": "balance",
                                    "type": "BalanceOf"
                                }
                            ],
                            "docs": [
                                " Delegate the voting power (with some given conviction) of a proxied account.",
                                "",
                                " The balance delegated is locked for as long as it's delegated, and thereafter for the",
                                " time appropriate for the conviction's lock period.",
                                "",
                                " The dispatch origin of this call must be _Signed_, and the signing account must have",
                                " been set as the proxy account for `target`.",
                                "",
                                " - `target`: The account whole voting power shall be delegated and whose balance locked.",
                                "   This account must either:",
                                "   - be delegating already; or",
                                "   - have no voting activity (if there is, then it will need to be removed/consolidated",
                                "     through `reap_vote` or `unvote`).",
                                " - `to`: The account whose voting the `target` account's voting power will follow.",
                                " - `conviction`: The conviction that will be attached to the delegated votes. When the",
                                "   account is undelegated, the funds will be locked for the corresponding period.",
                                " - `balance`: The amount of the account's balance to be used in delegating. This must",
                                "   not be more than the account's current balance.",
                                "",
                                " Emits `Delegated`.",
                                "",
                                " # <weight>",
                                " same as `delegate with additional:",
                                " - Db reads: `Proxy`, `proxy account`",
                                " - Db writes: `proxy account`",
                                " - Base Weight: 68.61 + 8.039 * R µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "proxy_undelegate",
                            "args": [],
                            "docs": [
                                " Undelegate the voting power of a proxied account.",
                                "",
                                " Tokens may be unlocked following once an amount of time consistent with the lock period",
                                " of the conviction with which the delegation was issued.",
                                "",
                                " The dispatch origin of this call must be _Signed_ and the signing account must be a",
                                " proxy for some other account which is currently delegating.",
                                "",
                                " Emits `Undelegated`.",
                                "",
                                " # <weight>",
                                " same as `undelegate with additional:",
                                " Db reads: `Proxy`",
                                " Base Weight: 39 + 7.958 * R µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "proxy_remove_vote",
                            "args": [
                                {
                                    "name": "index",
                                    "type": "ReferendumIndex"
                                }
                            ],
                            "docs": [
                                " Remove a proxied vote for a referendum.",
                                "",
                                " Exactly equivalent to `remove_vote` except that it operates on the account that the",
                                " sender is a proxy for.",
                                "",
                                " The dispatch origin of this call must be _Signed_ and the signing account must be a",
                                " proxy for some other account which has a registered vote for the referendum of `index`.",
                                "",
                                " - `index`: The index of referendum of the vote to be removed.",
                                "",
                                " # <weight>",
                                " - `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                                "   Weight is calculated for the maximum number of vote.",
                                " - Db reads: `ReferendumInfoOf`, `VotingOf`, `Proxy`",
                                " - Db writes: `ReferendumInfoOf`, `VotingOf`",
                                " - Base Weight: 26.35 + .36 * R µs",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "enact_proposal",
                            "args": [
                                {
                                    "name": "proposal_hash",
                                    "type": "Hash"
                                },
                                {
                                    "name": "index",
                                    "type": "ReferendumIndex"
                                }
                            ],
                            "docs": [
                                " Enact a proposal from a referendum. For now we just make the weight be the maximum."
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "Proposed",
                            "args": [
                                "PropIndex",
                                "Balance"
                            ],
                            "docs": [
                                " A motion has been proposed by a public account."
                            ]
                        },
                        {
                            "name": "Tabled",
                            "args": [
                                "PropIndex",
                                "Balance",
                                "Vec<AccountId>"
                            ],
                            "docs": [
                                " A public proposal has been tabled for referendum vote."
                            ]
                        },
                        {
                            "name": "ExternalTabled",
                            "args": [],
                            "docs": [
                                " An external proposal has been tabled."
                            ]
                        },
                        {
                            "name": "Started",
                            "args": [
                                "ReferendumIndex",
                                "VoteThreshold"
                            ],
                            "docs": [
                                " A referendum has begun."
                            ]
                        },
                        {
                            "name": "Passed",
                            "args": [
                                "ReferendumIndex"
                            ],
                            "docs": [
                                " A proposal has been approved by referendum."
                            ]
                        },
                        {
                            "name": "NotPassed",
                            "args": [
                                "ReferendumIndex"
                            ],
                            "docs": [
                                " A proposal has been rejected by referendum."
                            ]
                        },
                        {
                            "name": "Cancelled",
                            "args": [
                                "ReferendumIndex"
                            ],
                            "docs": [
                                " A referendum has been cancelled."
                            ]
                        },
                        {
                            "name": "Executed",
                            "args": [
                                "ReferendumIndex",
                                "bool"
                            ],
                            "docs": [
                                " A proposal has been enacted."
                            ]
                        },
                        {
                            "name": "Delegated",
                            "args": [
                                "AccountId",
                                "AccountId"
                            ],
                            "docs": [
                                " An account has delegated their vote to another account."
                            ]
                        },
                        {
                            "name": "Undelegated",
                            "args": [
                                "AccountId"
                            ],
                            "docs": [
                                " An account has cancelled a previous delegation operation."
                            ]
                        },
                        {
                            "name": "Vetoed",
                            "args": [
                                "AccountId",
                                "Hash",
                                "BlockNumber"
                            ],
                            "docs": [
                                " An external proposal has been vetoed."
                            ]
                        },
                        {
                            "name": "PreimageNoted",
                            "args": [
                                "Hash",
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " A proposal's preimage was noted, and the deposit taken."
                            ]
                        },
                        {
                            "name": "PreimageUsed",
                            "args": [
                                "Hash",
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " A proposal preimage was removed and used (the deposit was returned)."
                            ]
                        },
                        {
                            "name": "PreimageInvalid",
                            "args": [
                                "Hash",
                                "ReferendumIndex"
                            ],
                            "docs": [
                                " A proposal could not be executed because its preimage was invalid."
                            ]
                        },
                        {
                            "name": "PreimageMissing",
                            "args": [
                                "Hash",
                                "ReferendumIndex"
                            ],
                            "docs": [
                                " A proposal could not be executed because its preimage was missing."
                            ]
                        },
                        {
                            "name": "PreimageReaped",
                            "args": [
                                "Hash",
                                "AccountId",
                                "Balance",
                                "AccountId"
                            ],
                            "docs": [
                                " A registered preimage was removed and the deposit collected by the reaper (last item)."
                            ]
                        },
                        {
                            "name": "Unlocked",
                            "args": [
                                "AccountId"
                            ],
                            "docs": [
                                " An account has been unlocked successfully."
                            ]
                        }
                    ],
                    "constants": [
                        {
                            "name": "EnactmentPeriod",
                            "type": "BlockNumber",
                            "value": "0x00c20100",
                            "docs": [
                                " The minimum period of locking and the period between a proposal being approved and enacted.",
                                "",
                                " It should generally be a little more than the unstake period to ensure that",
                                " voting stakers have an opportunity to remove themselves from the system in the case where",
                                " they are on the losing side of a vote."
                            ]
                        },
                        {
                            "name": "LaunchPeriod",
                            "type": "BlockNumber",
                            "value": "0x00270600",
                            "docs": [
                                " How often (in blocks) new public referenda are launched."
                            ]
                        },
                        {
                            "name": "VotingPeriod",
                            "type": "BlockNumber",
                            "value": "0x00270600",
                            "docs": [
                                " How often (in blocks) to check for new votes."
                            ]
                        },
                        {
                            "name": "MinimumDeposit",
                            "type": "BalanceOf",
                            "value": "0x0010a5d4e80000000000000000000000",
                            "docs": [
                                " The minimum amount to be used as a deposit for a public referendum proposal."
                            ]
                        },
                        {
                            "name": "FastTrackVotingPeriod",
                            "type": "BlockNumber",
                            "value": "0x08070000",
                            "docs": [
                                " Minimum voting period allowed for an emergency referendum."
                            ]
                        },
                        {
                            "name": "CooloffPeriod",
                            "type": "BlockNumber",
                            "value": "0xc0890100",
                            "docs": [
                                " Period in blocks where an external proposal may not be re-submitted after being vetoed."
                            ]
                        },
                        {
                            "name": "PreimageByteDeposit",
                            "type": "BalanceOf",
                            "value": "0x00e1f505000000000000000000000000",
                            "docs": [
                                " The amount of balance that must be deposited per byte of preimage stored."
                            ]
                        },
                        {
                            "name": "MaxVotes",
                            "type": "u32",
                            "value": "0x64000000",
                            "docs": [
                                " The maximum number of votes for an account."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "ValueLow",
                            "docs": [
                                " Value too low"
                            ]
                        },
                        {
                            "name": "ProposalMissing",
                            "docs": [
                                " Proposal does not exist"
                            ]
                        },
                        {
                            "name": "NotProxy",
                            "docs": [
                                " Not a proxy"
                            ]
                        },
                        {
                            "name": "BadIndex",
                            "docs": [
                                " Unknown index"
                            ]
                        },
                        {
                            "name": "AlreadyCanceled",
                            "docs": [
                                " Cannot cancel the same proposal twice"
                            ]
                        },
                        {
                            "name": "DuplicateProposal",
                            "docs": [
                                " Proposal already made"
                            ]
                        },
                        {
                            "name": "ProposalBlacklisted",
                            "docs": [
                                " Proposal still blacklisted"
                            ]
                        },
                        {
                            "name": "NotSimpleMajority",
                            "docs": [
                                " Next external proposal not simple majority"
                            ]
                        },
                        {
                            "name": "InvalidHash",
                            "docs": [
                                " Invalid hash"
                            ]
                        },
                        {
                            "name": "NoProposal",
                            "docs": [
                                " No external proposal"
                            ]
                        },
                        {
                            "name": "AlreadyVetoed",
                            "docs": [
                                " Identity may not veto a proposal twice"
                            ]
                        },
                        {
                            "name": "AlreadyProxy",
                            "docs": [
                                " Already a proxy"
                            ]
                        },
                        {
                            "name": "WrongProxy",
                            "docs": [
                                " Wrong proxy"
                            ]
                        },
                        {
                            "name": "NotDelegated",
                            "docs": [
                                " Not delegated"
                            ]
                        },
                        {
                            "name": "DuplicatePreimage",
                            "docs": [
                                " Preimage already noted"
                            ]
                        },
                        {
                            "name": "NotImminent",
                            "docs": [
                                " Not imminent"
                            ]
                        },
                        {
                            "name": "TooEarly",
                            "docs": [
                                " Too early"
                            ]
                        },
                        {
                            "name": "Imminent",
                            "docs": [
                                " Imminent"
                            ]
                        },
                        {
                            "name": "PreimageMissing",
                            "docs": [
                                " Preimage not found"
                            ]
                        },
                        {
                            "name": "ReferendumInvalid",
                            "docs": [
                                " Vote given for invalid referendum"
                            ]
                        },
                        {
                            "name": "PreimageInvalid",
                            "docs": [
                                " Invalid preimage"
                            ]
                        },
                        {
                            "name": "NoneWaiting",
                            "docs": [
                                " No proposals waiting"
                            ]
                        },
                        {
                            "name": "NotLocked",
                            "docs": [
                                " The target account does not have a lock."
                            ]
                        },
                        {
                            "name": "NotExpired",
                            "docs": [
                                " The lock on the account to be unlocked has not yet expired."
                            ]
                        },
                        {
                            "name": "NotOpen",
                            "docs": [
                                " A proxy-pairing was attempted to an account that was not open."
                            ]
                        },
                        {
                            "name": "WrongOpen",
                            "docs": [
                                " A proxy-pairing was attempted to an account that was open to another account."
                            ]
                        },
                        {
                            "name": "NotActive",
                            "docs": [
                                " A proxy-de-pairing was attempted to an account that was not active."
                            ]
                        },
                        {
                            "name": "NotVoter",
                            "docs": [
                                " The given account did not vote on the referendum."
                            ]
                        },
                        {
                            "name": "NoPermission",
                            "docs": [
                                " The actor has no permission to conduct the action."
                            ]
                        },
                        {
                            "name": "AlreadyDelegating",
                            "docs": [
                                " The account is already delegating."
                            ]
                        },
                        {
                            "name": "Overflow",
                            "docs": [
                                " An unexpected integer overflow occurred."
                            ]
                        },
                        {
                            "name": "Underflow",
                            "docs": [
                                " An unexpected integer underflow occurred."
                            ]
                        },
                        {
                            "name": "InsufficientFunds",
                            "docs": [
                                " Too high a balance was provided that the account cannot afford."
                            ]
                        },
                        {
                            "name": "NotDelegating",
                            "docs": [
                                " The account is not currently delegating."
                            ]
                        },
                        {
                            "name": "VotesExist",
                            "docs": [
                                " The account currently has votes attached to it and the operation cannot succeed until",
                                " these are removed, either through `unvote` or `reap_vote`."
                            ]
                        },
                        {
                            "name": "InstantNotAllowed",
                            "docs": [
                                " The instant referendum origin is currently disallowed."
                            ]
                        },
                        {
                            "name": "Nonsense",
                            "docs": [
                                " Delegation to oneself makes no sense."
                            ]
                        },
                        {
                            "name": "WrongUpperBound",
                            "docs": [
                                " Invalid upper bound."
                            ]
                        },
                        {
                            "name": "MaxVotesReached",
                            "docs": [
                                " Maximum number of votes reached."
                            ]
                        }
                    ]
                },
                {
                    "name": "Council",
                    "storage": {
                        "prefix": "Instance1Collective",
                        "items": [
                            {
                                "name": "Proposals",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<Hash>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The hashes of the active proposals."
                                ]
                            },
                            {
                                "name": "ProposalOf",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Identity",
                                        "key": "Hash",
                                        "value": "Proposal",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Actual proposal for a given hash, if it's current."
                                ]
                            },
                            {
                                "name": "Voting",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Identity",
                                        "key": "Hash",
                                        "value": "Votes",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Votes on a given proposal, if it is ongoing."
                                ]
                            },
                            {
                                "name": "ProposalCount",
                                "modifier": "Default",
                                "type": {
                                    "plain": "u32"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " Proposals so far."
                                ]
                            },
                            {
                                "name": "Members",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<AccountId>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The current members of the collective. This is stored sorted (just by value)."
                                ]
                            },
                            {
                                "name": "Prime",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "AccountId"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The member who provides the default vote for any other members that do not vote before",
                                    " the timeout. If None, then no member has that privilege."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "set_members",
                            "args": [
                                {
                                    "name": "new_members",
                                    "type": "Vec<AccountId>"
                                },
                                {
                                    "name": "prime",
                                    "type": "Option<AccountId>"
                                },
                                {
                                    "name": "old_count",
                                    "type": "MemberCount"
                                }
                            ],
                            "docs": [
                                " Set the collective's membership.",
                                "",
                                " - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                                " - `prime`: The prime member whose vote sets the default.",
                                " - `old_count`: The upper bound for the previous number of members in storage.",
                                "                Used for weight estimation.",
                                "",
                                " Requires root origin.",
                                "",
                                " NOTE: Does not enforce the expected `MAX_MEMBERS` limit on the amount of members, but",
                                "       the weight estimations rely on it to estimate dispatchable weight.",
                                "",
                                " # <weight>",
                                " ## Weight",
                                " - `O(MP + N)` where:",
                                "   - `M` old-members-count (code- and governance-bounded)",
                                "   - `N` new-members-count (code- and governance-bounded)",
                                "   - `P` proposals-count (code-bounded)",
                                " - DB:",
                                "   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                                "   - 1 storage read (codec `O(P)`) for reading the proposals",
                                "   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                                "   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "execute",
                            "args": [
                                {
                                    "name": "proposal",
                                    "type": "Proposal"
                                },
                                {
                                    "name": "length_bound",
                                    "type": "Compact<u32>"
                                }
                            ],
                            "docs": [
                                " Dispatch a proposal from a member using the `Member` origin.",
                                "",
                                " Origin must be a member of the collective.",
                                "",
                                " # <weight>",
                                " ## Weight",
                                " - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                                " - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                                " - 1 event",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "propose",
                            "args": [
                                {
                                    "name": "threshold",
                                    "type": "Compact<MemberCount>"
                                },
                                {
                                    "name": "proposal",
                                    "type": "Proposal"
                                },
                                {
                                    "name": "length_bound",
                                    "type": "Compact<u32>"
                                }
                            ],
                            "docs": [
                                " Add a new proposal to either be voted on or executed directly.",
                                "",
                                " Requires the sender to be member.",
                                "",
                                " `threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                                " or put up for voting.",
                                "",
                                " # <weight>",
                                " ## Weight",
                                " - `O(B + M + P1)` or `O(B + M + P2)` where:",
                                "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                                "   - `M` is members-count (code- and governance-bounded)",
                                "   - branching is influenced by `threshold` where:",
                                "     - `P1` is proposal execution complexity (`threshold < 2`)",
                                "     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                                " - DB:",
                                "   - 1 storage read `is_member` (codec `O(M)`)",
                                "   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                                "   - DB accesses influenced by `threshold`:",
                                "     - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                                "     - OR proposal insertion (`threshold <= 2`)",
                                "       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                                "       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                                "       - 1 storage write `ProposalOf` (codec `O(B)`)",
                                "       - 1 storage write `Voting` (codec `O(M)`)",
                                "   - 1 event",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "vote",
                            "args": [
                                {
                                    "name": "proposal",
                                    "type": "Hash"
                                },
                                {
                                    "name": "index",
                                    "type": "Compact<ProposalIndex>"
                                },
                                {
                                    "name": "approve",
                                    "type": "bool"
                                }
                            ],
                            "docs": [
                                " Add an aye or nay vote for the sender to the given proposal.",
                                "",
                                " Requires the sender to be a member.",
                                "",
                                " # <weight>",
                                " ## Weight",
                                " - `O(M)` where `M` is members-count (code- and governance-bounded)",
                                " - DB:",
                                "   - 1 storage read `Members` (codec `O(M)`)",
                                "   - 1 storage mutation `Voting` (codec `O(M)`)",
                                " - 1 event",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "close",
                            "args": [
                                {
                                    "name": "proposal",
                                    "type": "Hash"
                                },
                                {
                                    "name": "index",
                                    "type": "Compact<ProposalIndex>"
                                },
                                {
                                    "name": "proposal_weight_bound",
                                    "type": "Compact<Weight>"
                                },
                                {
                                    "name": "length_bound",
                                    "type": "Compact<u32>"
                                }
                            ],
                            "docs": [
                                " Close a vote that is either approved, disapproved or whose voting period has ended.",
                                "",
                                " May be called by any signed account in order to finish voting and close the proposal.",
                                "",
                                " If called before the end of the voting period it will only close the vote if it is",
                                " has enough votes to be approved or disapproved.",
                                "",
                                " If called after the end of the voting period abstentions are counted as rejections",
                                " unless there is a prime member set and the prime member cast an approval.",
                                "",
                                " + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                                " + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                                "                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                                "",
                                " # <weight>",
                                " ## Weight",
                                " - `O(B + M + P1 + P2)` where:",
                                "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                                "   - `M` is members-count (code- and governance-bounded)",
                                "   - `P1` is the complexity of `proposal` preimage.",
                                "   - `P2` is proposal-count (code-bounded)",
                                " - DB:",
                                "  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                                "  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                                "  - any mutations done while executing `proposal` (`P1`)",
                                " - up to 3 events",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "Proposed",
                            "args": [
                                "AccountId",
                                "ProposalIndex",
                                "Hash",
                                "MemberCount"
                            ],
                            "docs": [
                                " A motion (given hash) has been proposed (by given account) with a threshold (given",
                                " `MemberCount`)."
                            ]
                        },
                        {
                            "name": "Voted",
                            "args": [
                                "AccountId",
                                "Hash",
                                "bool",
                                "MemberCount",
                                "MemberCount"
                            ],
                            "docs": [
                                " A motion (given hash) has been voted on by given account, leaving",
                                " a tally (yes votes and no votes given respectively as `MemberCount`)."
                            ]
                        },
                        {
                            "name": "Approved",
                            "args": [
                                "Hash"
                            ],
                            "docs": [
                                " A motion was approved by the required threshold."
                            ]
                        },
                        {
                            "name": "Disapproved",
                            "args": [
                                "Hash"
                            ],
                            "docs": [
                                " A motion was not approved by the required threshold."
                            ]
                        },
                        {
                            "name": "Executed",
                            "args": [
                                "Hash",
                                "DispatchResult"
                            ],
                            "docs": [
                                " A motion was executed; `bool` is true if returned without error."
                            ]
                        },
                        {
                            "name": "MemberExecuted",
                            "args": [
                                "Hash",
                                "DispatchResult"
                            ],
                            "docs": [
                                " A single member did some action; `bool` is true if returned without error."
                            ]
                        },
                        {
                            "name": "Closed",
                            "args": [
                                "Hash",
                                "MemberCount",
                                "MemberCount"
                            ],
                            "docs": [
                                " A proposal was closed after its duration was up."
                            ]
                        }
                    ],
                    "constants": [],
                    "errors": [
                        {
                            "name": "NotMember",
                            "docs": [
                                " Account is not a member"
                            ]
                        },
                        {
                            "name": "DuplicateProposal",
                            "docs": [
                                " Duplicate proposals not allowed"
                            ]
                        },
                        {
                            "name": "ProposalMissing",
                            "docs": [
                                " Proposal must exist"
                            ]
                        },
                        {
                            "name": "WrongIndex",
                            "docs": [
                                " Mismatched index"
                            ]
                        },
                        {
                            "name": "DuplicateVote",
                            "docs": [
                                " Duplicate vote ignored"
                            ]
                        },
                        {
                            "name": "AlreadyInitialized",
                            "docs": [
                                " Members are already initialized!"
                            ]
                        },
                        {
                            "name": "TooEarly",
                            "docs": [
                                " The close call is made too early, before the end of the voting."
                            ]
                        },
                        {
                            "name": "TooManyProposals",
                            "docs": [
                                " There can only be a maximum of `MaxProposals` active proposals."
                            ]
                        },
                        {
                            "name": "WrongProposalWeight",
                            "docs": [
                                " The given weight bound for the proposal was too low."
                            ]
                        },
                        {
                            "name": "WrongProposalLength",
                            "docs": [
                                " The given length bound for the proposal was too low."
                            ]
                        }
                    ]
                },
                {
                    "name": "TechnicalCommittee",
                    "storage": {
                        "prefix": "Instance2Collective",
                        "items": [
                            {
                                "name": "Proposals",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<Hash>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The hashes of the active proposals."
                                ]
                            },
                            {
                                "name": "ProposalOf",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Identity",
                                        "key": "Hash",
                                        "value": "Proposal",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Actual proposal for a given hash, if it's current."
                                ]
                            },
                            {
                                "name": "Voting",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Identity",
                                        "key": "Hash",
                                        "value": "Votes",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Votes on a given proposal, if it is ongoing."
                                ]
                            },
                            {
                                "name": "ProposalCount",
                                "modifier": "Default",
                                "type": {
                                    "plain": "u32"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " Proposals so far."
                                ]
                            },
                            {
                                "name": "Members",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<AccountId>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The current members of the collective. This is stored sorted (just by value)."
                                ]
                            },
                            {
                                "name": "Prime",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "AccountId"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The member who provides the default vote for any other members that do not vote before",
                                    " the timeout. If None, then no member has that privilege."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "set_members",
                            "args": [
                                {
                                    "name": "new_members",
                                    "type": "Vec<AccountId>"
                                },
                                {
                                    "name": "prime",
                                    "type": "Option<AccountId>"
                                },
                                {
                                    "name": "old_count",
                                    "type": "MemberCount"
                                }
                            ],
                            "docs": [
                                " Set the collective's membership.",
                                "",
                                " - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                                " - `prime`: The prime member whose vote sets the default.",
                                " - `old_count`: The upper bound for the previous number of members in storage.",
                                "                Used for weight estimation.",
                                "",
                                " Requires root origin.",
                                "",
                                " NOTE: Does not enforce the expected `MAX_MEMBERS` limit on the amount of members, but",
                                "       the weight estimations rely on it to estimate dispatchable weight.",
                                "",
                                " # <weight>",
                                " ## Weight",
                                " - `O(MP + N)` where:",
                                "   - `M` old-members-count (code- and governance-bounded)",
                                "   - `N` new-members-count (code- and governance-bounded)",
                                "   - `P` proposals-count (code-bounded)",
                                " - DB:",
                                "   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                                "   - 1 storage read (codec `O(P)`) for reading the proposals",
                                "   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                                "   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "execute",
                            "args": [
                                {
                                    "name": "proposal",
                                    "type": "Proposal"
                                },
                                {
                                    "name": "length_bound",
                                    "type": "Compact<u32>"
                                }
                            ],
                            "docs": [
                                " Dispatch a proposal from a member using the `Member` origin.",
                                "",
                                " Origin must be a member of the collective.",
                                "",
                                " # <weight>",
                                " ## Weight",
                                " - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                                " - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                                " - 1 event",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "propose",
                            "args": [
                                {
                                    "name": "threshold",
                                    "type": "Compact<MemberCount>"
                                },
                                {
                                    "name": "proposal",
                                    "type": "Proposal"
                                },
                                {
                                    "name": "length_bound",
                                    "type": "Compact<u32>"
                                }
                            ],
                            "docs": [
                                " Add a new proposal to either be voted on or executed directly.",
                                "",
                                " Requires the sender to be member.",
                                "",
                                " `threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                                " or put up for voting.",
                                "",
                                " # <weight>",
                                " ## Weight",
                                " - `O(B + M + P1)` or `O(B + M + P2)` where:",
                                "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                                "   - `M` is members-count (code- and governance-bounded)",
                                "   - branching is influenced by `threshold` where:",
                                "     - `P1` is proposal execution complexity (`threshold < 2`)",
                                "     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                                " - DB:",
                                "   - 1 storage read `is_member` (codec `O(M)`)",
                                "   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                                "   - DB accesses influenced by `threshold`:",
                                "     - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                                "     - OR proposal insertion (`threshold <= 2`)",
                                "       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                                "       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                                "       - 1 storage write `ProposalOf` (codec `O(B)`)",
                                "       - 1 storage write `Voting` (codec `O(M)`)",
                                "   - 1 event",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "vote",
                            "args": [
                                {
                                    "name": "proposal",
                                    "type": "Hash"
                                },
                                {
                                    "name": "index",
                                    "type": "Compact<ProposalIndex>"
                                },
                                {
                                    "name": "approve",
                                    "type": "bool"
                                }
                            ],
                            "docs": [
                                " Add an aye or nay vote for the sender to the given proposal.",
                                "",
                                " Requires the sender to be a member.",
                                "",
                                " # <weight>",
                                " ## Weight",
                                " - `O(M)` where `M` is members-count (code- and governance-bounded)",
                                " - DB:",
                                "   - 1 storage read `Members` (codec `O(M)`)",
                                "   - 1 storage mutation `Voting` (codec `O(M)`)",
                                " - 1 event",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "close",
                            "args": [
                                {
                                    "name": "proposal",
                                    "type": "Hash"
                                },
                                {
                                    "name": "index",
                                    "type": "Compact<ProposalIndex>"
                                },
                                {
                                    "name": "proposal_weight_bound",
                                    "type": "Compact<Weight>"
                                },
                                {
                                    "name": "length_bound",
                                    "type": "Compact<u32>"
                                }
                            ],
                            "docs": [
                                " Close a vote that is either approved, disapproved or whose voting period has ended.",
                                "",
                                " May be called by any signed account in order to finish voting and close the proposal.",
                                "",
                                " If called before the end of the voting period it will only close the vote if it is",
                                " has enough votes to be approved or disapproved.",
                                "",
                                " If called after the end of the voting period abstentions are counted as rejections",
                                " unless there is a prime member set and the prime member cast an approval.",
                                "",
                                " + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                                " + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                                "                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                                "",
                                " # <weight>",
                                " ## Weight",
                                " - `O(B + M + P1 + P2)` where:",
                                "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                                "   - `M` is members-count (code- and governance-bounded)",
                                "   - `P1` is the complexity of `proposal` preimage.",
                                "   - `P2` is proposal-count (code-bounded)",
                                " - DB:",
                                "  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                                "  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                                "  - any mutations done while executing `proposal` (`P1`)",
                                " - up to 3 events",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "Proposed",
                            "args": [
                                "AccountId",
                                "ProposalIndex",
                                "Hash",
                                "MemberCount"
                            ],
                            "docs": [
                                " A motion (given hash) has been proposed (by given account) with a threshold (given",
                                " `MemberCount`)."
                            ]
                        },
                        {
                            "name": "Voted",
                            "args": [
                                "AccountId",
                                "Hash",
                                "bool",
                                "MemberCount",
                                "MemberCount"
                            ],
                            "docs": [
                                " A motion (given hash) has been voted on by given account, leaving",
                                " a tally (yes votes and no votes given respectively as `MemberCount`)."
                            ]
                        },
                        {
                            "name": "Approved",
                            "args": [
                                "Hash"
                            ],
                            "docs": [
                                " A motion was approved by the required threshold."
                            ]
                        },
                        {
                            "name": "Disapproved",
                            "args": [
                                "Hash"
                            ],
                            "docs": [
                                " A motion was not approved by the required threshold."
                            ]
                        },
                        {
                            "name": "Executed",
                            "args": [
                                "Hash",
                                "DispatchResult"
                            ],
                            "docs": [
                                " A motion was executed; `bool` is true if returned without error."
                            ]
                        },
                        {
                            "name": "MemberExecuted",
                            "args": [
                                "Hash",
                                "DispatchResult"
                            ],
                            "docs": [
                                " A single member did some action; `bool` is true if returned without error."
                            ]
                        },
                        {
                            "name": "Closed",
                            "args": [
                                "Hash",
                                "MemberCount",
                                "MemberCount"
                            ],
                            "docs": [
                                " A proposal was closed after its duration was up."
                            ]
                        }
                    ],
                    "constants": [],
                    "errors": [
                        {
                            "name": "NotMember",
                            "docs": [
                                " Account is not a member"
                            ]
                        },
                        {
                            "name": "DuplicateProposal",
                            "docs": [
                                " Duplicate proposals not allowed"
                            ]
                        },
                        {
                            "name": "ProposalMissing",
                            "docs": [
                                " Proposal must exist"
                            ]
                        },
                        {
                            "name": "WrongIndex",
                            "docs": [
                                " Mismatched index"
                            ]
                        },
                        {
                            "name": "DuplicateVote",
                            "docs": [
                                " Duplicate vote ignored"
                            ]
                        },
                        {
                            "name": "AlreadyInitialized",
                            "docs": [
                                " Members are already initialized!"
                            ]
                        },
                        {
                            "name": "TooEarly",
                            "docs": [
                                " The close call is made too early, before the end of the voting."
                            ]
                        },
                        {
                            "name": "TooManyProposals",
                            "docs": [
                                " There can only be a maximum of `MaxProposals` active proposals."
                            ]
                        },
                        {
                            "name": "WrongProposalWeight",
                            "docs": [
                                " The given weight bound for the proposal was too low."
                            ]
                        },
                        {
                            "name": "WrongProposalLength",
                            "docs": [
                                " The given length bound for the proposal was too low."
                            ]
                        }
                    ]
                },
                {
                    "name": "ElectionsPhragmen",
                    "storage": {
                        "prefix": "PhragmenElection",
                        "items": [
                            {
                                "name": "Members",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<(AccountId,BalanceOf)>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The current elected membership. Sorted based on account id."
                                ]
                            },
                            {
                                "name": "RunnersUp",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<(AccountId,BalanceOf)>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The current runners_up. Sorted based on low to high merit (worse to best runner)."
                                ]
                            },
                            {
                                "name": "ElectionRounds",
                                "modifier": "Default",
                                "type": {
                                    "plain": "u32"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " The total number of vote rounds that have happened, excluding the upcoming one."
                                ]
                            },
                            {
                                "name": "Voting",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "AccountId",
                                        "value": "(BalanceOf,Vec<AccountId>)",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x0000000000000000000000000000000000",
                                "docs": [
                                    " Votes and locked stake of a particular voter.",
                                    "",
                                    " TWOX-NOTE: SAFE as `AccountId` is a crypto hash"
                                ]
                            },
                            {
                                "name": "Candidates",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<AccountId>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The present candidate list. Sorted based on account-id. A current member or runner-up",
                                    " can never enter this vector and is always implicitly assumed to be a candidate."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "vote",
                            "args": [
                                {
                                    "name": "votes",
                                    "type": "Vec<AccountId>"
                                },
                                {
                                    "name": "value",
                                    "type": "Compact<BalanceOf>"
                                }
                            ],
                            "docs": [
                                " Vote for a set of candidates for the upcoming round of election. This can be called to",
                                " set the initial votes, or update already existing votes.",
                                "",
                                " Upon initial voting, `value` units of `who`'s balance is locked and a bond amount is",
                                " reserved.",
                                "",
                                " The `votes` should:",
                                "   - not be empty.",
                                "   - be less than the number of possible candidates. Note that all current members and",
                                "     runners-up are also automatically candidates for the next round.",
                                "",
                                " It is the responsibility of the caller to not place all of their balance into the lock",
                                " and keep some for further transactions.",
                                "",
                                " # <weight>",
                                " Base weight: 47.93 µs",
                                " State reads:",
                                " \t- Candidates.len() + Members.len() + RunnersUp.len()",
                                " \t- Voting (is_voter)",
                                " \t- [AccountBalance(who) (unreserve + total_balance)]",
                                " State writes:",
                                " \t- Voting",
                                " \t- Lock",
                                " \t- [AccountBalance(who) (unreserve -- only when creating a new voter)]",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "remove_voter",
                            "args": [],
                            "docs": [
                                " Remove `origin` as a voter. This removes the lock and returns the bond.",
                                "",
                                " # <weight>",
                                " Base weight: 36.8 µs",
                                " All state access is from do_remove_voter.",
                                " State reads:",
                                " \t- Voting",
                                " \t- [AccountData(who)]",
                                " State writes:",
                                " \t- Voting",
                                " \t- Locks",
                                " \t- [AccountData(who)]",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "report_defunct_voter",
                            "args": [
                                {
                                    "name": "defunct",
                                    "type": "DefunctVoter"
                                }
                            ],
                            "docs": [
                                " Report `target` for being an defunct voter. In case of a valid report, the reporter is",
                                " rewarded by the bond amount of `target`. Otherwise, the reporter itself is removed and",
                                " their bond is slashed.",
                                "",
                                " A defunct voter is defined to be:",
                                "   - a voter whose current submitted votes are all invalid. i.e. all of them are no",
                                "     longer a candidate nor an active member or a runner-up.",
                                "",
                                "",
                                " The origin must provide the number of current candidates and votes of the reported target",
                                " for the purpose of accurate weight calculation.",
                                "",
                                " # <weight>",
                                " No Base weight based on min square analysis.",
                                " Complexity of candidate_count: 1.755 µs",
                                " Complexity of vote_count: 18.51 µs",
                                " State reads:",
                                "  \t- Voting(reporter)",
                                "  \t- Candidate.len()",
                                "  \t- Voting(Target)",
                                "  \t- Candidates, Members, RunnersUp (is_defunct_voter)",
                                " State writes:",
                                " \t- Lock(reporter || target)",
                                " \t- [AccountBalance(reporter)] + AccountBalance(target)",
                                " \t- Voting(reporter || target)",
                                " Note: the db access is worse with respect to db, which is when the report is correct.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "submit_candidacy",
                            "args": [
                                {
                                    "name": "candidate_count",
                                    "type": "Compact<u32>"
                                }
                            ],
                            "docs": [
                                " Submit oneself for candidacy.",
                                "",
                                " A candidate will either:",
                                "   - Lose at the end of the term and forfeit their deposit.",
                                "   - Win and become a member. Members will eventually get their stash back.",
                                "   - Become a runner-up. Runners-ups are reserved members in case one gets forcefully",
                                "     removed.",
                                "",
                                " # <weight>",
                                " Base weight = 33.33 µs",
                                " Complexity of candidate_count: 0.375 µs",
                                " State reads:",
                                " \t- Candidates.len()",
                                " \t- Candidates",
                                " \t- Members",
                                " \t- RunnersUp",
                                " \t- [AccountBalance(who)]",
                                " State writes:",
                                " \t- [AccountBalance(who)]",
                                " \t- Candidates",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "renounce_candidacy",
                            "args": [
                                {
                                    "name": "renouncing",
                                    "type": "Renouncing"
                                }
                            ],
                            "docs": [
                                " Renounce one's intention to be a candidate for the next election round. 3 potential",
                                " outcomes exist:",
                                " - `origin` is a candidate and not elected in any set. In this case, the bond is",
                                "   unreserved, returned and origin is removed as a candidate.",
                                " - `origin` is a current runner-up. In this case, the bond is unreserved, returned and",
                                "   origin is removed as a runner-up.",
                                " - `origin` is a current member. In this case, the bond is unreserved and origin is",
                                "   removed as a member, consequently not being a candidate for the next round anymore.",
                                "   Similar to [`remove_voter`], if replacement runners exists, they are immediately used.",
                                " <weight>",
                                " If a candidate is renouncing:",
                                " \tBase weight: 17.28 µs",
                                " \tComplexity of candidate_count: 0.235 µs",
                                " \tState reads:",
                                " \t\t- Candidates",
                                " \t\t- [AccountBalance(who) (unreserve)]",
                                " \tState writes:",
                                " \t\t- Candidates",
                                " \t\t- [AccountBalance(who) (unreserve)]",
                                " If member is renouncing:",
                                " \tBase weight: 46.25 µs",
                                " \tState reads:",
                                " \t\t- Members, RunnersUp (remove_and_replace_member),",
                                " \t\t- [AccountData(who) (unreserve)]",
                                " \tState writes:",
                                " \t\t- Members, RunnersUp (remove_and_replace_member),",
                                " \t\t- [AccountData(who) (unreserve)]",
                                " If runner is renouncing:",
                                " \tBase weight: 46.25 µs",
                                " \tState reads:",
                                " \t\t- RunnersUp (remove_and_replace_member),",
                                " \t\t- [AccountData(who) (unreserve)]",
                                " \tState writes:",
                                " \t\t- RunnersUp (remove_and_replace_member),",
                                " \t\t- [AccountData(who) (unreserve)]",
                                "",
                                " Weight note: The call into changeMembers need to be accounted for.",
                                " </weight>"
                            ]
                        },
                        {
                            "name": "remove_member",
                            "args": [
                                {
                                    "name": "who",
                                    "type": "LookupSource"
                                },
                                {
                                    "name": "has_replacement",
                                    "type": "bool"
                                }
                            ],
                            "docs": [
                                " Remove a particular member from the set. This is effective immediately and the bond of",
                                " the outgoing member is slashed.",
                                "",
                                " If a runner-up is available, then the best runner-up will be removed and replaces the",
                                " outgoing member. Otherwise, a new phragmen round is started.",
                                "",
                                " Note that this does not affect the designated block number of the next election.",
                                "",
                                " # <weight>",
                                " If we have a replacement:",
                                " \t- Base weight: 50.93 µs",
                                " \t- State reads:",
                                " \t\t- RunnersUp.len()",
                                " \t\t- Members, RunnersUp (remove_and_replace_member)",
                                " \t- State writes:",
                                " \t\t- Members, RunnersUp (remove_and_replace_member)",
                                " Else, since this is a root call and will go into phragmen, we assume full block for now.",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "NewTerm",
                            "args": [
                                "Vec<(AccountId,Balance)>"
                            ],
                            "docs": [
                                " A new term with new members. This indicates that enough candidates existed to run the",
                                " election, not that enough have has been elected. The inner value must be examined for",
                                " this purpose. A `NewTerm([])` indicates that some candidates got their bond slashed and",
                                " none were elected, whilst `EmptyTerm` means that no candidates existed to begin with."
                            ]
                        },
                        {
                            "name": "EmptyTerm",
                            "args": [],
                            "docs": [
                                " No (or not enough) candidates existed for this round. This is different from",
                                " `NewTerm([])`. See the description of `NewTerm`."
                            ]
                        },
                        {
                            "name": "MemberKicked",
                            "args": [
                                "AccountId"
                            ],
                            "docs": [
                                " A member has been removed. This should always be followed by either `NewTerm` ot",
                                " `EmptyTerm`."
                            ]
                        },
                        {
                            "name": "MemberRenounced",
                            "args": [
                                "AccountId"
                            ],
                            "docs": [
                                " A member has renounced their candidacy."
                            ]
                        },
                        {
                            "name": "VoterReported",
                            "args": [
                                "AccountId",
                                "AccountId",
                                "bool"
                            ],
                            "docs": [
                                " A voter (first element) was reported (byt the second element) with the the report being",
                                " successful or not (third element)."
                            ]
                        }
                    ],
                    "constants": [
                        {
                            "name": "CandidacyBond",
                            "type": "BalanceOf",
                            "value": "0x0010a5d4e80000000000000000000000",
                            "docs": []
                        },
                        {
                            "name": "VotingBond",
                            "type": "BalanceOf",
                            "value": "0x00743ba40b0000000000000000000000",
                            "docs": []
                        },
                        {
                            "name": "DesiredMembers",
                            "type": "u32",
                            "value": "0x0d000000",
                            "docs": []
                        },
                        {
                            "name": "DesiredRunnersUp",
                            "type": "u32",
                            "value": "0x14000000",
                            "docs": []
                        },
                        {
                            "name": "TermDuration",
                            "type": "BlockNumber",
                            "value": "0xc0890100",
                            "docs": []
                        },
                        {
                            "name": "ModuleId",
                            "type": "LockIdentifier",
                            "value": "0x706872656c656374",
                            "docs": []
                        }
                    ],
                    "errors": [
                        {
                            "name": "UnableToVote",
                            "docs": [
                                " Cannot vote when no candidates or members exist."
                            ]
                        },
                        {
                            "name": "NoVotes",
                            "docs": [
                                " Must vote for at least one candidate."
                            ]
                        },
                        {
                            "name": "TooManyVotes",
                            "docs": [
                                " Cannot vote more than candidates."
                            ]
                        },
                        {
                            "name": "MaximumVotesExceeded",
                            "docs": [
                                " Cannot vote more than maximum allowed."
                            ]
                        },
                        {
                            "name": "LowBalance",
                            "docs": [
                                " Cannot vote with stake less than minimum balance."
                            ]
                        },
                        {
                            "name": "UnableToPayBond",
                            "docs": [
                                " Voter can not pay voting bond."
                            ]
                        },
                        {
                            "name": "MustBeVoter",
                            "docs": [
                                " Must be a voter."
                            ]
                        },
                        {
                            "name": "ReportSelf",
                            "docs": [
                                " Cannot report self."
                            ]
                        },
                        {
                            "name": "DuplicatedCandidate",
                            "docs": [
                                " Duplicated candidate submission."
                            ]
                        },
                        {
                            "name": "MemberSubmit",
                            "docs": [
                                " Member cannot re-submit candidacy."
                            ]
                        },
                        {
                            "name": "RunnerSubmit",
                            "docs": [
                                " Runner cannot re-submit candidacy."
                            ]
                        },
                        {
                            "name": "InsufficientCandidateFunds",
                            "docs": [
                                " Candidate does not have enough funds."
                            ]
                        },
                        {
                            "name": "NotMember",
                            "docs": [
                                " Not a member."
                            ]
                        },
                        {
                            "name": "InvalidCandidateCount",
                            "docs": [
                                " The provided count of number of candidates is incorrect."
                            ]
                        },
                        {
                            "name": "InvalidVoteCount",
                            "docs": [
                                " The provided count of number of votes is incorrect."
                            ]
                        },
                        {
                            "name": "InvalidRenouncing",
                            "docs": [
                                " The renouncing origin presented a wrong `Renouncing` parameter."
                            ]
                        },
                        {
                            "name": "InvalidReplacement",
                            "docs": [
                                " Prediction regarding replacement after member removal is wrong."
                            ]
                        }
                    ]
                },
                {
                    "name": "TechnicalMembership",
                    "storage": {
                        "prefix": "Instance1Membership",
                        "items": [
                            {
                                "name": "Members",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<AccountId>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The current membership, stored as an ordered Vec."
                                ]
                            },
                            {
                                "name": "Prime",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "AccountId"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The current prime member, if one exists."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "add_member",
                            "args": [
                                {
                                    "name": "who",
                                    "type": "AccountId"
                                }
                            ],
                            "docs": [
                                " Add a member `who` to the set.",
                                "",
                                " May only be called from `AddOrigin` or root."
                            ]
                        },
                        {
                            "name": "remove_member",
                            "args": [
                                {
                                    "name": "who",
                                    "type": "AccountId"
                                }
                            ],
                            "docs": [
                                " Remove a member `who` from the set.",
                                "",
                                " May only be called from `RemoveOrigin` or root."
                            ]
                        },
                        {
                            "name": "swap_member",
                            "args": [
                                {
                                    "name": "remove",
                                    "type": "AccountId"
                                },
                                {
                                    "name": "add",
                                    "type": "AccountId"
                                }
                            ],
                            "docs": [
                                " Swap out one member `remove` for another `add`.",
                                "",
                                " May only be called from `SwapOrigin` or root.",
                                "",
                                " Prime membership is *not* passed from `remove` to `add`, if extant."
                            ]
                        },
                        {
                            "name": "reset_members",
                            "args": [
                                {
                                    "name": "members",
                                    "type": "Vec<AccountId>"
                                }
                            ],
                            "docs": [
                                " Change the membership to a new set, disregarding the existing membership. Be nice and",
                                " pass `members` pre-sorted.",
                                "",
                                " May only be called from `ResetOrigin` or root."
                            ]
                        },
                        {
                            "name": "change_key",
                            "args": [
                                {
                                    "name": "new",
                                    "type": "AccountId"
                                }
                            ],
                            "docs": [
                                " Swap out the sending member for some other key `new`.",
                                "",
                                " May only be called from `Signed` origin of a current member.",
                                "",
                                " Prime membership is passed from the origin account to `new`, if extant."
                            ]
                        },
                        {
                            "name": "set_prime",
                            "args": [
                                {
                                    "name": "who",
                                    "type": "AccountId"
                                }
                            ],
                            "docs": [
                                " Set the prime member. Must be a current member."
                            ]
                        },
                        {
                            "name": "clear_prime",
                            "args": [],
                            "docs": [
                                " Remove the prime member if it exists."
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "MemberAdded",
                            "args": [],
                            "docs": [
                                " The given member was added; see the transaction for who."
                            ]
                        },
                        {
                            "name": "MemberRemoved",
                            "args": [],
                            "docs": [
                                " The given member was removed; see the transaction for who."
                            ]
                        },
                        {
                            "name": "MembersSwapped",
                            "args": [],
                            "docs": [
                                " Two members were swapped; see the transaction for who."
                            ]
                        },
                        {
                            "name": "MembersReset",
                            "args": [],
                            "docs": [
                                " The membership was reset; see the transaction for who the new set is."
                            ]
                        },
                        {
                            "name": "KeyChanged",
                            "args": [],
                            "docs": [
                                " One of the members' keys changed."
                            ]
                        },
                        {
                            "name": "Dummy",
                            "args": [
                                "PhantomData"
                            ],
                            "docs": [
                                " Phantom member, never used."
                            ]
                        }
                    ],
                    "constants": [],
                    "errors": []
                },
                {
                    "name": "Treasury",
                    "storage": {
                        "prefix": "Treasury",
                        "items": [
                            {
                                "name": "ProposalCount",
                                "modifier": "Default",
                                "type": {
                                    "plain": "ProposalIndex"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " Number of proposals that have been made."
                                ]
                            },
                            {
                                "name": "Proposals",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ProposalIndex",
                                        "value": "Proposal",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Proposals that have been made."
                                ]
                            },
                            {
                                "name": "Approvals",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<ProposalIndex>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Proposal indices that have been approved but not yet awarded."
                                ]
                            },
                            {
                                "name": "Tips",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "Hash",
                                        "value": "OpenTip",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Tips that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                                    " This has the insecure enumerable hash function since the key itself is already",
                                    " guaranteed to be a secure hash."
                                ]
                            },
                            {
                                "name": "Reasons",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Identity",
                                        "key": "Hash",
                                        "value": "Bytes",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Simple preimage lookup from the reason's hash to the original data. Again, has an",
                                    " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "propose_spend",
                            "args": [
                                {
                                    "name": "value",
                                    "type": "Compact<BalanceOf>"
                                },
                                {
                                    "name": "beneficiary",
                                    "type": "LookupSource"
                                }
                            ],
                            "docs": [
                                " Put forward a suggestion for spending. A deposit proportional to the value",
                                " is reserved and slashed if the proposal is rejected. It is returned once the",
                                " proposal is awarded.",
                                "",
                                " # <weight>",
                                " - Complexity: O(1)",
                                " - DbReads: `ProposalCount`, `origin account`",
                                " - DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "reject_proposal",
                            "args": [
                                {
                                    "name": "proposal_id",
                                    "type": "Compact<ProposalIndex>"
                                }
                            ],
                            "docs": [
                                " Reject a proposed spend. The original deposit will be slashed.",
                                "",
                                " # <weight>",
                                " - Complexity: O(1)",
                                " - DbReads: `Proposals`, `rejected proposer account`",
                                " - DbWrites: `Proposals`, `rejected proposer account`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "approve_proposal",
                            "args": [
                                {
                                    "name": "proposal_id",
                                    "type": "Compact<ProposalIndex>"
                                }
                            ],
                            "docs": [
                                " Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                                " and the original deposit will be returned.",
                                "",
                                " # <weight>",
                                " - Complexity: O(1).",
                                " - DbReads: `Proposals`, `Approvals`",
                                " - DbWrite: `Approvals`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "report_awesome",
                            "args": [
                                {
                                    "name": "reason",
                                    "type": "Bytes"
                                },
                                {
                                    "name": "who",
                                    "type": "AccountId"
                                }
                            ],
                            "docs": [
                                " Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                                " `TipReportDepositPerByte` for each byte in `reason`.",
                                "",
                                " - `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                                "   a UTF-8-encoded URL.",
                                " - `who`: The account which should be credited for the tip.",
                                "",
                                " Emits `NewTip` if successful.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(R)` where `R` length of `reason`.",
                                "   - encoding and hashing of 'reason'",
                                " - DbReads: `Reasons`, `Tips`, `who account data`",
                                " - DbWrites: `Tips`, `who account data`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "retract_tip",
                            "args": [
                                {
                                    "name": "hash",
                                    "type": "Hash"
                                }
                            ],
                            "docs": [
                                " Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                                "",
                                " If successful, the original deposit will be unreserved.",
                                "",
                                " The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                                " must have been reported by the signing account through `report_awesome` (and not",
                                " through `tip_new`).",
                                "",
                                " - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                                "   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                                "",
                                " Emits `TipRetracted` if successful.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(1)`",
                                "   - Depends on the length of `T::Hash` which is fixed.",
                                " - DbReads: `Tips`, `origin account`",
                                " - DbWrites: `Reasons`, `Tips`, `origin account`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "tip_new",
                            "args": [
                                {
                                    "name": "reason",
                                    "type": "Bytes"
                                },
                                {
                                    "name": "who",
                                    "type": "AccountId"
                                },
                                {
                                    "name": "tip_value",
                                    "type": "BalanceOf"
                                }
                            ],
                            "docs": [
                                " Give a tip for something new; no finder's fee will be taken.",
                                "",
                                " The dispatch origin for this call must be _Signed_ and the signing account must be a",
                                " member of the `Tippers` set.",
                                "",
                                " - `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                                "   a UTF-8-encoded URL.",
                                " - `who`: The account which should be credited for the tip.",
                                " - `tip_value`: The amount of tip that the sender would like to give. The median tip",
                                "   value of active tippers will be given to the `who`.",
                                "",
                                " Emits `NewTip` if successful.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                                "   - `O(T)`: decoding `Tipper` vec of length `T`",
                                "     `T` is charged as upper bound given by `ContainsLengthBound`.",
                                "     The actual cost depends on the implementation of `T::Tippers`.",
                                "   - `O(R)`: hashing and encoding of reason of length `R`",
                                " - DbReads: `Tippers`, `Reasons`",
                                " - DbWrites: `Reasons`, `Tips`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "tip",
                            "args": [
                                {
                                    "name": "hash",
                                    "type": "Hash"
                                },
                                {
                                    "name": "tip_value",
                                    "type": "BalanceOf"
                                }
                            ],
                            "docs": [
                                " Declare a tip value for an already-open tip.",
                                "",
                                " The dispatch origin for this call must be _Signed_ and the signing account must be a",
                                " member of the `Tippers` set.",
                                "",
                                " - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                                "   as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                                "   account ID.",
                                " - `tip_value`: The amount of tip that the sender would like to give. The median tip",
                                "   value of active tippers will be given to the `who`.",
                                "",
                                " Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                                " has started.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(T)` where `T` is the number of tippers.",
                                "   decoding `Tipper` vec of length `T`, insert tip and check closing,",
                                "   `T` is charged as upper bound given by `ContainsLengthBound`.",
                                "   The actual cost depends on the implementation of `T::Tippers`.",
                                "",
                                "   Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                                "   is weighted as if almost full i.e of length `T-1`.",
                                " - DbReads: `Tippers`, `Tips`",
                                " - DbWrites: `Tips`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "close_tip",
                            "args": [
                                {
                                    "name": "hash",
                                    "type": "Hash"
                                }
                            ],
                            "docs": [
                                " Close and payout a tip.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " The tip identified by `hash` must have finished its countdown period.",
                                "",
                                " - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                                "   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                                "",
                                " # <weight>",
                                " - Complexity: `O(T)` where `T` is the number of tippers.",
                                "   decoding `Tipper` vec of length `T`.",
                                "   `T` is charged as upper bound given by `ContainsLengthBound`.",
                                "   The actual cost depends on the implementation of `T::Tippers`.",
                                " - DbReads: `Tips`, `Tippers`, `tip finder`",
                                " - DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "Proposed",
                            "args": [
                                "ProposalIndex"
                            ],
                            "docs": [
                                " New proposal."
                            ]
                        },
                        {
                            "name": "Spending",
                            "args": [
                                "Balance"
                            ],
                            "docs": [
                                " We have ended a spend period and will now allocate funds."
                            ]
                        },
                        {
                            "name": "Awarded",
                            "args": [
                                "ProposalIndex",
                                "Balance",
                                "AccountId"
                            ],
                            "docs": [
                                " Some funds have been allocated."
                            ]
                        },
                        {
                            "name": "Rejected",
                            "args": [
                                "ProposalIndex",
                                "Balance"
                            ],
                            "docs": [
                                " A proposal was rejected; funds were slashed."
                            ]
                        },
                        {
                            "name": "Burnt",
                            "args": [
                                "Balance"
                            ],
                            "docs": [
                                " Some of our funds have been burnt."
                            ]
                        },
                        {
                            "name": "Rollover",
                            "args": [
                                "Balance"
                            ],
                            "docs": [
                                " Spending has finished; this is the amount that rolls over until next spend."
                            ]
                        },
                        {
                            "name": "Deposit",
                            "args": [
                                "Balance"
                            ],
                            "docs": [
                                " Some funds have been deposited."
                            ]
                        },
                        {
                            "name": "NewTip",
                            "args": [
                                "Hash"
                            ],
                            "docs": [
                                " A new tip suggestion has been opened."
                            ]
                        },
                        {
                            "name": "TipClosing",
                            "args": [
                                "Hash"
                            ],
                            "docs": [
                                " A tip suggestion has reached threshold and is closing."
                            ]
                        },
                        {
                            "name": "TipClosed",
                            "args": [
                                "Hash",
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " A tip suggestion has been closed."
                            ]
                        },
                        {
                            "name": "TipRetracted",
                            "args": [
                                "Hash"
                            ],
                            "docs": [
                                " A tip suggestion has been retracted."
                            ]
                        }
                    ],
                    "constants": [
                        {
                            "name": "ProposalBond",
                            "type": "Permill",
                            "value": "0x50c30000",
                            "docs": [
                                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                                " An accepted proposal gets these back. A rejected proposal does not."
                            ]
                        },
                        {
                            "name": "ProposalBondMinimum",
                            "type": "BalanceOf",
                            "value": "0x0010a5d4e80000000000000000000000",
                            "docs": [
                                " Minimum amount of funds that should be placed in a deposit for making a proposal."
                            ]
                        },
                        {
                            "name": "SpendPeriod",
                            "type": "BlockNumber",
                            "value": "0x00460500",
                            "docs": [
                                " Period between successive spends."
                            ]
                        },
                        {
                            "name": "Burn",
                            "type": "Permill",
                            "value": "0x10270000",
                            "docs": [
                                " Percentage of spare funds (if any) that are burnt per spend period."
                            ]
                        },
                        {
                            "name": "TipCountdown",
                            "type": "BlockNumber",
                            "value": "0x40380000",
                            "docs": [
                                " The period for which a tip remains open after is has achieved threshold tippers."
                            ]
                        },
                        {
                            "name": "TipFindersFee",
                            "type": "Percent",
                            "value": "0x14",
                            "docs": [
                                " The amount of the final tip which goes to the original reporter of the tip."
                            ]
                        },
                        {
                            "name": "TipReportDepositBase",
                            "type": "BalanceOf",
                            "value": "0x00e40b54020000000000000000000000",
                            "docs": [
                                " The amount held on deposit for placing a tip report."
                            ]
                        },
                        {
                            "name": "TipReportDepositPerByte",
                            "type": "BalanceOf",
                            "value": "0x00e1f505000000000000000000000000",
                            "docs": [
                                " The amount held on deposit per byte within the tip report reason."
                            ]
                        },
                        {
                            "name": "ModuleId",
                            "type": "ModuleId",
                            "value": "0x70792f7472737279",
                            "docs": [
                                " The treasury's module id, used for deriving its sovereign account ID."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InsufficientProposersBalance",
                            "docs": [
                                " Proposer's balance is too low."
                            ]
                        },
                        {
                            "name": "InvalidProposalIndex",
                            "docs": [
                                " No proposal at that index."
                            ]
                        },
                        {
                            "name": "ReasonTooBig",
                            "docs": [
                                " The reason given is just too big."
                            ]
                        },
                        {
                            "name": "AlreadyKnown",
                            "docs": [
                                " The tip was already found/started."
                            ]
                        },
                        {
                            "name": "UnknownTip",
                            "docs": [
                                " The tip hash is unknown."
                            ]
                        },
                        {
                            "name": "NotFinder",
                            "docs": [
                                " The account attempting to retract the tip is not the finder of the tip."
                            ]
                        },
                        {
                            "name": "StillOpen",
                            "docs": [
                                " The tip cannot be claimed/closed because there are not enough tippers yet."
                            ]
                        },
                        {
                            "name": "Premature",
                            "docs": [
                                " The tip cannot be claimed/closed because it's still in the countdown period."
                            ]
                        }
                    ]
                },
                {
                    "name": "Parachains",
                    "storage": {
                        "prefix": "Parachains",
                        "items": [
                            {
                                "name": "Authorities",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<ValidatorId>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " All authorities' keys at the moment."
                                ]
                            },
                            {
                                "name": "Code",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ParaId",
                                        "value": "ValidationCode",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The active code of a currently-registered parachain."
                                ]
                            },
                            {
                                "name": "PastCodeMeta",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ParaId",
                                        "value": "ParaPastCodeMeta",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x0000",
                                "docs": [
                                    " Past code of parachains. The parachains themselves may not be registered anymore,",
                                    " but we also keep their code on-chain for the same amount of time as outdated code",
                                    " to assist with availability."
                                ]
                            },
                            {
                                "name": "PastCode",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "(ParaId,BlockNumber)",
                                        "value": "ValidationCode",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Actual past code, indicated by the parachain and the block number at which it",
                                    " became outdated."
                                ]
                            },
                            {
                                "name": "PastCodePruning",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<(ParaId,BlockNumber)>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Past code pruning, in order of priority."
                                ]
                            },
                            {
                                "name": "FutureCodeUpgrades",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ParaId",
                                        "value": "BlockNumber",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": []
                            },
                            {
                                "name": "FutureCode",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ParaId",
                                        "value": "ValidationCode",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": []
                            },
                            {
                                "name": "Heads",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ParaId",
                                        "value": "HeadData",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The heads of the parachains registered at present."
                                ]
                            },
                            {
                                "name": "RelayDispatchQueue",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ParaId",
                                        "value": "Vec<UpwardMessage>",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Messages ready to be dispatched onto the relay chain. It is subject to",
                                    " `MAX_MESSAGE_COUNT` and `WATERMARK_MESSAGE_SIZE`."
                                ]
                            },
                            {
                                "name": "RelayDispatchQueueSize",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ParaId",
                                        "value": "(u32,u32)",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x0000000000000000",
                                "docs": [
                                    " Size of the dispatch queues. Separated from actual data in order to avoid costly",
                                    " decoding when checking receipt validity. First item in tuple is the count of messages",
                                    " second if the total length (in bytes) of the message payloads."
                                ]
                            },
                            {
                                "name": "NeedsDispatch",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<ParaId>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The ordered list of ParaIds that have a `RelayDispatchQueue` entry."
                                ]
                            },
                            {
                                "name": "DidUpdate",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "Vec<ParaId>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " `Some` if the parachain heads get updated in this block, along with the parachain IDs",
                                    " that did update. Ordered in the same way as `registrar::Active` (i.e. by ParaId).",
                                    "",
                                    " `None` if not yet updated."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "set_heads",
                            "args": [
                                {
                                    "name": "heads",
                                    "type": "Vec<AttestedCandidate>"
                                }
                            ],
                            "docs": [
                                " Provide candidate receipts for parachains, in ascending order by id."
                            ]
                        },
                        {
                            "name": "report_double_vote",
                            "args": [
                                {
                                    "name": "report",
                                    "type": "DoubleVoteReport"
                                }
                            ],
                            "docs": [
                                " Provide a proof that some validator has commited a double-vote.",
                                "",
                                " The weight is 0; in order to avoid DoS a `SignedExtension` validation",
                                " is implemented."
                            ]
                        }
                    ],
                    "events": null,
                    "constants": [],
                    "errors": [
                        {
                            "name": "TooManyHeadUpdates",
                            "docs": [
                                " Parachain heads must be updated only once in the block."
                            ]
                        },
                        {
                            "name": "TooManyParaCandidates",
                            "docs": [
                                " Too many parachain candidates."
                            ]
                        },
                        {
                            "name": "HeadsOutOfOrder",
                            "docs": [
                                " Proposed heads must be ascending order by parachain ID without duplicate."
                            ]
                        },
                        {
                            "name": "UnregisteredPara",
                            "docs": [
                                " Candidate is for an unregistered parachain."
                            ]
                        },
                        {
                            "name": "InvalidCollator",
                            "docs": [
                                " Invalid collator."
                            ]
                        },
                        {
                            "name": "QueueFull",
                            "docs": [
                                " The message queue is full. Messages will be added when there is space."
                            ]
                        },
                        {
                            "name": "InvalidMessageOrigin",
                            "docs": [
                                " The message origin is invalid."
                            ]
                        },
                        {
                            "name": "NoValidatorGroup",
                            "docs": [
                                " No validator group for parachain."
                            ]
                        },
                        {
                            "name": "NotEnoughValidityVotes",
                            "docs": [
                                " Not enough validity votes for candidate."
                            ]
                        },
                        {
                            "name": "VotesExceedsAuthorities",
                            "docs": [
                                " The number of attestations exceeds the number of authorities."
                            ]
                        },
                        {
                            "name": "WrongValidatorAttesting",
                            "docs": [
                                " Attesting validator not on this chain's validation duty."
                            ]
                        },
                        {
                            "name": "InvalidSignature",
                            "docs": [
                                " Invalid signature from attester."
                            ]
                        },
                        {
                            "name": "UntaggedVotes",
                            "docs": [
                                " Extra untagged validity votes along with candidate."
                            ]
                        },
                        {
                            "name": "ParentMismatch",
                            "docs": [
                                " Wrong parent head for parachain receipt."
                            ]
                        },
                        {
                            "name": "HeadDataTooLarge",
                            "docs": [
                                " Head data was too large."
                            ]
                        },
                        {
                            "name": "ValidationCodeTooLarge",
                            "docs": [
                                " New validation code was too large."
                            ]
                        },
                        {
                            "name": "DisallowedCodeUpgrade",
                            "docs": [
                                " Disallowed code upgrade."
                            ]
                        },
                        {
                            "name": "CannotPayFees",
                            "docs": [
                                " Para does not have enough balance to pay fees."
                            ]
                        },
                        {
                            "name": "UnexpectedRelayParent",
                            "docs": [
                                " Unexpected relay-parent for a candidate receipt."
                            ]
                        }
                    ]
                },
                {
                    "name": "Attestations",
                    "storage": {
                        "prefix": "Attestations",
                        "items": [
                            {
                                "name": "RecentParaBlocks",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "BlockNumber",
                                        "value": "IncludedBlocks",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " A mapping from modular block number (n % AttestationPeriod)",
                                    " to session index and the list of candidate hashes."
                                ]
                            },
                            {
                                "name": "ParaBlockAttestations",
                                "modifier": "Optional",
                                "type": {
                                    "doubleMap": {
                                        "hasher": "Twox64Concat",
                                        "key1": "BlockNumber",
                                        "key2": "Hash",
                                        "value": "BlockAttestations",
                                        "key2Hasher": "Identity"
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Attestations on a recent parachain block."
                                ]
                            },
                            {
                                "name": "DidUpdate",
                                "modifier": "Default",
                                "type": {
                                    "plain": "bool"
                                },
                                "fallback": "0x00",
                                "docs": []
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "more_attestations",
                            "args": [
                                {
                                    "name": "_more",
                                    "type": "MoreAttestations"
                                }
                            ],
                            "docs": [
                                " Provide candidate receipts for parachains, in ascending order by id."
                            ]
                        }
                    ],
                    "events": null,
                    "constants": [],
                    "errors": [
                        {
                            "name": "TooManyAttestations",
                            "docs": [
                                " More attestations can be added only once in a block."
                            ]
                        }
                    ]
                },
                {
                    "name": "Slots",
                    "storage": {
                        "prefix": "Slots",
                        "items": [
                            {
                                "name": "AuctionCounter",
                                "modifier": "Default",
                                "type": {
                                    "plain": "AuctionIndex"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " The number of auctions that have been started so far."
                                ]
                            },
                            {
                                "name": "ManagedIds",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<ParaId>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Ordered list of all `ParaId` values that are managed by this module. This includes",
                                    " chains that are not yet deployed (but have won an auction in the future)."
                                ]
                            },
                            {
                                "name": "Deposits",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ParaId",
                                        "value": "Vec<BalanceOf>",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Various amounts on deposit for each parachain. An entry in `ManagedIds` implies a non-",
                                    " default entry here.",
                                    "",
                                    " The actual amount locked on its behalf at any time is the maximum item in this list. The",
                                    " first item in the list is the amount locked for the current Lease Period. Following",
                                    " items are for the subsequent lease periods.",
                                    "",
                                    " The default value (an empty list) implies that the parachain no longer exists (or never",
                                    " existed) as far as this module is concerned.",
                                    "",
                                    " If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it",
                                    " will be left-padded with one or more zeroes to denote the fact that nothing is held on",
                                    " deposit for the non-existent chain currently, but is held at some point in the future."
                                ]
                            },
                            {
                                "name": "AuctionInfo",
                                "modifier": "Optional",
                                "type": {
                                    "plain": "(LeasePeriodOf,BlockNumber)"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Information relating to the current auction, if there is one.",
                                    "",
                                    " The first item in the tuple is the lease period index that the first of the four",
                                    " contiguous lease periods on auction is for. The second is the block number when the",
                                    " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction."
                                ]
                            },
                            {
                                "name": "Winning",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "BlockNumber",
                                        "value": "WinningData",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The winning bids for each of the 10 ranges at each block in the final Ending Period of",
                                    " the current auction. The map's key is the 0-based index into the Ending Period. The",
                                    " first block of the ending period is 0; the last is `EndingPeriod - 1`."
                                ]
                            },
                            {
                                "name": "ReservedAmounts",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "Bidder",
                                        "value": "BalanceOf",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Amounts currently reserved in the accounts of the bidders currently winning",
                                    " (sub-)ranges."
                                ]
                            },
                            {
                                "name": "OnboardQueue",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "LeasePeriodOf",
                                        "value": "Vec<ParaId>",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The set of Para IDs that have won and need to be on-boarded at an upcoming lease-period.",
                                    " This is cleared out on the first block of the lease period."
                                ]
                            },
                            {
                                "name": "Onboarding",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ParaId",
                                        "value": "(LeasePeriodOf,IncomingParachain)",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The actual on-boarding information. Only exists when one of the following is true:",
                                    " - It is before the lease period that the parachain should be on-boarded.",
                                    " - The full on-boarding information has not yet been provided and the parachain is not",
                                    " yet due to be off-boarded."
                                ]
                            },
                            {
                                "name": "Offboarding",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ParaId",
                                        "value": "AccountId",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "docs": [
                                    " Off-boarding account; currency held on deposit for the parachain gets placed here if the",
                                    " parachain gets off-boarded; i.e. its lease period is up and it isn't renewed."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "new_auction",
                            "args": [
                                {
                                    "name": "duration",
                                    "type": "Compact<BlockNumber>"
                                },
                                {
                                    "name": "lease_period_index",
                                    "type": "Compact<LeasePeriodOf>"
                                }
                            ],
                            "docs": [
                                " Create a new auction.",
                                "",
                                " This can only happen when there isn't already an auction in progress and may only be",
                                " called by the root origin. Accepts the `duration` of this auction and the",
                                " `lease_period_index` of the initial lease period of the four that are to be auctioned."
                            ]
                        },
                        {
                            "name": "bid",
                            "args": [
                                {
                                    "name": "sub",
                                    "type": "Compact<SubId>"
                                },
                                {
                                    "name": "auction_index",
                                    "type": "Compact<AuctionIndex>"
                                },
                                {
                                    "name": "first_slot",
                                    "type": "Compact<LeasePeriodOf>"
                                },
                                {
                                    "name": "last_slot",
                                    "type": "Compact<LeasePeriodOf>"
                                },
                                {
                                    "name": "amount",
                                    "type": "Compact<BalanceOf>"
                                }
                            ],
                            "docs": [
                                " Make a new bid from an account (including a parachain account) for deploying a new",
                                " parachain.",
                                "",
                                " Multiple simultaneous bids from the same bidder are allowed only as long as all active",
                                " bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
                                "",
                                " - `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and",
                                " funded by) the same account.",
                                " - `auction_index` is the index of the auction to bid on. Should just be the present",
                                " value of `AuctionCounter`.",
                                " - `first_slot` is the first lease period index of the range to bid on. This is the",
                                " absolute lease period index value, not an auction-specific offset.",
                                " - `last_slot` is the last lease period index of the range to bid on. This is the",
                                " absolute lease period index value, not an auction-specific offset.",
                                " - `amount` is the amount to bid to be held as deposit for the parachain should the",
                                " bid win. This amount is held throughout the range."
                            ]
                        },
                        {
                            "name": "bid_renew",
                            "args": [
                                {
                                    "name": "auction_index",
                                    "type": "Compact<AuctionIndex>"
                                },
                                {
                                    "name": "first_slot",
                                    "type": "Compact<LeasePeriodOf>"
                                },
                                {
                                    "name": "last_slot",
                                    "type": "Compact<LeasePeriodOf>"
                                },
                                {
                                    "name": "amount",
                                    "type": "Compact<BalanceOf>"
                                }
                            ],
                            "docs": [
                                " Make a new bid from a parachain account for renewing that (pre-existing) parachain.",
                                "",
                                " The origin *must* be a parachain account.",
                                "",
                                " Multiple simultaneous bids from the same bidder are allowed only as long as all active",
                                " bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
                                "",
                                " - `auction_index` is the index of the auction to bid on. Should just be the present",
                                " value of `AuctionCounter`.",
                                " - `first_slot` is the first lease period index of the range to bid on. This is the",
                                " absolute lease period index value, not an auction-specific offset.",
                                " - `last_slot` is the last lease period index of the range to bid on. This is the",
                                " absolute lease period index value, not an auction-specific offset.",
                                " - `amount` is the amount to bid to be held as deposit for the parachain should the",
                                " bid win. This amount is held throughout the range."
                            ]
                        },
                        {
                            "name": "set_offboarding",
                            "args": [
                                {
                                    "name": "dest",
                                    "type": "LookupSource"
                                }
                            ],
                            "docs": [
                                " Set the off-boarding information for a parachain.",
                                "",
                                " The origin *must* be a parachain account.",
                                "",
                                " - `dest` is the destination account to receive the parachain's deposit."
                            ]
                        },
                        {
                            "name": "fix_deploy_data",
                            "args": [
                                {
                                    "name": "sub",
                                    "type": "Compact<SubId>"
                                },
                                {
                                    "name": "para_id",
                                    "type": "Compact<ParaId>"
                                },
                                {
                                    "name": "code_hash",
                                    "type": "Hash"
                                },
                                {
                                    "name": "code_size",
                                    "type": "u32"
                                },
                                {
                                    "name": "initial_head_data",
                                    "type": "HeadData"
                                }
                            ],
                            "docs": [
                                " Set the deploy information for a successful bid to deploy a new parachain.",
                                "",
                                " - `origin` must be the successful bidder account.",
                                " - `sub` is the sub-bidder ID of the bidder.",
                                " - `para_id` is the parachain ID allotted to the winning bidder.",
                                " - `code_hash` is the hash of the parachain's Wasm validation function.",
                                " - `initial_head_data` is the parachain's initial head data."
                            ]
                        },
                        {
                            "name": "elaborate_deploy_data",
                            "args": [
                                {
                                    "name": "para_id",
                                    "type": "Compact<ParaId>"
                                },
                                {
                                    "name": "code",
                                    "type": "ValidationCode"
                                }
                            ],
                            "docs": [
                                " Note a new parachain's code.",
                                "",
                                " This must be called after `fix_deploy_data` and `code` must be the preimage of the",
                                " `code_hash` passed there for the same `para_id`.",
                                "",
                                " This may be called before or after the beginning of the parachain's first lease period.",
                                " If called before then the parachain will become active at the first block of its",
                                " starting lease period. If after, then it will become active immediately after this call.",
                                "",
                                " - `_origin` is irrelevant.",
                                " - `para_id` is the parachain ID whose code will be elaborated.",
                                " - `code` is the preimage of the registered `code_hash` of `para_id`."
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "NewLeasePeriod",
                            "args": [
                                "LeasePeriod"
                            ],
                            "docs": [
                                " A new lease period is beginning."
                            ]
                        },
                        {
                            "name": "AuctionStarted",
                            "args": [
                                "AuctionIndex",
                                "LeasePeriod",
                                "BlockNumber"
                            ],
                            "docs": [
                                " An auction started. Provides its index and the block number where it will begin to",
                                " close and the first lease period of the quadruplet that is auctioned."
                            ]
                        },
                        {
                            "name": "AuctionClosed",
                            "args": [
                                "AuctionIndex"
                            ],
                            "docs": [
                                " An auction ended. All funds become unreserved."
                            ]
                        },
                        {
                            "name": "WonDeploy",
                            "args": [
                                "NewBidder",
                                "SlotRange",
                                "ParaId",
                                "Balance"
                            ],
                            "docs": [
                                " Someone won the right to deploy a parachain. Balance amount is deducted for deposit."
                            ]
                        },
                        {
                            "name": "WonRenewal",
                            "args": [
                                "ParaId",
                                "SlotRange",
                                "Balance",
                                "Balance"
                            ],
                            "docs": [
                                " An existing parachain won the right to continue.",
                                " First balance is the extra amount reseved. Second is the total amount reserved."
                            ]
                        },
                        {
                            "name": "Reserved",
                            "args": [
                                "AccountId",
                                "Balance",
                                "Balance"
                            ],
                            "docs": [
                                " Funds were reserved for a winning bid. First balance is the extra amount reserved.",
                                " Second is the total."
                            ]
                        },
                        {
                            "name": "Unreserved",
                            "args": [
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " Funds were unreserved since bidder is no longer active."
                            ]
                        }
                    ],
                    "constants": [],
                    "errors": [
                        {
                            "name": "AuctionInProgress",
                            "docs": [
                                " This auction is already in progress."
                            ]
                        },
                        {
                            "name": "LeasePeriodInPast",
                            "docs": [
                                " The lease period is in the past."
                            ]
                        },
                        {
                            "name": "NotParaOrigin",
                            "docs": [
                                " The origin for this call must be a parachain."
                            ]
                        },
                        {
                            "name": "ParaNotOnboarding",
                            "docs": [
                                " The parachain ID is not onboarding."
                            ]
                        },
                        {
                            "name": "InvalidOrigin",
                            "docs": [
                                " The origin for this call must be the origin who registered the parachain."
                            ]
                        },
                        {
                            "name": "AlreadyRegistered",
                            "docs": [
                                " Parachain is already registered."
                            ]
                        },
                        {
                            "name": "InvalidCode",
                            "docs": [
                                " The code must correspond to the hash."
                            ]
                        },
                        {
                            "name": "UnsetDeployData",
                            "docs": [
                                " Deployment data has not been set for this parachain."
                            ]
                        },
                        {
                            "name": "NonIntersectingRange",
                            "docs": [
                                " The bid must overlap all intersecting ranges."
                            ]
                        },
                        {
                            "name": "NotCurrentAuction",
                            "docs": [
                                " Not a current auction."
                            ]
                        },
                        {
                            "name": "NotAuction",
                            "docs": [
                                " Not an auction."
                            ]
                        },
                        {
                            "name": "CodeTooLarge",
                            "docs": [
                                " Given code size is too large."
                            ]
                        },
                        {
                            "name": "HeadDataTooLarge",
                            "docs": [
                                " Given initial head data is too large."
                            ]
                        }
                    ]
                },
                {
                    "name": "Registrar",
                    "storage": {
                        "prefix": "Registrar",
                        "items": [
                            {
                                "name": "Parachains",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<ParaId>"
                                },
                                "fallback": "0x00",
                                "docs": []
                            },
                            {
                                "name": "ThreadCount",
                                "modifier": "Default",
                                "type": {
                                    "plain": "u32"
                                },
                                "fallback": "0x00000000",
                                "docs": [
                                    " The number of threads to schedule per block."
                                ]
                            },
                            {
                                "name": "SelectedThreads",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<Vec<(ParaId,CollatorId)>>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " An array of the queue of set of threads scheduled for the coming blocks; ordered by",
                                    " ascending para ID. There can be no duplicates of para ID in each list item."
                                ]
                            },
                            {
                                "name": "Active",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<(ParaId,Option<(CollatorId,Retriable)>)>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Parathreads/chains scheduled for execution this block. If the collator ID is set, then",
                                    " a particular collator has already been chosen for the next block, and no other collator",
                                    " may provide the block. In this case we allow the possibility of the combination being",
                                    " retried in a later block, expressed by `Retriable`.",
                                    "",
                                    " Ordered by ParaId."
                                ]
                            },
                            {
                                "name": "NextFreeId",
                                "modifier": "Default",
                                "type": {
                                    "plain": "ParaId"
                                },
                                "fallback": "0xe8030000",
                                "docs": [
                                    " The next unused ParaId value. Start this high in order to keep low numbers for",
                                    " system-level chains."
                                ]
                            },
                            {
                                "name": "PendingSwap",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ParaId",
                                        "value": "ParaId",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Pending swap operations."
                                ]
                            },
                            {
                                "name": "Paras",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ParaId",
                                        "value": "ParaInfo",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Map of all registered parathreads/chains."
                                ]
                            },
                            {
                                "name": "RetryQueue",
                                "modifier": "Default",
                                "type": {
                                    "plain": "Vec<Vec<(ParaId,CollatorId)>>"
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The current queue for parathreads that should be retried."
                                ]
                            },
                            {
                                "name": "Debtors",
                                "modifier": "Default",
                                "type": {
                                    "map": {
                                        "hasher": "Twox64Concat",
                                        "key": "ParaId",
                                        "value": "AccountId",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "docs": [
                                    " Users who have paid a parathread's deposit"
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "register_para",
                            "args": [
                                {
                                    "name": "id",
                                    "type": "Compact<ParaId>"
                                },
                                {
                                    "name": "info",
                                    "type": "ParaInfo"
                                },
                                {
                                    "name": "code",
                                    "type": "ValidationCode"
                                },
                                {
                                    "name": "initial_head_data",
                                    "type": "HeadData"
                                }
                            ],
                            "docs": [
                                " Register a parachain with given code. Must be called by root.",
                                " Fails if given ID is already used.",
                                "",
                                " Unlike the `Registrar` trait function of the same name, this",
                                " checks the code and head data against size limits."
                            ]
                        },
                        {
                            "name": "deregister_para",
                            "args": [
                                {
                                    "name": "id",
                                    "type": "Compact<ParaId>"
                                }
                            ],
                            "docs": [
                                " Deregister a parachain with given id"
                            ]
                        },
                        {
                            "name": "set_thread_count",
                            "args": [
                                {
                                    "name": "count",
                                    "type": "u32"
                                }
                            ],
                            "docs": [
                                " Reset the number of parathreads that can pay to be scheduled in a single block.",
                                "",
                                " - `count`: The number of parathreads.",
                                "",
                                " Must be called from Root origin."
                            ]
                        },
                        {
                            "name": "register_parathread",
                            "args": [
                                {
                                    "name": "code",
                                    "type": "ValidationCode"
                                },
                                {
                                    "name": "initial_head_data",
                                    "type": "HeadData"
                                }
                            ],
                            "docs": [
                                " Register a parathread for immediate use.",
                                "",
                                " Must be sent from a Signed origin that is able to have ParathreadDeposit reserved.",
                                " `code` and `initial_head_data` are used to initialize the parathread's state.",
                                "",
                                " Unlike `register_para`, this function does check that the maximum code size",
                                " and head data size are respected, as parathread registration is an atomic",
                                " action."
                            ]
                        },
                        {
                            "name": "select_parathread",
                            "args": [
                                {
                                    "name": "_id",
                                    "type": "Compact<ParaId>"
                                },
                                {
                                    "name": "_collator",
                                    "type": "CollatorId"
                                },
                                {
                                    "name": "_head_hash",
                                    "type": "Hash"
                                }
                            ],
                            "docs": [
                                " Place a bid for a parathread to be progressed in the next block.",
                                "",
                                " This is a kind of special transaction that should be heavily prioritized in the",
                                " transaction pool according to the `value`; only `ThreadCount` of them may be presented",
                                " in any single block."
                            ]
                        },
                        {
                            "name": "deregister_parathread",
                            "args": [],
                            "docs": [
                                " Deregister a parathread and retrieve the deposit.",
                                "",
                                " Must be sent from a `Parachain` origin which is currently a parathread.",
                                "",
                                " Ensure that before calling this that any funds you want emptied from the parathread's",
                                " account is moved out; after this it will be impossible to retrieve them (without",
                                " governance intervention)."
                            ]
                        },
                        {
                            "name": "swap",
                            "args": [
                                {
                                    "name": "other",
                                    "type": "Compact<ParaId>"
                                }
                            ],
                            "docs": [
                                " Swap a parachain with another parachain or parathread. The origin must be a `Parachain`.",
                                " The swap will happen only if there is already an opposite swap pending. If there is not,",
                                " the swap will be stored in the pending swaps map, ready for a later confirmatory swap.",
                                "",
                                " The `ParaId`s remain mapped to the same head data and code so external code can rely on",
                                " `ParaId` to be a long-term identifier of a notional \"parachain\". However, their",
                                " scheduling info (i.e. whether they're a parathread or parachain), auction information",
                                " and the auction deposit are switched."
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "ParathreadRegistered",
                            "args": [
                                "ParaId"
                            ],
                            "docs": [
                                " A parathread was registered; its new ID is supplied."
                            ]
                        },
                        {
                            "name": "ParathreadDeregistered",
                            "args": [
                                "ParaId"
                            ],
                            "docs": [
                                " The parathread of the supplied ID was de-registered."
                            ]
                        }
                    ],
                    "constants": [],
                    "errors": [
                        {
                            "name": "ParaAlreadyExists",
                            "docs": [
                                " Parachain already exists."
                            ]
                        },
                        {
                            "name": "InvalidChainId",
                            "docs": [
                                " Invalid parachain ID."
                            ]
                        },
                        {
                            "name": "InvalidThreadId",
                            "docs": [
                                " Invalid parathread ID."
                            ]
                        },
                        {
                            "name": "CodeTooLarge",
                            "docs": [
                                " Invalid para code size."
                            ]
                        },
                        {
                            "name": "HeadDataTooLarge",
                            "docs": [
                                " Invalid para head data size."
                            ]
                        }
                    ]
                },
                {
                    "name": "Claims",
                    "storage": {
                        "prefix": "Claims",
                        "items": [
                            {
                                "name": "Claims",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Identity",
                                        "key": "EthereumAddress",
                                        "value": "BalanceOf",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": []
                            },
                            {
                                "name": "Total",
                                "modifier": "Default",
                                "type": {
                                    "plain": "BalanceOf"
                                },
                                "fallback": "0x00000000000000000000000000000000",
                                "docs": []
                            },
                            {
                                "name": "Vesting",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Identity",
                                        "key": "EthereumAddress",
                                        "value": "(BalanceOf,BalanceOf,BlockNumber)",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Vesting schedule for a claim.",
                                    " First balance is the total amount that should be held for vesting.",
                                    " Second balance is how much should be unlocked per block.",
                                    " The block number is when the vesting should start."
                                ]
                            },
                            {
                                "name": "Signing",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Identity",
                                        "key": "EthereumAddress",
                                        "value": "StatementKind",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The statement kind that must be signed, if any."
                                ]
                            },
                            {
                                "name": "Preclaims",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Identity",
                                        "key": "AccountId",
                                        "value": "EthereumAddress",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Pre-claimed Ethereum accounts, by the Account ID that they are claimed to."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "claim",
                            "args": [
                                {
                                    "name": "dest",
                                    "type": "AccountId"
                                },
                                {
                                    "name": "ethereum_signature",
                                    "type": "EcdsaSignature"
                                }
                            ],
                            "docs": [
                                " Make a claim to collect your DOTs.",
                                "",
                                " The dispatch origin for this call must be _None_.",
                                "",
                                " Unsigned Validation:",
                                " A call to claim is deemed valid if the signature provided matches",
                                " the expected signed message of:",
                                "",
                                " > Ethereum Signed Message:",
                                " > (configured prefix string)(address)",
                                "",
                                " and `address` matches the `dest` account.",
                                "",
                                " Parameters:",
                                " - `dest`: The destination account to payout the claim.",
                                " - `ethereum_signature`: The signature of an ethereum signed message",
                                "    matching the format described above.",
                                "",
                                " <weight>",
                                " The weight of this call is invariant over the input parameters.",
                                " - One `eth_recover` operation which involves a keccak hash and a",
                                "   ecdsa recover.",
                                " - Three storage reads to check if a claim exists for the user, to",
                                "   get the current pot size, to see if there exists a vesting schedule.",
                                " - Up to one storage write for adding a new vesting schedule.",
                                " - One `deposit_creating` Currency call.",
                                " - One storage write to update the total.",
                                " - Two storage removals for vesting and claims information.",
                                " - One deposit event.",
                                "",
                                " Total Complexity: O(1)",
                                " ----------------------------",
                                " Base Weight: 269.7 µs",
                                " DB Weight:",
                                " - Read: Signing, Claims, Total, Claims Vesting, Vesting Vesting, Balance Lock, Account",
                                " - Write: Vesting Vesting, Account, Balance Lock, Total, Claim, Claims Vesting, Signing",
                                " Validate Unsigned: +188.7 µs",
                                " </weight>"
                            ]
                        },
                        {
                            "name": "mint_claim",
                            "args": [
                                {
                                    "name": "who",
                                    "type": "EthereumAddress"
                                },
                                {
                                    "name": "value",
                                    "type": "BalanceOf"
                                },
                                {
                                    "name": "vesting_schedule",
                                    "type": "Option<(BalanceOf,BalanceOf,BlockNumber)>"
                                },
                                {
                                    "name": "statement",
                                    "type": "Option<StatementKind>"
                                }
                            ],
                            "docs": [
                                " Mint a new claim to collect DOTs.",
                                "",
                                " The dispatch origin for this call must be _Root_.",
                                "",
                                " Parameters:",
                                " - `who`: The Ethereum address allowed to collect this claim.",
                                " - `value`: The number of DOTs that will be claimed.",
                                " - `vesting_schedule`: An optional vesting schedule for these DOTs.",
                                "",
                                " <weight>",
                                " The weight of this call is invariant over the input parameters.",
                                " - One storage mutate to increase the total claims available.",
                                " - One storage write to add a new claim.",
                                " - Up to one storage write to add a new vesting schedule.",
                                "",
                                " Total Complexity: O(1)",
                                " ---------------------",
                                " Base Weight: 10.46 µs",
                                " DB Weight:",
                                " - Reads: Total",
                                " - Writes: Total, Claims",
                                " - Maybe Write: Vesting, Statement",
                                " </weight>"
                            ]
                        },
                        {
                            "name": "claim_attest",
                            "args": [
                                {
                                    "name": "dest",
                                    "type": "AccountId"
                                },
                                {
                                    "name": "ethereum_signature",
                                    "type": "EcdsaSignature"
                                },
                                {
                                    "name": "statement",
                                    "type": "Bytes"
                                }
                            ],
                            "docs": [
                                " Make a claim to collect your DOTs by signing a statement.",
                                "",
                                " The dispatch origin for this call must be _None_.",
                                "",
                                " Unsigned Validation:",
                                " A call to `claim_attest` is deemed valid if the signature provided matches",
                                " the expected signed message of:",
                                "",
                                " > Ethereum Signed Message:",
                                " > (configured prefix string)(address)(statement)",
                                "",
                                " and `address` matches the `dest` account; the `statement` must match that which is",
                                " expected according to your purchase arrangement.",
                                "",
                                " Parameters:",
                                " - `dest`: The destination account to payout the claim.",
                                " - `ethereum_signature`: The signature of an ethereum signed message",
                                "    matching the format described above.",
                                " - `statement`: The identity of the statement which is being attested to in the signature.",
                                "",
                                " <weight>",
                                " The weight of this call is invariant over the input parameters.",
                                " - One `eth_recover` operation which involves a keccak hash and a",
                                "   ecdsa recover.",
                                " - Four storage reads to check if a claim exists for the user, to",
                                "   get the current pot size, to see if there exists a vesting schedule, to get the",
                                "   required statement.",
                                " - Up to one storage write for adding a new vesting schedule.",
                                " - One `deposit_creating` Currency call.",
                                " - One storage write to update the total.",
                                " - Two storage removals for vesting and claims information.",
                                " - One deposit event.",
                                "",
                                " Total Complexity: O(1)",
                                " ----------------------------",
                                " Base Weight: 270.2 µs",
                                " DB Weight:",
                                " - Read: Signing, Claims, Total, Claims Vesting, Vesting Vesting, Balance Lock, Account",
                                " - Write: Vesting Vesting, Account, Balance Lock, Total, Claim, Claims Vesting, Signing",
                                " Validate Unsigned: +190.1 µs",
                                " </weight>"
                            ]
                        },
                        {
                            "name": "attest",
                            "args": [
                                {
                                    "name": "statement",
                                    "type": "Bytes"
                                }
                            ],
                            "docs": [
                                " Attest to a statement, needed to finalize the claims process.",
                                "",
                                " WARNING: Insecure unless your chain includes `PrevalidateAttests` as a `SignedExtension`.",
                                "",
                                " Unsigned Validation:",
                                " A call to attest is deemed valid if the sender has a `Preclaim` registered",
                                " and provides a `statement` which is expected for the account.",
                                "",
                                " Parameters:",
                                " - `statement`: The identity of the statement which is being attested to in the signature.",
                                "",
                                " <weight>",
                                " Total Complexity: O(1)",
                                " ----------------------------",
                                " Base Weight: 93.3 µs",
                                " DB Weight:",
                                " - Read: Preclaims, Signing, Claims, Total, Claims Vesting, Vesting Vesting, Balance Lock, Account",
                                " - Write: Vesting Vesting, Account, Balance Lock, Total, Claim, Claims Vesting, Signing, Preclaims",
                                " Validate PreValidateAttests: +8.631 µs",
                                " </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "Claimed",
                            "args": [
                                "AccountId",
                                "EthereumAddress",
                                "Balance"
                            ],
                            "docs": [
                                " Someone claimed some DOTs."
                            ]
                        }
                    ],
                    "constants": [
                        {
                            "name": "Prefix",
                            "type": "Bytes",
                            "value": "0x8450617920444f547320746f2074686520506f6c6b61646f74206163636f756e743a",
                            "docs": [
                                " The Prefix that is used in signed Ethereum messages for this network"
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "InvalidEthereumSignature",
                            "docs": [
                                " Invalid Ethereum signature."
                            ]
                        },
                        {
                            "name": "SignerHasNoClaim",
                            "docs": [
                                " Ethereum address has no claim."
                            ]
                        },
                        {
                            "name": "SenderHasNoClaim",
                            "docs": [
                                " Account ID sending tx has no claim."
                            ]
                        },
                        {
                            "name": "PotUnderflow",
                            "docs": [
                                " There's not enough in the pot to pay out some unvested amount. Generally implies a logic",
                                " error."
                            ]
                        },
                        {
                            "name": "InvalidStatement",
                            "docs": [
                                " A needed statement was not included."
                            ]
                        },
                        {
                            "name": "VestedBalanceExists",
                            "docs": [
                                " The account already has a vested balance."
                            ]
                        }
                    ]
                },
                {
                    "name": "Vesting",
                    "storage": {
                        "prefix": "Vesting",
                        "items": [
                            {
                                "name": "Vesting",
                                "modifier": "Optional",
                                "type": {
                                    "map": {
                                        "hasher": "Blake2_128Concat",
                                        "key": "AccountId",
                                        "value": "VestingInfo",
                                        "linked": false
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " Information regarding the vesting of a given account."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "vest",
                            "args": [],
                            "docs": [
                                " Unlock any vested funds of the sender account.",
                                "",
                                " The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                                " locked under this module.",
                                "",
                                " Emits either `VestingCompleted` or `VestingUpdated`.",
                                "",
                                " # <weight>",
                                " - `O(1)`.",
                                " - DbWeight: 2 Reads, 2 Writes",
                                "     - Reads: Vesting Storage, Balances Locks, [Sender Account]",
                                "     - Writes: Vesting Storage, Balances Locks, [Sender Account]",
                                " - Benchmark:",
                                "     - Unlocked: 48.76 + .048 * l µs (min square analysis)",
                                "     - Locked: 44.43 + .284 * l µs (min square analysis)",
                                " - Using 50 µs fixed. Assuming less than 50 locks on any user, else we may want factor in number of locks.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "vest_other",
                            "args": [
                                {
                                    "name": "target",
                                    "type": "LookupSource"
                                }
                            ],
                            "docs": [
                                " Unlock any vested funds of a `target` account.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " - `target`: The account whose vested funds should be unlocked. Must have funds still",
                                " locked under this module.",
                                "",
                                " Emits either `VestingCompleted` or `VestingUpdated`.",
                                "",
                                " # <weight>",
                                " - `O(1)`.",
                                " - DbWeight: 3 Reads, 3 Writes",
                                "     - Reads: Vesting Storage, Balances Locks, Target Account",
                                "     - Writes: Vesting Storage, Balances Locks, Target Account",
                                " - Benchmark:",
                                "     - Unlocked: 44.3 + .294 * l µs (min square analysis)",
                                "     - Locked: 48.16 + .103 * l µs (min square analysis)",
                                " - Using 50 µs fixed. Assuming less than 50 locks on any user, else we may want factor in number of locks.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "vested_transfer",
                            "args": [
                                {
                                    "name": "target",
                                    "type": "LookupSource"
                                },
                                {
                                    "name": "schedule",
                                    "type": "VestingInfo"
                                }
                            ],
                            "docs": [
                                " Create a vested transfer.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " - `target`: The account that should be transferred the vested funds.",
                                " - `amount`: The amount of funds to transfer and will be vested.",
                                " - `schedule`: The vesting schedule attached to the transfer.",
                                "",
                                " Emits `VestingCreated`.",
                                "",
                                " # <weight>",
                                " - `O(1)`.",
                                " - DbWeight: 3 Reads, 3 Writes",
                                "     - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                                "     - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                                " - Benchmark: 100.3 + .365 * l µs (min square analysis)",
                                " - Using 100 µs fixed. Assuming less than 50 locks on any user, else we may want factor in number of locks.",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "VestingUpdated",
                            "args": [
                                "AccountId",
                                "Balance"
                            ],
                            "docs": [
                                " The amount vested has been updated. This could indicate more funds are available. The",
                                " balance given is the amount which is left unvested (and thus locked)."
                            ]
                        },
                        {
                            "name": "VestingCompleted",
                            "args": [
                                "AccountId"
                            ],
                            "docs": [
                                " An account (given) has become fully vested. No further vesting can happen."
                            ]
                        }
                    ],
                    "constants": [
                        {
                            "name": "MinVestedTransfer",
                            "type": "BalanceOf",
                            "value": "0x0010a5d4e80000000000000000000000",
                            "docs": [
                                " The minimum amount to be transferred to create a new vesting schedule."
                            ]
                        }
                    ],
                    "errors": [
                        {
                            "name": "NotVesting",
                            "docs": [
                                " The account given is not vesting."
                            ]
                        },
                        {
                            "name": "ExistingVestingSchedule",
                            "docs": [
                                " An existing vesting schedule already exists for this account that cannot be clobbered."
                            ]
                        },
                        {
                            "name": "AmountLow",
                            "docs": [
                                " Amount being transferred is too low to create a vesting schedule."
                            ]
                        }
                    ]
                },
                {
                    "name": "Utility",
                    "storage": {
                        "prefix": "Utility",
                        "items": [
                            {
                                "name": "Multisigs",
                                "modifier": "Optional",
                                "type": {
                                    "doubleMap": {
                                        "hasher": "Twox64Concat",
                                        "key1": "AccountId",
                                        "key2": "[u8;32]",
                                        "value": "Multisig",
                                        "key2Hasher": "Blake2_128Concat"
                                    }
                                },
                                "fallback": "0x00",
                                "docs": [
                                    " The set of open multisig operations."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "batch",
                            "args": [
                                {
                                    "name": "calls",
                                    "type": "Vec<Call>"
                                }
                            ],
                            "docs": [
                                " Send a batch of dispatch calls.",
                                "",
                                " This will execute until the first one fails and then stop. Calls must fulfil the",
                                " `IsCallable` filter unless the origin is `Root`.",
                                "",
                                " May be called from any origin.",
                                "",
                                " - `calls`: The calls to be dispatched from the same origin.",
                                "",
                                " # <weight>",
                                " - Base weight: 14.39 + .987 * c µs",
                                " - Plus the sum of the weights of the `calls`.",
                                " - Plus one additional event. (repeat read/write)",
                                " # </weight>",
                                "",
                                " This will return `Ok` in all circumstances. To determine the success of the batch, an",
                                " event is deposited. If a call failed and the batch was interrupted, then the",
                                " `BatchInterrupted` event is deposited, along with the number of successful calls made",
                                " and the error of the failed call. If all were successful, then the `BatchCompleted`",
                                " event is deposited."
                            ]
                        },
                        {
                            "name": "as_sub",
                            "args": [
                                {
                                    "name": "index",
                                    "type": "u16"
                                },
                                {
                                    "name": "call",
                                    "type": "Call"
                                }
                            ],
                            "docs": [
                                " Send a call through an indexed pseudonym of the sender.",
                                "",
                                " Calls must each fulfil the `IsCallable` filter.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " # <weight>",
                                " - Base weight: 2.861 µs",
                                " - Plus the weight of the `call`",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "as_multi",
                            "args": [
                                {
                                    "name": "threshold",
                                    "type": "u16"
                                },
                                {
                                    "name": "other_signatories",
                                    "type": "Vec<AccountId>"
                                },
                                {
                                    "name": "maybe_timepoint",
                                    "type": "Option<Timepoint>"
                                },
                                {
                                    "name": "call",
                                    "type": "Call"
                                }
                            ],
                            "docs": [
                                " Register approval for a dispatch to be made from a deterministic composite account if",
                                " approved by a total of `threshold - 1` of `other_signatories`.",
                                "",
                                " If there are enough, then dispatch the call. Calls must each fulfil the `IsCallable`",
                                " filter.",
                                "",
                                " Payment: `MultisigDepositBase` will be reserved if this is the first approval, plus",
                                " `threshold` times `MultisigDepositFactor`. It is returned once this dispatch happens or",
                                " is cancelled.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                                " - `other_signatories`: The accounts (other than the sender) who can approve this",
                                " dispatch. May not be empty.",
                                " - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                                " not the first approval, then it must be `Some`, with the timepoint (block number and",
                                " transaction index) of the first approval transaction.",
                                " - `call`: The call to be executed.",
                                "",
                                " NOTE: Unless this is the final approval, you will generally want to use",
                                " `approve_as_multi` instead, since it only requires a hash of the call.",
                                "",
                                " Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                                " on success, result is `Ok` and the result from the interior call, if it was executed,",
                                " may be found in the deposited `MultisigExecuted` event.",
                                "",
                                " # <weight>",
                                " - `O(S + Z + Call)`.",
                                " - Up to one balance-reserve or unreserve operation.",
                                " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                                "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                                " - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                                " - One encode & hash, both of complexity `O(S)`.",
                                " - Up to one binary search and insert (`O(logS + S)`).",
                                " - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                                " - One event.",
                                " - The weight of the `call`.",
                                " - Storage: inserts one item, value size bounded by `MaxSignatories`, with a",
                                "   deposit taken for its lifetime of",
                                "   `MultisigDepositBase + threshold * MultisigDepositFactor`.",
                                " -------------------------------",
                                " - Base Weight:",
                                "     - Create: 46.55 + 0.089 * S µs",
                                "     - Approve: 34.03 + .112 * S µs",
                                "     - Complete: 40.36 + .225 * S µs",
                                " - DB Weight:",
                                "     - Reads: Multisig Storage, [Caller Account]",
                                "     - Writes: Multisig Storage, [Caller Account]",
                                " - Plus Call Weight",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "approve_as_multi",
                            "args": [
                                {
                                    "name": "threshold",
                                    "type": "u16"
                                },
                                {
                                    "name": "other_signatories",
                                    "type": "Vec<AccountId>"
                                },
                                {
                                    "name": "maybe_timepoint",
                                    "type": "Option<Timepoint>"
                                },
                                {
                                    "name": "call_hash",
                                    "type": "[u8;32]"
                                }
                            ],
                            "docs": [
                                " Register approval for a dispatch to be made from a deterministic composite account if",
                                " approved by a total of `threshold - 1` of `other_signatories`.",
                                "",
                                " Payment: `MultisigDepositBase` will be reserved if this is the first approval, plus",
                                " `threshold` times `MultisigDepositFactor`. It is returned once this dispatch happens or",
                                " is cancelled.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                                " - `other_signatories`: The accounts (other than the sender) who can approve this",
                                " dispatch. May not be empty.",
                                " - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                                " not the first approval, then it must be `Some`, with the timepoint (block number and",
                                " transaction index) of the first approval transaction.",
                                " - `call_hash`: The hash of the call to be executed.",
                                "",
                                " NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                                "",
                                " # <weight>",
                                " - `O(S)`.",
                                " - Up to one balance-reserve or unreserve operation.",
                                " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                                "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                                " - One encode & hash, both of complexity `O(S)`.",
                                " - Up to one binary search and insert (`O(logS + S)`).",
                                " - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                                " - One event.",
                                " - Storage: inserts one item, value size bounded by `MaxSignatories`, with a",
                                "   deposit taken for its lifetime of",
                                "   `MultisigDepositBase + threshold * MultisigDepositFactor`.",
                                " ----------------------------------",
                                " - Base Weight:",
                                "     - Create: 44.71 + 0.088 * S",
                                "     - Approve: 31.48 + 0.116 * S",
                                " - DB Weight:",
                                "     - Read: Multisig Storage, [Caller Account]",
                                "     - Write: Multisig Storage, [Caller Account]",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "cancel_as_multi",
                            "args": [
                                {
                                    "name": "threshold",
                                    "type": "u16"
                                },
                                {
                                    "name": "other_signatories",
                                    "type": "Vec<AccountId>"
                                },
                                {
                                    "name": "timepoint",
                                    "type": "Timepoint"
                                },
                                {
                                    "name": "call_hash",
                                    "type": "[u8;32]"
                                }
                            ],
                            "docs": [
                                " Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                                " for this operation will be unreserved on success.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                                " - `other_signatories`: The accounts (other than the sender) who can approve this",
                                " dispatch. May not be empty.",
                                " - `timepoint`: The timepoint (block number and transaction index) of the first approval",
                                " transaction for this dispatch.",
                                " - `call_hash`: The hash of the call to be executed.",
                                "",
                                " # <weight>",
                                " - `O(S)`.",
                                " - Up to one balance-reserve or unreserve operation.",
                                " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                                "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                                " - One encode & hash, both of complexity `O(S)`.",
                                " - One event.",
                                " - I/O: 1 read `O(S)`, one remove.",
                                " - Storage: removes one item.",
                                " ----------------------------------",
                                " - Base Weight: 37.6 + 0.084 * S",
                                " - DB Weight:",
                                "     - Read: Multisig Storage, [Caller Account]",
                                "     - Write: Multisig Storage, [Caller Account]",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "BatchInterrupted",
                            "args": [
                                "u32",
                                "DispatchError"
                            ],
                            "docs": [
                                " Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                                " well as the error."
                            ]
                        },
                        {
                            "name": "BatchCompleted",
                            "args": [],
                            "docs": [
                                " Batch of dispatches completed fully with no error."
                            ]
                        },
                        {
                            "name": "NewMultisig",
                            "args": [
                                "AccountId",
                                "AccountId",
                                "CallHash"
                            ],
                            "docs": [
                                " A new multisig operation has begun. First param is the account that is approving,",
                                " second is the multisig account, third is hash of the call."
                            ]
                        },
                        {
                            "name": "MultisigApproval",
                            "args": [
                                "AccountId",
                                "Timepoint",
                                "AccountId",
                                "CallHash"
                            ],
                            "docs": [
                                " A multisig operation has been approved by someone. First param is the account that is",
                                " approving, third is the multisig account, fourth is hash of the call."
                            ]
                        },
                        {
                            "name": "MultisigExecuted",
                            "args": [
                                "AccountId",
                                "Timepoint",
                                "AccountId",
                                "CallHash",
                                "DispatchResult"
                            ],
                            "docs": [
                                " A multisig operation has been executed. First param is the account that is",
                                " approving, third is the multisig account, fourth is hash of the call to be executed."
                            ]
                        },
                        {
                            "name": "MultisigCancelled",
                            "args": [
                                "AccountId",
                                "Timepoint",
                                "AccountId",
                                "CallHash"
                            ],
                            "docs": [
                                " A multisig operation has been cancelled. First param is the account that is",
                                " cancelling, third is the multisig account, fourth is hash of the call."
                            ]
                        },
                        {
                            "name": "Uncallable",
                            "args": [
                                "u32"
                            ],
                            "docs": [
                                " A call with a `false` IsCallable filter was attempted."
                            ]
                        }
                    ],
                    "constants": [],
                    "errors": [
                        {
                            "name": "ZeroThreshold",
                            "docs": [
                                " Threshold is too low (zero)."
                            ]
                        },
                        {
                            "name": "AlreadyApproved",
                            "docs": [
                                " Call is already approved by this signatory."
                            ]
                        },
                        {
                            "name": "NoApprovalsNeeded",
                            "docs": [
                                " Call doesn't need any (more) approvals."
                            ]
                        },
                        {
                            "name": "TooFewSignatories",
                            "docs": [
                                " There are too few signatories in the list."
                            ]
                        },
                        {
                            "name": "TooManySignatories",
                            "docs": [
                                " There are too many signatories in the list."
                            ]
                        },
                        {
                            "name": "SignatoriesOutOfOrder",
                            "docs": [
                                " The signatories were provided out of order; they should be ordered."
                            ]
                        },
                        {
                            "name": "SenderInSignatories",
                            "docs": [
                                " The sender was contained in the other signatories; it shouldn't be."
                            ]
                        },
                        {
                            "name": "NotFound",
                            "docs": [
                                " Multisig operation not found when attempting to cancel."
                            ]
                        },
                        {
                            "name": "NotOwner",
                            "docs": [
                                " Only the account that originally created the multisig is able to cancel it."
                            ]
                        },
                        {
                            "name": "NoTimepoint",
                            "docs": [
                                " No timepoint was given, yet the multisig operation is already underway."
                            ]
                        },
                        {
                            "name": "WrongTimepoint",
                            "docs": [
                                " A different timepoint was given to the multisig operation that is underway."
                            ]
                        },
                        {
                            "name": "UnexpectedTimepoint",
                            "docs": [
                                " A timepoint was given, yet no multisig operation is underway."
                            ]
                        },
                        {
                            "name": "Uncallable",
                            "docs": [
                                " A call with a `false` IsCallable filter was attempted."
                            ]
                        }
                    ]
                },
                {
                    "name": "Sudo",
                    "storage": {
                        "prefix": "Sudo",
                        "items": [
                            {
                                "name": "Key",
                                "modifier": "Default",
                                "type": {
                                    "plain": "AccountId"
                                },
                                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "docs": [
                                    " The `AccountId` of the sudo key."
                                ]
                            }
                        ]
                    },
                    "calls": [
                        {
                            "name": "sudo",
                            "args": [
                                {
                                    "name": "call",
                                    "type": "Call"
                                }
                            ],
                            "docs": [
                                " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " # <weight>",
                                " - O(1).",
                                " - Limited storage reads.",
                                " - One DB write (event).",
                                " - Weight of derivative `call` execution + 10,000.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "sudo_unchecked_weight",
                            "args": [
                                {
                                    "name": "call",
                                    "type": "Call"
                                },
                                {
                                    "name": "_weight",
                                    "type": "Weight"
                                }
                            ],
                            "docs": [
                                " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                                " This function does not check the weight of the call, and instead allows the",
                                " Sudo user to specify the weight of the call.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " # <weight>",
                                " - O(1).",
                                " - The weight of this call is defined by the caller.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "set_key",
                            "args": [
                                {
                                    "name": "new",
                                    "type": "LookupSource"
                                }
                            ],
                            "docs": [
                                " Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " # <weight>",
                                " - O(1).",
                                " - Limited storage reads.",
                                " - One DB change.",
                                " # </weight>"
                            ]
                        },
                        {
                            "name": "sudo_as",
                            "args": [
                                {
                                    "name": "who",
                                    "type": "LookupSource"
                                },
                                {
                                    "name": "call",
                                    "type": "Call"
                                }
                            ],
                            "docs": [
                                " Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                                " a given account.",
                                "",
                                " The dispatch origin for this call must be _Signed_.",
                                "",
                                " # <weight>",
                                " - O(1).",
                                " - Limited storage reads.",
                                " - One DB write (event).",
                                " - Weight of derivative `call` execution + 10,000.",
                                " # </weight>"
                            ]
                        }
                    ],
                    "events": [
                        {
                            "name": "Sudid",
                            "args": [
                                "DispatchResult"
                            ],
                            "docs": [
                                " A sudo just took place."
                            ]
                        },
                        {
                            "name": "KeyChanged",
                            "args": [
                                "AccountId"
                            ],
                            "docs": [
                                " The sudoer just switched identity; the old key is supplied."
                            ]
                        },
                        {
                            "name": "SudoAsDone",
                            "args": [
                                "bool"
                            ],
                            "docs": [
                                " A sudo just took place."
                            ]
                        }
                    ],
                    "constants": [],
                    "errors": [
                        {
                            "name": "RequireSudo",
                            "docs": [
                                " Sender must be the Sudo account"
                            ]
                        }
                    ]
                }
            ],
            "extrinsic": {
                "version": "4",
                "signedExtensions": [
                    "TransactionCallFilter",
                    "CheckSpecVersion",
                    "CheckTxVersion",
                    "CheckGenesis",
                    "CheckEra",
                    "CheckNonce",
                    "CheckWeight",
                    "ChargeTransactionPayment",
                    "LimitParathreadCommits",
                    "ValidateDoubleVoteReports",
                    "ValidateEquivocationReport",
                    "PrevalidateAttests"
                ]
            }
        }
    }
}
