{
	"magicNumber": "1635018093",
	"metadata": {
		"v14": {
			"lookup": {
				"types": [
					{
						"id": "0",
						"type": {
							"path": [
								"sp_core",
								"crypto",
								"AccountId32"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "1",
											"typeName": "[u8; 32]",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "1",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "32",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "2",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"primitive": "U8"
							},
							"docs": []
						}
					},
					{
						"id": "3",
						"type": {
							"path": [
								"frame_system",
								"AccountInfo"
							],
							"params": [
								{
									"name": "Index",
									"type": "4"
								},
								{
									"name": "AccountData",
									"type": "5"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "nonce",
											"type": "4",
											"typeName": "Index",
											"docs": []
										},
										{
											"name": "consumers",
											"type": "4",
											"typeName": "RefCount",
											"docs": []
										},
										{
											"name": "providers",
											"type": "4",
											"typeName": "RefCount",
											"docs": []
										},
										{
											"name": "sufficients",
											"type": "4",
											"typeName": "RefCount",
											"docs": []
										},
										{
											"name": "data",
											"type": "5",
											"typeName": "AccountData",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "4",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"primitive": "U32"
							},
							"docs": []
						}
					},
					{
						"id": "5",
						"type": {
							"path": [
								"pallet_balances",
								"AccountData"
							],
							"params": [
								{
									"name": "Balance",
									"type": "6"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "free",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "reserved",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "misc_frozen",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "fee_frozen",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "6",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"primitive": "U128"
							},
							"docs": []
						}
					},
					{
						"id": "7",
						"type": {
							"path": [
								"frame_support",
								"weights",
								"PerDispatchClass"
							],
							"params": [
								{
									"name": "T",
									"type": "8"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "normal",
											"type": "8",
											"typeName": "T",
											"docs": []
										},
										{
											"name": "operational",
											"type": "8",
											"typeName": "T",
											"docs": []
										},
										{
											"name": "mandatory",
											"type": "8",
											"typeName": "T",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "8",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"primitive": "U64"
							},
							"docs": []
						}
					},
					{
						"id": "9",
						"type": {
							"path": [
								"primitive_types",
								"H256"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "1",
											"typeName": "[u8; 32]",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "10",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "11",
						"type": {
							"path": [
								"sp_runtime",
								"generic",
								"digest",
								"Digest"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "logs",
											"type": "12",
											"typeName": "Vec<DigestItem>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "12",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "13"
								}
							},
							"docs": []
						}
					},
					{
						"id": "13",
						"type": {
							"path": [
								"sp_runtime",
								"generic",
								"digest",
								"DigestItem"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "PreRuntime",
											"fields": [
												{
													"name": null,
													"type": "14",
													"typeName": "ConsensusEngineId",
													"docs": []
												},
												{
													"name": null,
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "Consensus",
											"fields": [
												{
													"name": null,
													"type": "14",
													"typeName": "ConsensusEngineId",
													"docs": []
												},
												{
													"name": null,
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "Seal",
											"fields": [
												{
													"name": null,
													"type": "14",
													"typeName": "ConsensusEngineId",
													"docs": []
												},
												{
													"name": null,
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "Other",
											"fields": [
												{
													"name": null,
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "RuntimeEnvironmentUpdated",
											"fields": [],
											"index": "8",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "14",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "4",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "15",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "16"
								}
							},
							"docs": []
						}
					},
					{
						"id": "16",
						"type": {
							"path": [
								"frame_system",
								"EventRecord"
							],
							"params": [
								{
									"name": "E",
									"type": "17"
								},
								{
									"name": "T",
									"type": "9"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "phase",
											"type": "137",
											"typeName": "Phase",
											"docs": []
										},
										{
											"name": "event",
											"type": "17",
											"typeName": "E",
											"docs": []
										},
										{
											"name": "topics",
											"type": "138",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "17",
						"type": {
							"path": [
								"westend_runtime",
								"Event"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "System",
											"fields": [
												{
													"name": null,
													"type": "18",
													"typeName": "frame_system::Event<Runtime>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Indices",
											"fields": [
												{
													"name": null,
													"type": "27",
													"typeName": "pallet_indices::Event<Runtime>",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "Balances",
											"fields": [
												{
													"name": null,
													"type": "28",
													"typeName": "pallet_balances::Event<Runtime>",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "Staking",
											"fields": [
												{
													"name": null,
													"type": "30",
													"typeName": "pallet_staking::Event<Runtime>",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "Offences",
											"fields": [
												{
													"name": null,
													"type": "35",
													"typeName": "pallet_offences::Event",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "Session",
											"fields": [
												{
													"name": null,
													"type": "37",
													"typeName": "pallet_session::Event",
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										},
										{
											"name": "Grandpa",
											"fields": [
												{
													"name": null,
													"type": "38",
													"typeName": "pallet_grandpa::Event",
													"docs": []
												}
											],
											"index": "10",
											"docs": []
										},
										{
											"name": "ImOnline",
											"fields": [
												{
													"name": null,
													"type": "43",
													"typeName": "pallet_im_online::Event<Runtime>",
													"docs": []
												}
											],
											"index": "11",
											"docs": []
										},
										{
											"name": "Utility",
											"fields": [
												{
													"name": null,
													"type": "52",
													"typeName": "pallet_utility::Event",
													"docs": []
												}
											],
											"index": "16",
											"docs": []
										},
										{
											"name": "Identity",
											"fields": [
												{
													"name": null,
													"type": "55",
													"typeName": "pallet_identity::Event<Runtime>",
													"docs": []
												}
											],
											"index": "17",
											"docs": []
										},
										{
											"name": "Recovery",
											"fields": [
												{
													"name": null,
													"type": "56",
													"typeName": "pallet_recovery::Event<Runtime>",
													"docs": []
												}
											],
											"index": "18",
											"docs": []
										},
										{
											"name": "Vesting",
											"fields": [
												{
													"name": null,
													"type": "57",
													"typeName": "pallet_vesting::Event<Runtime>",
													"docs": []
												}
											],
											"index": "19",
											"docs": []
										},
										{
											"name": "Scheduler",
											"fields": [
												{
													"name": null,
													"type": "58",
													"typeName": "pallet_scheduler::Event<Runtime>",
													"docs": []
												}
											],
											"index": "20",
											"docs": []
										},
										{
											"name": "Preimage",
											"fields": [
												{
													"name": null,
													"type": "62",
													"typeName": "pallet_preimage::Event<Runtime>",
													"docs": []
												}
											],
											"index": "28",
											"docs": []
										},
										{
											"name": "Sudo",
											"fields": [
												{
													"name": null,
													"type": "63",
													"typeName": "pallet_sudo::Event<Runtime>",
													"docs": []
												}
											],
											"index": "21",
											"docs": []
										},
										{
											"name": "Proxy",
											"fields": [
												{
													"name": null,
													"type": "65",
													"typeName": "pallet_proxy::Event<Runtime>",
													"docs": []
												}
											],
											"index": "22",
											"docs": []
										},
										{
											"name": "Multisig",
											"fields": [
												{
													"name": null,
													"type": "68",
													"typeName": "pallet_multisig::Event<Runtime>",
													"docs": []
												}
											],
											"index": "23",
											"docs": []
										},
										{
											"name": "ElectionProviderMultiPhase",
											"fields": [
												{
													"name": null,
													"type": "70",
													"typeName": "pallet_election_provider_multi_phase::Event<Runtime>",
													"docs": []
												}
											],
											"index": "24",
											"docs": []
										},
										{
											"name": "BagsList",
											"fields": [
												{
													"name": null,
													"type": "73",
													"typeName": "pallet_bags_list::Event<Runtime>",
													"docs": []
												}
											],
											"index": "25",
											"docs": []
										},
										{
											"name": "ParaInclusion",
											"fields": [
												{
													"name": null,
													"type": "74",
													"typeName": "parachains_inclusion::Event<Runtime>",
													"docs": []
												}
											],
											"index": "44",
											"docs": []
										},
										{
											"name": "Paras",
											"fields": [
												{
													"name": null,
													"type": "86",
													"typeName": "parachains_paras::Event",
													"docs": []
												}
											],
											"index": "47",
											"docs": []
										},
										{
											"name": "Ump",
											"fields": [
												{
													"name": null,
													"type": "87",
													"typeName": "parachains_ump::Event",
													"docs": []
												}
											],
											"index": "50",
											"docs": []
										},
										{
											"name": "Hrmp",
											"fields": [
												{
													"name": null,
													"type": "90",
													"typeName": "parachains_hrmp::Event<Runtime>",
													"docs": []
												}
											],
											"index": "51",
											"docs": []
										},
										{
											"name": "ParasDisputes",
											"fields": [
												{
													"name": null,
													"type": "92",
													"typeName": "parachains_disputes::Event<Runtime>",
													"docs": []
												}
											],
											"index": "53",
											"docs": []
										},
										{
											"name": "Registrar",
											"fields": [
												{
													"name": null,
													"type": "96",
													"typeName": "paras_registrar::Event<Runtime>",
													"docs": []
												}
											],
											"index": "60",
											"docs": []
										},
										{
											"name": "Slots",
											"fields": [
												{
													"name": null,
													"type": "97",
													"typeName": "slots::Event<Runtime>",
													"docs": []
												}
											],
											"index": "61",
											"docs": []
										},
										{
											"name": "Auctions",
											"fields": [
												{
													"name": null,
													"type": "98",
													"typeName": "auctions::Event<Runtime>",
													"docs": []
												}
											],
											"index": "63",
											"docs": []
										},
										{
											"name": "Crowdloan",
											"fields": [
												{
													"name": null,
													"type": "99",
													"typeName": "crowdloan::Event<Runtime>",
													"docs": []
												}
											],
											"index": "64",
											"docs": []
										},
										{
											"name": "AssignedSlots",
											"fields": [
												{
													"name": null,
													"type": "100",
													"typeName": "assigned_slots::Event<Runtime>",
													"docs": []
												}
											],
											"index": "65",
											"docs": []
										},
										{
											"name": "XcmPallet",
											"fields": [
												{
													"name": null,
													"type": "101",
													"typeName": "pallet_xcm::Event<Runtime>",
													"docs": []
												}
											],
											"index": "99",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "18",
						"type": {
							"path": [
								"frame_system",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "ExtrinsicSuccess",
											"fields": [
												{
													"name": "dispatch_info",
													"type": "19",
													"typeName": "DispatchInfo",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"An extrinsic completed successfully."
											]
										},
										{
											"name": "ExtrinsicFailed",
											"fields": [
												{
													"name": "dispatch_error",
													"type": "22",
													"typeName": "DispatchError",
													"docs": []
												},
												{
													"name": "dispatch_info",
													"type": "19",
													"typeName": "DispatchInfo",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"An extrinsic failed."
											]
										},
										{
											"name": "CodeUpdated",
											"fields": [],
											"index": "2",
											"docs": [
												"`:code` was updated."
											]
										},
										{
											"name": "NewAccount",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"A new account was created."
											]
										},
										{
											"name": "KilledAccount",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"An account was reaped."
											]
										},
										{
											"name": "Remarked",
											"fields": [
												{
													"name": "sender",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "hash",
													"type": "9",
													"typeName": "T::Hash",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"On on-chain remark happened."
											]
										}
									]
								}
							},
							"docs": [
								"Event for the System pallet."
							]
						}
					},
					{
						"id": "19",
						"type": {
							"path": [
								"frame_support",
								"weights",
								"DispatchInfo"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "weight",
											"type": "8",
											"typeName": "Weight",
											"docs": []
										},
										{
											"name": "class",
											"type": "20",
											"typeName": "DispatchClass",
											"docs": []
										},
										{
											"name": "pays_fee",
											"type": "21",
											"typeName": "Pays",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "20",
						"type": {
							"path": [
								"frame_support",
								"weights",
								"DispatchClass"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Normal",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Operational",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "Mandatory",
											"fields": [],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "21",
						"type": {
							"path": [
								"frame_support",
								"weights",
								"Pays"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Yes",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "No",
											"fields": [],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "22",
						"type": {
							"path": [
								"sp_runtime",
								"DispatchError"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Other",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "CannotLookup",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "BadOrigin",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "Module",
											"fields": [
												{
													"name": null,
													"type": "23",
													"typeName": "ModuleError",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "ConsumerRemaining",
											"fields": [],
											"index": "4",
											"docs": []
										},
										{
											"name": "NoProviders",
											"fields": [],
											"index": "5",
											"docs": []
										},
										{
											"name": "TooManyConsumers",
											"fields": [],
											"index": "6",
											"docs": []
										},
										{
											"name": "Token",
											"fields": [
												{
													"name": null,
													"type": "24",
													"typeName": "TokenError",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "Arithmetic",
											"fields": [
												{
													"name": null,
													"type": "25",
													"typeName": "ArithmeticError",
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										},
										{
											"name": "Transactional",
											"fields": [
												{
													"name": null,
													"type": "26",
													"typeName": "TransactionalError",
													"docs": []
												}
											],
											"index": "9",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "23",
						"type": {
							"path": [
								"sp_runtime",
								"ModuleError"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "index",
											"type": "2",
											"typeName": "u8",
											"docs": []
										},
										{
											"name": "error",
											"type": "14",
											"typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "24",
						"type": {
							"path": [
								"sp_runtime",
								"TokenError"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "NoFunds",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "WouldDie",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "BelowMinimum",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "CannotCreate",
											"fields": [],
											"index": "3",
											"docs": []
										},
										{
											"name": "UnknownAsset",
											"fields": [],
											"index": "4",
											"docs": []
										},
										{
											"name": "Frozen",
											"fields": [],
											"index": "5",
											"docs": []
										},
										{
											"name": "Unsupported",
											"fields": [],
											"index": "6",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "25",
						"type": {
							"path": [
								"sp_runtime",
								"ArithmeticError"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Underflow",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Overflow",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "DivisionByZero",
											"fields": [],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "26",
						"type": {
							"path": [
								"sp_runtime",
								"TransactionalError"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "LimitReached",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "NoLayer",
											"fields": [],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "27",
						"type": {
							"path": [
								"pallet_indices",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "IndexAssigned",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "index",
													"type": "4",
													"typeName": "T::AccountIndex",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A account index was assigned."
											]
										},
										{
											"name": "IndexFreed",
											"fields": [
												{
													"name": "index",
													"type": "4",
													"typeName": "T::AccountIndex",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"A account index has been freed up (unassigned)."
											]
										},
										{
											"name": "IndexFrozen",
											"fields": [
												{
													"name": "index",
													"type": "4",
													"typeName": "T::AccountIndex",
													"docs": []
												},
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"A account index has been frozen to its current account ID."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "28",
						"type": {
							"path": [
								"pallet_balances",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								},
								{
									"name": "I",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Endowed",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "free_balance",
													"type": "6",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"An account was created with some free balance."
											]
										},
										{
											"name": "DustLost",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "amount",
													"type": "6",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"An account was removed whose balance was non-zero but below ExistentialDeposit,",
												"resulting in an outright loss."
											]
										},
										{
											"name": "Transfer",
											"fields": [
												{
													"name": "from",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "to",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "amount",
													"type": "6",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Transfer succeeded."
											]
										},
										{
											"name": "BalanceSet",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "free",
													"type": "6",
													"typeName": "T::Balance",
													"docs": []
												},
												{
													"name": "reserved",
													"type": "6",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"A balance was set by root."
											]
										},
										{
											"name": "Reserved",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "amount",
													"type": "6",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Some balance was reserved (moved from free to reserved)."
											]
										},
										{
											"name": "Unreserved",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "amount",
													"type": "6",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Some balance was unreserved (moved from reserved to free)."
											]
										},
										{
											"name": "ReserveRepatriated",
											"fields": [
												{
													"name": "from",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "to",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "amount",
													"type": "6",
													"typeName": "T::Balance",
													"docs": []
												},
												{
													"name": "destination_status",
													"type": "29",
													"typeName": "Status",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"Some balance was moved from the reserve of the first account to the second account.",
												"Final argument indicates the destination balance type."
											]
										},
										{
											"name": "Deposit",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "amount",
													"type": "6",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"Some amount was deposited (e.g. for transaction fees)."
											]
										},
										{
											"name": "Withdraw",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "amount",
													"type": "6",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "8",
											"docs": [
												"Some amount was withdrawn from the account (e.g. for transaction fees)."
											]
										},
										{
											"name": "Slashed",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "amount",
													"type": "6",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "9",
											"docs": [
												"Some amount was removed from the account (e.g. for misbehavior)."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "29",
						"type": {
							"path": [
								"frame_support",
								"traits",
								"tokens",
								"misc",
								"BalanceStatus"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Free",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Reserved",
											"fields": [],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "30",
						"type": {
							"path": [
								"pallet_staking",
								"pallet",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "EraPaid",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "EraIndex",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"The era payout has been set; the first balance is the validator-payout; the second is",
												"the remainder from the maximum amount of reward.",
												"\\[era_index, validator_payout, remainder\\]"
											]
										},
										{
											"name": "Rewarded",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"The nominator has been rewarded by this amount. \\[stash, amount\\]"
											]
										},
										{
											"name": "Slashed",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"One validator (and its nominators) has been slashed by the given amount.",
												"\\[validator, amount\\]"
											]
										},
										{
											"name": "OldSlashingReportDiscarded",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "SessionIndex",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"An old slashing report from a prior era was discarded because it could",
												"not be processed. \\[session_index\\]"
											]
										},
										{
											"name": "StakersElected",
											"fields": [],
											"index": "4",
											"docs": [
												"A new set of stakers was elected."
											]
										},
										{
											"name": "Bonded",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"An account has bonded this amount. \\[stash, amount\\]",
												"",
												"NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
												"it will not be emitted for staking rewards when they are added to stake."
											]
										},
										{
											"name": "Unbonded",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"An account has unbonded this amount. \\[stash, amount\\]"
											]
										},
										{
											"name": "Withdrawn",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
												"from the unlocking queue. \\[stash, amount\\]"
											]
										},
										{
											"name": "Kicked",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "8",
											"docs": [
												"A nominator has been kicked from a validator. \\[nominator, stash\\]"
											]
										},
										{
											"name": "StakingElectionFailed",
											"fields": [],
											"index": "9",
											"docs": [
												"The election failed. No new era is planned."
											]
										},
										{
											"name": "Chilled",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "10",
											"docs": [
												"An account has stopped participating as either a validator or nominator.",
												"\\[stash\\]"
											]
										},
										{
											"name": "PayoutStarted",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "EraIndex",
													"docs": []
												},
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "11",
											"docs": [
												"The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"
											]
										},
										{
											"name": "ValidatorPrefsSet",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "31",
													"typeName": "ValidatorPrefs",
													"docs": []
												}
											],
											"index": "12",
											"docs": [
												"A validator has set their preferences."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "31",
						"type": {
							"path": [
								"pallet_staking",
								"ValidatorPrefs"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "commission",
											"type": "32",
											"typeName": "Perbill",
											"docs": []
										},
										{
											"name": "blocked",
											"type": "34",
											"typeName": "bool",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "32",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"compact": {
									"type": "33"
								}
							},
							"docs": []
						}
					},
					{
						"id": "33",
						"type": {
							"path": [
								"sp_arithmetic",
								"per_things",
								"Perbill"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "34",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"primitive": "Bool"
							},
							"docs": []
						}
					},
					{
						"id": "35",
						"type": {
							"path": [
								"pallet_offences",
								"pallet",
								"Event"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Offence",
											"fields": [
												{
													"name": "kind",
													"type": "36",
													"typeName": "Kind",
													"docs": []
												},
												{
													"name": "timeslot",
													"type": "10",
													"typeName": "OpaqueTimeSlot",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"There is an offence reported of the given `kind` happened at the `session_index` and",
												"(kind-specific) time slot. This event is not deposited for duplicate slashes.",
												"\\[kind, timeslot\\]."
											]
										}
									]
								}
							},
							"docs": [
								"Events type."
							]
						}
					},
					{
						"id": "36",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "16",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "37",
						"type": {
							"path": [
								"pallet_session",
								"pallet",
								"Event"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "NewSession",
											"fields": [
												{
													"name": "session_index",
													"type": "4",
													"typeName": "SessionIndex",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"New session has happened. Note that the argument is the session index, not the",
												"block number as the type might suggest."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "38",
						"type": {
							"path": [
								"pallet_grandpa",
								"pallet",
								"Event"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "NewAuthorities",
											"fields": [
												{
													"name": "authority_set",
													"type": "39",
													"typeName": "AuthorityList",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"New authority set has been applied."
											]
										},
										{
											"name": "Paused",
											"fields": [],
											"index": "1",
											"docs": [
												"Current authority set has been paused."
											]
										},
										{
											"name": "Resumed",
											"fields": [],
											"index": "2",
											"docs": [
												"Current authority set has been resumed."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "39",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "40"
								}
							},
							"docs": []
						}
					},
					{
						"id": "40",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"41",
									"8"
								]
							},
							"docs": []
						}
					},
					{
						"id": "41",
						"type": {
							"path": [
								"sp_finality_grandpa",
								"app",
								"Public"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "42",
											"typeName": "ed25519::Public",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "42",
						"type": {
							"path": [
								"sp_core",
								"ed25519",
								"Public"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "1",
											"typeName": "[u8; 32]",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "43",
						"type": {
							"path": [
								"pallet_im_online",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "HeartbeatReceived",
											"fields": [
												{
													"name": "authority_id",
													"type": "44",
													"typeName": "T::AuthorityId",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A new heartbeat was received from `AuthorityId`."
											]
										},
										{
											"name": "AllGood",
											"fields": [],
											"index": "1",
											"docs": [
												"At the end of the session, no offence was committed."
											]
										},
										{
											"name": "SomeOffline",
											"fields": [
												{
													"name": "offline",
													"type": "46",
													"typeName": "Vec<IdentificationTuple<T>>",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"At the end of the session, at least one validator was found to be offline."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "44",
						"type": {
							"path": [
								"pallet_im_online",
								"sr25519",
								"app_sr25519",
								"Public"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "45",
											"typeName": "sr25519::Public",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "45",
						"type": {
							"path": [
								"sp_core",
								"sr25519",
								"Public"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "1",
											"typeName": "[u8; 32]",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "46",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "47"
								}
							},
							"docs": []
						}
					},
					{
						"id": "47",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"0",
									"48"
								]
							},
							"docs": []
						}
					},
					{
						"id": "48",
						"type": {
							"path": [
								"pallet_staking",
								"Exposure"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								},
								{
									"name": "Balance",
									"type": "6"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "total",
											"type": "49",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "own",
											"type": "49",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "others",
											"type": "50",
											"typeName": "Vec<IndividualExposure<AccountId, Balance>>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "49",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"compact": {
									"type": "6"
								}
							},
							"docs": []
						}
					},
					{
						"id": "50",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "51"
								}
							},
							"docs": []
						}
					},
					{
						"id": "51",
						"type": {
							"path": [
								"pallet_staking",
								"IndividualExposure"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								},
								{
									"name": "Balance",
									"type": "6"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "who",
											"type": "0",
											"typeName": "AccountId",
											"docs": []
										},
										{
											"name": "value",
											"type": "49",
											"typeName": "Balance",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "52",
						"type": {
							"path": [
								"pallet_utility",
								"pallet",
								"Event"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "BatchInterrupted",
											"fields": [
												{
													"name": "index",
													"type": "4",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "error",
													"type": "22",
													"typeName": "DispatchError",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
												"well as the error."
											]
										},
										{
											"name": "BatchCompleted",
											"fields": [],
											"index": "1",
											"docs": [
												"Batch of dispatches completed fully with no error."
											]
										},
										{
											"name": "ItemCompleted",
											"fields": [],
											"index": "2",
											"docs": [
												"A single item within a Batch of dispatches has completed with no error."
											]
										},
										{
											"name": "DispatchedAs",
											"fields": [
												{
													"name": "result",
													"type": "53",
													"typeName": "DispatchResult",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"A call was dispatched."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "53",
						"type": {
							"path": [
								"Result"
							],
							"params": [
								{
									"name": "T",
									"type": "54"
								},
								{
									"name": "E",
									"type": "22"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Ok",
											"fields": [
												{
													"name": null,
													"type": "54",
													"typeName": null,
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Err",
											"fields": [
												{
													"name": null,
													"type": "22",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "54",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": []
							},
							"docs": []
						}
					},
					{
						"id": "55",
						"type": {
							"path": [
								"pallet_identity",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "IdentitySet",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A name was set or reset (which will remove all judgements)."
											]
										},
										{
											"name": "IdentityCleared",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "deposit",
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"A name was cleared, and the given balance returned."
											]
										},
										{
											"name": "IdentityKilled",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "deposit",
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"A name was removed and the given balance slashed."
											]
										},
										{
											"name": "JudgementRequested",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "registrar_index",
													"type": "4",
													"typeName": "RegistrarIndex",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"A judgement was asked from a registrar."
											]
										},
										{
											"name": "JudgementUnrequested",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "registrar_index",
													"type": "4",
													"typeName": "RegistrarIndex",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"A judgement request was retracted."
											]
										},
										{
											"name": "JudgementGiven",
											"fields": [
												{
													"name": "target",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "registrar_index",
													"type": "4",
													"typeName": "RegistrarIndex",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"A judgement was given by a registrar."
											]
										},
										{
											"name": "RegistrarAdded",
											"fields": [
												{
													"name": "registrar_index",
													"type": "4",
													"typeName": "RegistrarIndex",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"A registrar was added."
											]
										},
										{
											"name": "SubIdentityAdded",
											"fields": [
												{
													"name": "sub",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "main",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "deposit",
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"A sub-identity was added to an identity and the deposit paid."
											]
										},
										{
											"name": "SubIdentityRemoved",
											"fields": [
												{
													"name": "sub",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "main",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "deposit",
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "8",
											"docs": [
												"A sub-identity was removed from an identity and the deposit freed."
											]
										},
										{
											"name": "SubIdentityRevoked",
											"fields": [
												{
													"name": "sub",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "main",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "deposit",
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "9",
											"docs": [
												"A sub-identity was cleared, and the given deposit repatriated from the",
												"main identity account to the sub-identity account."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "56",
						"type": {
							"path": [
								"pallet_recovery",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "RecoveryCreated",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A recovery process has been set up for an account."
											]
										},
										{
											"name": "RecoveryInitiated",
											"fields": [
												{
													"name": "lost_account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "rescuer_account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"A recovery process has been initiated for lost account by rescuer account."
											]
										},
										{
											"name": "RecoveryVouched",
											"fields": [
												{
													"name": "lost_account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "rescuer_account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "sender",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"A recovery process for lost account by rescuer account has been vouched for by sender."
											]
										},
										{
											"name": "RecoveryClosed",
											"fields": [
												{
													"name": "lost_account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "rescuer_account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"A recovery process for lost account by rescuer account has been closed."
											]
										},
										{
											"name": "AccountRecovered",
											"fields": [
												{
													"name": "lost_account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "rescuer_account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Lost account has been successfully recovered by rescuer account."
											]
										},
										{
											"name": "RecoveryRemoved",
											"fields": [
												{
													"name": "lost_account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"A recovery process has been removed for an account."
											]
										}
									]
								}
							},
							"docs": [
								"Events type."
							]
						}
					},
					{
						"id": "57",
						"type": {
							"path": [
								"pallet_vesting",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "VestingUpdated",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "unvested",
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"The amount vested has been updated. This could indicate a change in funds available.",
												"The balance given is the amount which is left unvested (and thus locked)."
											]
										},
										{
											"name": "VestingCompleted",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"An \\[account\\] has become fully vested."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "58",
						"type": {
							"path": [
								"pallet_scheduler",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Scheduled",
											"fields": [
												{
													"name": "when",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												},
												{
													"name": "index",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Scheduled some task."
											]
										},
										{
											"name": "Canceled",
											"fields": [
												{
													"name": "when",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												},
												{
													"name": "index",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Canceled some task."
											]
										},
										{
											"name": "Dispatched",
											"fields": [
												{
													"name": "task",
													"type": "59",
													"typeName": "TaskAddress<T::BlockNumber>",
													"docs": []
												},
												{
													"name": "id",
													"type": "60",
													"typeName": "Option<Vec<u8>>",
													"docs": []
												},
												{
													"name": "result",
													"type": "53",
													"typeName": "DispatchResult",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Dispatched some task."
											]
										},
										{
											"name": "CallLookupFailed",
											"fields": [
												{
													"name": "task",
													"type": "59",
													"typeName": "TaskAddress<T::BlockNumber>",
													"docs": []
												},
												{
													"name": "id",
													"type": "60",
													"typeName": "Option<Vec<u8>>",
													"docs": []
												},
												{
													"name": "error",
													"type": "61",
													"typeName": "LookupError",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"The call for the provided hash was not found so the task has been aborted."
											]
										}
									]
								}
							},
							"docs": [
								"Events type."
							]
						}
					},
					{
						"id": "59",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"4",
									"4"
								]
							},
							"docs": []
						}
					},
					{
						"id": "60",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "10"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "10",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "61",
						"type": {
							"path": [
								"frame_support",
								"traits",
								"schedule",
								"LookupError"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Unknown",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "BadFormat",
											"fields": [],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "62",
						"type": {
							"path": [
								"pallet_preimage",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Noted",
											"fields": [
												{
													"name": "hash",
													"type": "9",
													"typeName": "T::Hash",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A preimage has been noted."
											]
										},
										{
											"name": "Requested",
											"fields": [
												{
													"name": "hash",
													"type": "9",
													"typeName": "T::Hash",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"A preimage has been requested."
											]
										},
										{
											"name": "Cleared",
											"fields": [
												{
													"name": "hash",
													"type": "9",
													"typeName": "T::Hash",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"A preimage has ben cleared."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "63",
						"type": {
							"path": [
								"pallet_sudo",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Sudid",
											"fields": [
												{
													"name": "sudo_result",
													"type": "53",
													"typeName": "DispatchResult",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A sudo just took place. \\[result\\]"
											]
										},
										{
											"name": "KeyChanged",
											"fields": [
												{
													"name": "old_sudoer",
													"type": "64",
													"typeName": "Option<T::AccountId>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
											]
										},
										{
											"name": "SudoAsDone",
											"fields": [
												{
													"name": "sudo_result",
													"type": "53",
													"typeName": "DispatchResult",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"A sudo just took place. \\[result\\]"
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "64",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "0"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "65",
						"type": {
							"path": [
								"pallet_proxy",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "ProxyExecuted",
											"fields": [
												{
													"name": "result",
													"type": "53",
													"typeName": "DispatchResult",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A proxy was executed correctly, with the given."
											]
										},
										{
											"name": "AnonymousCreated",
											"fields": [
												{
													"name": "anonymous",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "proxy_type",
													"type": "66",
													"typeName": "T::ProxyType",
													"docs": []
												},
												{
													"name": "disambiguation_index",
													"type": "67",
													"typeName": "u16",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Anonymous account has been created by new proxy with given",
												"disambiguation index and proxy type."
											]
										},
										{
											"name": "Announced",
											"fields": [
												{
													"name": "real",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "proxy",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "call_hash",
													"type": "9",
													"typeName": "CallHashOf<T>",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"An announcement was placed to make a call in the future."
											]
										},
										{
											"name": "ProxyAdded",
											"fields": [
												{
													"name": "delegator",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "delegatee",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "proxy_type",
													"type": "66",
													"typeName": "T::ProxyType",
													"docs": []
												},
												{
													"name": "delay",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"A proxy was added."
											]
										},
										{
											"name": "ProxyRemoved",
											"fields": [
												{
													"name": "delegator",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "delegatee",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "proxy_type",
													"type": "66",
													"typeName": "T::ProxyType",
													"docs": []
												},
												{
													"name": "delay",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"A proxy was removed."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "66",
						"type": {
							"path": [
								"westend_runtime",
								"ProxyType"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Any",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "NonTransfer",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "Staking",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "SudoBalances",
											"fields": [],
											"index": "3",
											"docs": []
										},
										{
											"name": "IdentityJudgement",
											"fields": [],
											"index": "4",
											"docs": []
										},
										{
											"name": "CancelProxy",
											"fields": [],
											"index": "5",
											"docs": []
										},
										{
											"name": "Auction",
											"fields": [],
											"index": "6",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "67",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"primitive": "U16"
							},
							"docs": []
						}
					},
					{
						"id": "68",
						"type": {
							"path": [
								"pallet_multisig",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "NewMultisig",
											"fields": [
												{
													"name": "approving",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "multisig",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "call_hash",
													"type": "1",
													"typeName": "CallHash",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A new multisig operation has begun."
											]
										},
										{
											"name": "MultisigApproval",
											"fields": [
												{
													"name": "approving",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "timepoint",
													"type": "69",
													"typeName": "Timepoint<T::BlockNumber>",
													"docs": []
												},
												{
													"name": "multisig",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "call_hash",
													"type": "1",
													"typeName": "CallHash",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"A multisig operation has been approved by someone."
											]
										},
										{
											"name": "MultisigExecuted",
											"fields": [
												{
													"name": "approving",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "timepoint",
													"type": "69",
													"typeName": "Timepoint<T::BlockNumber>",
													"docs": []
												},
												{
													"name": "multisig",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "call_hash",
													"type": "1",
													"typeName": "CallHash",
													"docs": []
												},
												{
													"name": "result",
													"type": "53",
													"typeName": "DispatchResult",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"A multisig operation has been executed."
											]
										},
										{
											"name": "MultisigCancelled",
											"fields": [
												{
													"name": "cancelling",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "timepoint",
													"type": "69",
													"typeName": "Timepoint<T::BlockNumber>",
													"docs": []
												},
												{
													"name": "multisig",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "call_hash",
													"type": "1",
													"typeName": "CallHash",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"A multisig operation has been cancelled."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "69",
						"type": {
							"path": [
								"pallet_multisig",
								"Timepoint"
							],
							"params": [
								{
									"name": "BlockNumber",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "height",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "index",
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "70",
						"type": {
							"path": [
								"pallet_election_provider_multi_phase",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "SolutionStored",
											"fields": [
												{
													"name": "election_compute",
													"type": "71",
													"typeName": "ElectionCompute",
													"docs": []
												},
												{
													"name": "prev_ejected",
													"type": "34",
													"typeName": "bool",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A solution was stored with the given compute.",
												"",
												"If the solution is signed, this means that it hasn't yet been processed. If the",
												"solution is unsigned, this means that it has also been processed.",
												"",
												"The `bool` is `true` when a previous solution was ejected to make room for this one."
											]
										},
										{
											"name": "ElectionFinalized",
											"fields": [
												{
													"name": "election_compute",
													"type": "72",
													"typeName": "Option<ElectionCompute>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"The election has been finalized, with `Some` of the given computation, or else if the",
												"election failed, `None`."
											]
										},
										{
											"name": "Rewarded",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "<T as frame_system::Config>::AccountId",
													"docs": []
												},
												{
													"name": "value",
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"An account has been rewarded for their signed submission being finalized."
											]
										},
										{
											"name": "Slashed",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "<T as frame_system::Config>::AccountId",
													"docs": []
												},
												{
													"name": "value",
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"An account has been slashed for submitting an invalid signed submission."
											]
										},
										{
											"name": "SignedPhaseStarted",
											"fields": [
												{
													"name": "round",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"The signed phase of the given round has started."
											]
										},
										{
											"name": "UnsignedPhaseStarted",
											"fields": [
												{
													"name": "round",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"The unsigned phase of the given round has started."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "71",
						"type": {
							"path": [
								"pallet_election_provider_multi_phase",
								"ElectionCompute"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "OnChain",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Signed",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "Unsigned",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "Fallback",
											"fields": [],
											"index": "3",
											"docs": []
										},
										{
											"name": "Emergency",
											"fields": [],
											"index": "4",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "72",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "71"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "71",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "73",
						"type": {
							"path": [
								"pallet_bags_list",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								},
								{
									"name": "I",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Rebagged",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "from",
													"type": "8",
													"typeName": "T::Score",
													"docs": []
												},
												{
													"name": "to",
													"type": "8",
													"typeName": "T::Score",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Moved an account from one bag to another."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "74",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"inclusion",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "CandidateBacked",
											"fields": [
												{
													"name": null,
													"type": "75",
													"typeName": "CandidateReceipt<T::Hash>",
													"docs": []
												},
												{
													"name": null,
													"type": "83",
													"typeName": "HeadData",
													"docs": []
												},
												{
													"name": null,
													"type": "84",
													"typeName": "CoreIndex",
													"docs": []
												},
												{
													"name": null,
													"type": "85",
													"typeName": "GroupIndex",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A candidate was backed. `[candidate, head_data]`"
											]
										},
										{
											"name": "CandidateIncluded",
											"fields": [
												{
													"name": null,
													"type": "75",
													"typeName": "CandidateReceipt<T::Hash>",
													"docs": []
												},
												{
													"name": null,
													"type": "83",
													"typeName": "HeadData",
													"docs": []
												},
												{
													"name": null,
													"type": "84",
													"typeName": "CoreIndex",
													"docs": []
												},
												{
													"name": null,
													"type": "85",
													"typeName": "GroupIndex",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"A candidate was included. `[candidate, head_data]`"
											]
										},
										{
											"name": "CandidateTimedOut",
											"fields": [
												{
													"name": null,
													"type": "75",
													"typeName": "CandidateReceipt<T::Hash>",
													"docs": []
												},
												{
													"name": null,
													"type": "83",
													"typeName": "HeadData",
													"docs": []
												},
												{
													"name": null,
													"type": "84",
													"typeName": "CoreIndex",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"A candidate timed out. `[candidate, head_data]`"
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "75",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"CandidateReceipt"
							],
							"params": [
								{
									"name": "H",
									"type": "9"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "descriptor",
											"type": "76",
											"typeName": "CandidateDescriptor<H>",
											"docs": []
										},
										{
											"name": "commitments_hash",
											"type": "9",
											"typeName": "Hash",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "76",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"CandidateDescriptor"
							],
							"params": [
								{
									"name": "H",
									"type": "9"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "para_id",
											"type": "77",
											"typeName": "Id",
											"docs": []
										},
										{
											"name": "relay_parent",
											"type": "9",
											"typeName": "H",
											"docs": []
										},
										{
											"name": "collator",
											"type": "78",
											"typeName": "CollatorId",
											"docs": []
										},
										{
											"name": "persisted_validation_data_hash",
											"type": "9",
											"typeName": "Hash",
											"docs": []
										},
										{
											"name": "pov_hash",
											"type": "9",
											"typeName": "Hash",
											"docs": []
										},
										{
											"name": "erasure_root",
											"type": "9",
											"typeName": "Hash",
											"docs": []
										},
										{
											"name": "signature",
											"type": "79",
											"typeName": "CollatorSignature",
											"docs": []
										},
										{
											"name": "para_head",
											"type": "9",
											"typeName": "Hash",
											"docs": []
										},
										{
											"name": "validation_code_hash",
											"type": "82",
											"typeName": "ValidationCodeHash",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "77",
						"type": {
							"path": [
								"polkadot_parachain",
								"primitives",
								"Id"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "78",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"collator_app",
								"Public"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "45",
											"typeName": "sr25519::Public",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "79",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"collator_app",
								"Signature"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "80",
											"typeName": "sr25519::Signature",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "80",
						"type": {
							"path": [
								"sp_core",
								"sr25519",
								"Signature"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "81",
											"typeName": "[u8; 64]",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "81",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "64",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "82",
						"type": {
							"path": [
								"polkadot_parachain",
								"primitives",
								"ValidationCodeHash"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "9",
											"typeName": "Hash",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "83",
						"type": {
							"path": [
								"polkadot_parachain",
								"primitives",
								"HeadData"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "10",
											"typeName": "Vec<u8>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "84",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"CoreIndex"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "85",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"GroupIndex"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "86",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"paras",
								"pallet",
								"Event"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "CurrentCodeUpdated",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Current code has been updated for a Para. `para_id`"
											]
										},
										{
											"name": "CurrentHeadUpdated",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Current head has been updated for a Para. `para_id`"
											]
										},
										{
											"name": "CodeUpgradeScheduled",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"A code upgrade has been scheduled for a Para. `para_id`"
											]
										},
										{
											"name": "NewHeadNoted",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"A new head has been noted for a Para. `para_id`"
											]
										},
										{
											"name": "ActionQueued",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "SessionIndex",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"A para has been queued to execute pending actions. `para_id`"
											]
										},
										{
											"name": "PvfCheckStarted",
											"fields": [
												{
													"name": null,
													"type": "82",
													"typeName": "ValidationCodeHash",
													"docs": []
												},
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"The given para either initiated or subscribed to a PVF check for the given validation",
												"code. `code_hash` `para_id`"
											]
										},
										{
											"name": "PvfCheckAccepted",
											"fields": [
												{
													"name": null,
													"type": "82",
													"typeName": "ValidationCodeHash",
													"docs": []
												},
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"The given validation code was accepted by the PVF pre-checking vote.",
												"`code_hash` `para_id`"
											]
										},
										{
											"name": "PvfCheckRejected",
											"fields": [
												{
													"name": null,
													"type": "82",
													"typeName": "ValidationCodeHash",
													"docs": []
												},
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"The given validation code was rejected by the PVF pre-checking vote.",
												"`code_hash` `para_id`"
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "87",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"ump",
								"pallet",
								"Event"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "InvalidFormat",
											"fields": [
												{
													"name": null,
													"type": "1",
													"typeName": "MessageId",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Upward message is invalid XCM.",
												"\\[ id \\]"
											]
										},
										{
											"name": "UnsupportedVersion",
											"fields": [
												{
													"name": null,
													"type": "1",
													"typeName": "MessageId",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Upward message is unsupported version of XCM.",
												"\\[ id \\]"
											]
										},
										{
											"name": "ExecutedUpward",
											"fields": [
												{
													"name": null,
													"type": "1",
													"typeName": "MessageId",
													"docs": []
												},
												{
													"name": null,
													"type": "88",
													"typeName": "Outcome",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Upward message executed with the given outcome.",
												"\\[ id, outcome \\]"
											]
										},
										{
											"name": "WeightExhausted",
											"fields": [
												{
													"name": null,
													"type": "1",
													"typeName": "MessageId",
													"docs": []
												},
												{
													"name": null,
													"type": "8",
													"typeName": "Weight",
													"docs": []
												},
												{
													"name": null,
													"type": "8",
													"typeName": "Weight",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"The weight limit for handling upward messages was reached.",
												"\\[ id, remaining, required \\]"
											]
										},
										{
											"name": "UpwardMessagesReceived",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Some upward messages have been received and will be processed.",
												"\\[ para, count, size \\]"
											]
										},
										{
											"name": "OverweightEnqueued",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "1",
													"typeName": "MessageId",
													"docs": []
												},
												{
													"name": null,
													"type": "8",
													"typeName": "OverweightIndex",
													"docs": []
												},
												{
													"name": null,
													"type": "8",
													"typeName": "Weight",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"The weight budget was exceeded for an individual upward message.",
												"",
												"This message can be later dispatched manually using `service_overweight` dispatchable",
												"using the assigned `overweight_index`.",
												"",
												"\\[ para, id, overweight_index, required \\]"
											]
										},
										{
											"name": "OverweightServiced",
											"fields": [
												{
													"name": null,
													"type": "8",
													"typeName": "OverweightIndex",
													"docs": []
												},
												{
													"name": null,
													"type": "8",
													"typeName": "Weight",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"Upward message from the overweight queue was executed with the given actual weight",
												"used.",
												"",
												"\\[ overweight_index, used \\]"
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "88",
						"type": {
							"path": [
								"xcm",
								"v2",
								"traits",
								"Outcome"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Complete",
											"fields": [
												{
													"name": null,
													"type": "8",
													"typeName": "Weight",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Incomplete",
											"fields": [
												{
													"name": null,
													"type": "8",
													"typeName": "Weight",
													"docs": []
												},
												{
													"name": null,
													"type": "89",
													"typeName": "Error",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Error",
											"fields": [
												{
													"name": null,
													"type": "89",
													"typeName": "Error",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "89",
						"type": {
							"path": [
								"xcm",
								"v2",
								"traits",
								"Error"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Overflow",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Unimplemented",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "UntrustedReserveLocation",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "UntrustedTeleportLocation",
											"fields": [],
											"index": "3",
											"docs": []
										},
										{
											"name": "MultiLocationFull",
											"fields": [],
											"index": "4",
											"docs": []
										},
										{
											"name": "MultiLocationNotInvertible",
											"fields": [],
											"index": "5",
											"docs": []
										},
										{
											"name": "BadOrigin",
											"fields": [],
											"index": "6",
											"docs": []
										},
										{
											"name": "InvalidLocation",
											"fields": [],
											"index": "7",
											"docs": []
										},
										{
											"name": "AssetNotFound",
											"fields": [],
											"index": "8",
											"docs": []
										},
										{
											"name": "FailedToTransactAsset",
											"fields": [],
											"index": "9",
											"docs": []
										},
										{
											"name": "NotWithdrawable",
											"fields": [],
											"index": "10",
											"docs": []
										},
										{
											"name": "LocationCannotHold",
											"fields": [],
											"index": "11",
											"docs": []
										},
										{
											"name": "ExceedsMaxMessageSize",
											"fields": [],
											"index": "12",
											"docs": []
										},
										{
											"name": "DestinationUnsupported",
											"fields": [],
											"index": "13",
											"docs": []
										},
										{
											"name": "Transport",
											"fields": [],
											"index": "14",
											"docs": []
										},
										{
											"name": "Unroutable",
											"fields": [],
											"index": "15",
											"docs": []
										},
										{
											"name": "UnknownClaim",
											"fields": [],
											"index": "16",
											"docs": []
										},
										{
											"name": "FailedToDecode",
											"fields": [],
											"index": "17",
											"docs": []
										},
										{
											"name": "MaxWeightInvalid",
											"fields": [],
											"index": "18",
											"docs": []
										},
										{
											"name": "NotHoldingFees",
											"fields": [],
											"index": "19",
											"docs": []
										},
										{
											"name": "TooExpensive",
											"fields": [],
											"index": "20",
											"docs": []
										},
										{
											"name": "Trap",
											"fields": [
												{
													"name": null,
													"type": "8",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "21",
											"docs": []
										},
										{
											"name": "UnhandledXcmVersion",
											"fields": [],
											"index": "22",
											"docs": []
										},
										{
											"name": "WeightLimitReached",
											"fields": [
												{
													"name": null,
													"type": "8",
													"typeName": "Weight",
													"docs": []
												}
											],
											"index": "23",
											"docs": []
										},
										{
											"name": "Barrier",
											"fields": [],
											"index": "24",
											"docs": []
										},
										{
											"name": "WeightNotComputable",
											"fields": [],
											"index": "25",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "90",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"hrmp",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "OpenChannelRequested",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Open HRMP channel requested.",
												"`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`"
											]
										},
										{
											"name": "OpenChannelCanceled",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "91",
													"typeName": "HrmpChannelId",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"An HRMP channel request sent by the receiver was canceled by either party.",
												"`[by_parachain, channel_id]`"
											]
										},
										{
											"name": "OpenChannelAccepted",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Open HRMP channel accepted. `[sender, recipient]`"
											]
										},
										{
											"name": "ChannelClosed",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "91",
													"typeName": "HrmpChannelId",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"HRMP channel closed. `[by_parachain, channel_id]`"
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "91",
						"type": {
							"path": [
								"polkadot_parachain",
								"primitives",
								"HrmpChannelId"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "sender",
											"type": "77",
											"typeName": "Id",
											"docs": []
										},
										{
											"name": "recipient",
											"type": "77",
											"typeName": "Id",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "92",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"disputes",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "DisputeInitiated",
											"fields": [
												{
													"name": null,
													"type": "93",
													"typeName": "CandidateHash",
													"docs": []
												},
												{
													"name": null,
													"type": "94",
													"typeName": "DisputeLocation",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A dispute has been initiated. \\[candidate hash, dispute location\\]"
											]
										},
										{
											"name": "DisputeConcluded",
											"fields": [
												{
													"name": null,
													"type": "93",
													"typeName": "CandidateHash",
													"docs": []
												},
												{
													"name": null,
													"type": "95",
													"typeName": "DisputeResult",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"A dispute has concluded for or against a candidate.",
												"`\\[para id, candidate hash, dispute result\\]`"
											]
										},
										{
											"name": "DisputeTimedOut",
											"fields": [
												{
													"name": null,
													"type": "93",
													"typeName": "CandidateHash",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"A dispute has timed out due to insufficient participation.",
												"`\\[para id, candidate hash\\]`"
											]
										},
										{
											"name": "Revert",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"A dispute has concluded with supermajority against a candidate.",
												"Block authors should no longer build on top of this head and should",
												"instead revert the block at the given height. This should be the",
												"number of the child of the last known valid block in the chain."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "93",
						"type": {
							"path": [
								"polkadot_core_primitives",
								"CandidateHash"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "9",
											"typeName": "Hash",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "94",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"disputes",
								"DisputeLocation"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Local",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Remote",
											"fields": [],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "95",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"disputes",
								"DisputeResult"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Valid",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Invalid",
											"fields": [],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "96",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"paras_registrar",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Registered",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Deregistered",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Reserved",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "97",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"slots",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "NewLeasePeriod",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A new `[lease_period]` is beginning."
											]
										},
										{
											"name": "Leased",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"A para has won the right to a continuous set of lease periods as a parachain.",
												"First balance is any extra amount reserved on top of the para's existing deposit.",
												"Second balance is the total amount reserved.",
												"`[parachain_id, leaser, period_begin, period_count, extra_reserved, total_amount]`"
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "98",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"auctions",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "AuctionStarted",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "AuctionIndex",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"An auction started. Provides its index and the block number where it will begin to",
												"close and the first lease period of the quadruplet that is auctioned.",
												"`[auction_index, lease_period, ending]`"
											]
										},
										{
											"name": "AuctionClosed",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "AuctionIndex",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"An auction ended. All funds become unreserved. `[auction_index]`"
											]
										},
										{
											"name": "Reserved",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Funds were reserved for a winning bid. First balance is the extra amount reserved.",
												"Second is the total. `[bidder, extra_reserved, total_amount]`"
											]
										},
										{
											"name": "Unreserved",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Funds were unreserved since bidder is no longer active. `[bidder, amount]`"
											]
										},
										{
											"name": "ReserveConfiscated",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Someone attempted to lease the same slot twice for a parachain. The amount is held in reserve",
												"but no parachain slot has been leased.",
												"`[parachain_id, leaser, amount]`"
											]
										},
										{
											"name": "BidAccepted",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"A new bid has been accepted as the current winner.",
												"`[who, para_id, amount, first_slot, last_slot]`"
											]
										},
										{
											"name": "WinningOffset",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "AuctionIndex",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"The winning offset was chosen for an auction. This will map into the `Winning` storage map.",
												"`[auction_index, block_number]`"
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "99",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"crowdloan",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Created",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Create a new crowdloaning campaign. `[fund_index]`"
											]
										},
										{
											"name": "Contributed",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Contributed to a crowd sale. `[who, fund_index, amount]`"
											]
										},
										{
											"name": "Withdrew",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Withdrew full balance of a contributor. `[who, fund_index, amount]`"
											]
										},
										{
											"name": "PartiallyRefunded",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"The loans in a fund have been partially dissolved, i.e. there are some left",
												"over child keys that still need to be killed. `[fund_index]`"
											]
										},
										{
											"name": "AllRefunded",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"All loans in a fund have been refunded. `[fund_index]`"
											]
										},
										{
											"name": "Dissolved",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Fund is dissolved. `[fund_index]`"
											]
										},
										{
											"name": "HandleBidResult",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "53",
													"typeName": "DispatchResult",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"The result of trying to submit a new bid to the Slots pallet."
											]
										},
										{
											"name": "Edited",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"The configuration to a crowdloan has been edited. `[fund_index]`"
											]
										},
										{
											"name": "MemoUpdated",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": null,
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "8",
											"docs": [
												"A memo has been updated. `[who, fund_index, memo]`"
											]
										},
										{
											"name": "AddedToNewRaise",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "9",
											"docs": [
												"A parachain has been moved to `NewRaise`"
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "100",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"assigned_slots",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "PermanentSlotAssigned",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A para was assigned a permanent parachain slot"
											]
										},
										{
											"name": "TemporarySlotAssigned",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"A para was assigned a temporary parachain slot"
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "101",
						"type": {
							"path": [
								"pallet_xcm",
								"pallet",
								"Event"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Attempted",
											"fields": [
												{
													"name": null,
													"type": "88",
													"typeName": "xcm::latest::Outcome",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Execution of an XCM message was attempted.",
												"",
												"\\[ outcome \\]"
											]
										},
										{
											"name": "Sent",
											"fields": [
												{
													"name": null,
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": null,
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": null,
													"type": "111",
													"typeName": "Xcm<()>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"A XCM message was sent.",
												"",
												"\\[ origin, destination, message \\]"
											]
										},
										{
											"name": "UnexpectedResponse",
											"fields": [
												{
													"name": null,
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": null,
													"type": "8",
													"typeName": "QueryId",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Query response received which does not match a registered query. This may be because a",
												"matching query was never registered, it may be because it is a duplicate response, or",
												"because the query timed out.",
												"",
												"\\[ origin location, id \\]"
											]
										},
										{
											"name": "ResponseReady",
											"fields": [
												{
													"name": null,
													"type": "8",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": null,
													"type": "121",
													"typeName": "Response",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Query response has been received and is ready for taking with `take_response`. There is",
												"no registered notification call.",
												"",
												"\\[ id, response \\]"
											]
										},
										{
											"name": "Notified",
											"fields": [
												{
													"name": null,
													"type": "8",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": null,
													"type": "2",
													"typeName": "u8",
													"docs": []
												},
												{
													"name": null,
													"type": "2",
													"typeName": "u8",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Query response has been received and query is removed. The registered notification has",
												"been dispatched and executed successfully.",
												"",
												"\\[ id, pallet index, call index \\]"
											]
										},
										{
											"name": "NotifyOverweight",
											"fields": [
												{
													"name": null,
													"type": "8",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": null,
													"type": "2",
													"typeName": "u8",
													"docs": []
												},
												{
													"name": null,
													"type": "2",
													"typeName": "u8",
													"docs": []
												},
												{
													"name": null,
													"type": "8",
													"typeName": "Weight",
													"docs": []
												},
												{
													"name": null,
													"type": "8",
													"typeName": "Weight",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Query response has been received and query is removed. The registered notification could",
												"not be dispatched because the dispatch weight is greater than the maximum weight",
												"originally budgeted by this runtime for the query result.",
												"",
												"\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
											]
										},
										{
											"name": "NotifyDispatchError",
											"fields": [
												{
													"name": null,
													"type": "8",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": null,
													"type": "2",
													"typeName": "u8",
													"docs": []
												},
												{
													"name": null,
													"type": "2",
													"typeName": "u8",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"Query response has been received and query is removed. There was a general error with",
												"dispatching the notification call.",
												"",
												"\\[ id, pallet index, call index \\]"
											]
										},
										{
											"name": "NotifyDecodeFailed",
											"fields": [
												{
													"name": null,
													"type": "8",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": null,
													"type": "2",
													"typeName": "u8",
													"docs": []
												},
												{
													"name": null,
													"type": "2",
													"typeName": "u8",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"Query response has been received and query is removed. The dispatch was unable to be",
												"decoded into a `Call`; this might be due to dispatch function having a signature which",
												"is not `(origin, QueryId, Response)`.",
												"",
												"\\[ id, pallet index, call index \\]"
											]
										},
										{
											"name": "InvalidResponder",
											"fields": [
												{
													"name": null,
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": null,
													"type": "8",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": null,
													"type": "130",
													"typeName": "Option<MultiLocation>",
													"docs": []
												}
											],
											"index": "8",
											"docs": [
												"Expected query response has been received but the origin location of the response does",
												"not match that expected. The query remains registered for a later, valid, response to",
												"be received and acted upon.",
												"",
												"\\[ origin location, id, expected location \\]"
											]
										},
										{
											"name": "InvalidResponderVersion",
											"fields": [
												{
													"name": null,
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": null,
													"type": "8",
													"typeName": "QueryId",
													"docs": []
												}
											],
											"index": "9",
											"docs": [
												"Expected query response has been received but the expected origin location placed in",
												"storage by this runtime previously cannot be decoded. The query remains registered.",
												"",
												"This is unexpected (since a location placed in storage in a previously executing",
												"runtime should be readable prior to query timeout) and dangerous since the possibly",
												"valid response will be dropped. Manual governance intervention is probably going to be",
												"needed.",
												"",
												"\\[ origin location, id \\]"
											]
										},
										{
											"name": "ResponseTaken",
											"fields": [
												{
													"name": null,
													"type": "8",
													"typeName": "QueryId",
													"docs": []
												}
											],
											"index": "10",
											"docs": [
												"Received query response has been read and removed.",
												"",
												"\\[ id \\]"
											]
										},
										{
											"name": "AssetsTrapped",
											"fields": [
												{
													"name": null,
													"type": "9",
													"typeName": "H256",
													"docs": []
												},
												{
													"name": null,
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": null,
													"type": "131",
													"typeName": "VersionedMultiAssets",
													"docs": []
												}
											],
											"index": "11",
											"docs": [
												"Some assets have been placed in an asset trap.",
												"",
												"\\[ hash, origin, assets \\]"
											]
										},
										{
											"name": "VersionChangeNotified",
											"fields": [
												{
													"name": null,
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "XcmVersion",
													"docs": []
												}
											],
											"index": "12",
											"docs": [
												"An XCM version change notification message has been attempted to be sent.",
												"",
												"\\[ destination, result \\]"
											]
										},
										{
											"name": "SupportedVersionChanged",
											"fields": [
												{
													"name": null,
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "XcmVersion",
													"docs": []
												}
											],
											"index": "13",
											"docs": [
												"The supported version of a location has been changed. This might be through an",
												"automatic notification or a manual intervention.",
												"",
												"\\[ location, XCM version \\]"
											]
										},
										{
											"name": "NotifyTargetSendFail",
											"fields": [
												{
													"name": null,
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": null,
													"type": "8",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": null,
													"type": "89",
													"typeName": "XcmError",
													"docs": []
												}
											],
											"index": "14",
											"docs": [
												"A given location which had a version change subscription was dropped owing to an error",
												"sending the notification to it.",
												"",
												"\\[ location, query ID, error \\]"
											]
										},
										{
											"name": "NotifyTargetMigrationFail",
											"fields": [
												{
													"name": null,
													"type": "136",
													"typeName": "VersionedMultiLocation",
													"docs": []
												},
												{
													"name": null,
													"type": "8",
													"typeName": "QueryId",
													"docs": []
												}
											],
											"index": "15",
											"docs": [
												"A given location which had a version change subscription was dropped owing to an error",
												"migrating the location to our new XCM format.",
												"",
												"\\[ location, query ID \\]"
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "102",
						"type": {
							"path": [
								"xcm",
								"v1",
								"multilocation",
								"MultiLocation"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "parents",
											"type": "2",
											"typeName": "u8",
											"docs": []
										},
										{
											"name": "interior",
											"type": "103",
											"typeName": "Junctions",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "103",
						"type": {
							"path": [
								"xcm",
								"v1",
								"multilocation",
								"Junctions"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Here",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "X1",
											"fields": [
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "X2",
											"fields": [
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "X3",
											"fields": [
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "X4",
											"fields": [
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "X5",
											"fields": [
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "X6",
											"fields": [
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "X7",
											"fields": [
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "X8",
											"fields": [
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "104",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "104",
						"type": {
							"path": [
								"xcm",
								"v1",
								"junction",
								"Junction"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Parachain",
											"fields": [
												{
													"name": null,
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "AccountId32",
											"fields": [
												{
													"name": "network",
													"type": "106",
													"typeName": "NetworkId",
													"docs": []
												},
												{
													"name": "id",
													"type": "1",
													"typeName": "[u8; 32]",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "AccountIndex64",
											"fields": [
												{
													"name": "network",
													"type": "106",
													"typeName": "NetworkId",
													"docs": []
												},
												{
													"name": "index",
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "AccountKey20",
											"fields": [
												{
													"name": "network",
													"type": "106",
													"typeName": "NetworkId",
													"docs": []
												},
												{
													"name": "key",
													"type": "108",
													"typeName": "[u8; 20]",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "PalletInstance",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": "u8",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "GeneralIndex",
											"fields": [
												{
													"name": null,
													"type": "49",
													"typeName": "u128",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "GeneralKey",
											"fields": [
												{
													"name": null,
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "OnlyChild",
											"fields": [],
											"index": "7",
											"docs": []
										},
										{
											"name": "Plurality",
											"fields": [
												{
													"name": "id",
													"type": "109",
													"typeName": "BodyId",
													"docs": []
												},
												{
													"name": "part",
													"type": "110",
													"typeName": "BodyPart",
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "105",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"compact": {
									"type": "4"
								}
							},
							"docs": []
						}
					},
					{
						"id": "106",
						"type": {
							"path": [
								"xcm",
								"v0",
								"junction",
								"NetworkId"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Any",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Named",
											"fields": [
												{
													"name": null,
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Polkadot",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "Kusama",
											"fields": [],
											"index": "3",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "107",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"compact": {
									"type": "8"
								}
							},
							"docs": []
						}
					},
					{
						"id": "108",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "20",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "109",
						"type": {
							"path": [
								"xcm",
								"v0",
								"junction",
								"BodyId"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Unit",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Named",
											"fields": [
												{
													"name": null,
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Index",
											"fields": [
												{
													"name": null,
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "Executive",
											"fields": [],
											"index": "3",
											"docs": []
										},
										{
											"name": "Technical",
											"fields": [],
											"index": "4",
											"docs": []
										},
										{
											"name": "Legislative",
											"fields": [],
											"index": "5",
											"docs": []
										},
										{
											"name": "Judicial",
											"fields": [],
											"index": "6",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "110",
						"type": {
							"path": [
								"xcm",
								"v0",
								"junction",
								"BodyPart"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Voice",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Members",
											"fields": [
												{
													"name": "count",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Fraction",
											"fields": [
												{
													"name": "nom",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "denom",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "AtLeastProportion",
											"fields": [
												{
													"name": "nom",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "denom",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "MoreThanProportion",
											"fields": [
												{
													"name": "nom",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "denom",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "111",
						"type": {
							"path": [
								"xcm",
								"v2",
								"Xcm"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "112",
											"typeName": "Vec<Instruction<Call>>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "112",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "113"
								}
							},
							"docs": []
						}
					},
					{
						"id": "113",
						"type": {
							"path": [
								"xcm",
								"v2",
								"Instruction"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "WithdrawAsset",
											"fields": [
												{
													"name": null,
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "ReserveAssetDeposited",
											"fields": [
												{
													"name": null,
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "ReceiveTeleportedAsset",
											"fields": [
												{
													"name": null,
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "QueryResponse",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": "response",
													"type": "121",
													"typeName": "Response",
													"docs": []
												},
												{
													"name": "max_weight",
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "TransferAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "beneficiary",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "TransferReserveAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "xcm",
													"type": "111",
													"typeName": "Xcm<()>",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "Transact",
											"fields": [
												{
													"name": "origin_type",
													"type": "124",
													"typeName": "OriginKind",
													"docs": []
												},
												{
													"name": "require_weight_at_most",
													"type": "107",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "call",
													"type": "125",
													"typeName": "DoubleEncoded<Call>",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "HrmpNewChannelOpenRequest",
											"fields": [
												{
													"name": "sender",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "max_message_size",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "max_capacity",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "HrmpChannelAccepted",
											"fields": [
												{
													"name": "recipient",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										},
										{
											"name": "HrmpChannelClosing",
											"fields": [
												{
													"name": "initiator",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "sender",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "recipient",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "9",
											"docs": []
										},
										{
											"name": "ClearOrigin",
											"fields": [],
											"index": "10",
											"docs": []
										},
										{
											"name": "DescendOrigin",
											"fields": [
												{
													"name": null,
													"type": "103",
													"typeName": "InteriorMultiLocation",
													"docs": []
												}
											],
											"index": "11",
											"docs": []
										},
										{
											"name": "ReportError",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "max_response_weight",
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "12",
											"docs": []
										},
										{
											"name": "DepositAsset",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "max_assets",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "beneficiary",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "13",
											"docs": []
										},
										{
											"name": "DepositReserveAsset",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "max_assets",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "xcm",
													"type": "111",
													"typeName": "Xcm<()>",
													"docs": []
												}
											],
											"index": "14",
											"docs": []
										},
										{
											"name": "ExchangeAsset",
											"fields": [
												{
													"name": "give",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "receive",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												}
											],
											"index": "15",
											"docs": []
										},
										{
											"name": "InitiateReserveWithdraw",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "reserve",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "xcm",
													"type": "111",
													"typeName": "Xcm<()>",
													"docs": []
												}
											],
											"index": "16",
											"docs": []
										},
										{
											"name": "InitiateTeleport",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "xcm",
													"type": "111",
													"typeName": "Xcm<()>",
													"docs": []
												}
											],
											"index": "17",
											"docs": []
										},
										{
											"name": "QueryHolding",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "max_response_weight",
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "18",
											"docs": []
										},
										{
											"name": "BuyExecution",
											"fields": [
												{
													"name": "fees",
													"type": "116",
													"typeName": "MultiAsset",
													"docs": []
												},
												{
													"name": "weight_limit",
													"type": "129",
													"typeName": "WeightLimit",
													"docs": []
												}
											],
											"index": "19",
											"docs": []
										},
										{
											"name": "RefundSurplus",
											"fields": [],
											"index": "20",
											"docs": []
										},
										{
											"name": "SetErrorHandler",
											"fields": [
												{
													"name": null,
													"type": "111",
													"typeName": "Xcm<Call>",
													"docs": []
												}
											],
											"index": "21",
											"docs": []
										},
										{
											"name": "SetAppendix",
											"fields": [
												{
													"name": null,
													"type": "111",
													"typeName": "Xcm<Call>",
													"docs": []
												}
											],
											"index": "22",
											"docs": []
										},
										{
											"name": "ClearError",
											"fields": [],
											"index": "23",
											"docs": []
										},
										{
											"name": "ClaimAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "ticket",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "24",
											"docs": []
										},
										{
											"name": "Trap",
											"fields": [
												{
													"name": null,
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "25",
											"docs": []
										},
										{
											"name": "SubscribeVersion",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": "max_response_weight",
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "26",
											"docs": []
										},
										{
											"name": "UnsubscribeVersion",
											"fields": [],
											"index": "27",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "114",
						"type": {
							"path": [
								"xcm",
								"v1",
								"multiasset",
								"MultiAssets"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "115",
											"typeName": "Vec<MultiAsset>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "115",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "116"
								}
							},
							"docs": []
						}
					},
					{
						"id": "116",
						"type": {
							"path": [
								"xcm",
								"v1",
								"multiasset",
								"MultiAsset"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "id",
											"type": "117",
											"typeName": "AssetId",
											"docs": []
										},
										{
											"name": "fun",
											"type": "118",
											"typeName": "Fungibility",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "117",
						"type": {
							"path": [
								"xcm",
								"v1",
								"multiasset",
								"AssetId"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Concrete",
											"fields": [
												{
													"name": null,
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Abstract",
											"fields": [
												{
													"name": null,
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "118",
						"type": {
							"path": [
								"xcm",
								"v1",
								"multiasset",
								"Fungibility"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Fungible",
											"fields": [
												{
													"name": null,
													"type": "49",
													"typeName": "u128",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "NonFungible",
											"fields": [
												{
													"name": null,
													"type": "119",
													"typeName": "AssetInstance",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "119",
						"type": {
							"path": [
								"xcm",
								"v1",
								"multiasset",
								"AssetInstance"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Undefined",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Index",
											"fields": [
												{
													"name": null,
													"type": "49",
													"typeName": "u128",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Array4",
											"fields": [
												{
													"name": null,
													"type": "14",
													"typeName": "[u8; 4]",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "Array8",
											"fields": [
												{
													"name": null,
													"type": "120",
													"typeName": "[u8; 8]",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "Array16",
											"fields": [
												{
													"name": null,
													"type": "36",
													"typeName": "[u8; 16]",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "Array32",
											"fields": [
												{
													"name": null,
													"type": "1",
													"typeName": "[u8; 32]",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "Blob",
											"fields": [
												{
													"name": null,
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "120",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "8",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "121",
						"type": {
							"path": [
								"xcm",
								"v2",
								"Response"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Null",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Assets",
											"fields": [
												{
													"name": null,
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "ExecutionResult",
											"fields": [
												{
													"name": null,
													"type": "122",
													"typeName": "Option<(u32, Error)>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "Version",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "super::Version",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "122",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "123"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "123",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "123",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"4",
									"89"
								]
							},
							"docs": []
						}
					},
					{
						"id": "124",
						"type": {
							"path": [
								"xcm",
								"v0",
								"OriginKind"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Native",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "SovereignAccount",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "Superuser",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "Xcm",
											"fields": [],
											"index": "3",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "125",
						"type": {
							"path": [
								"xcm",
								"double_encoded",
								"DoubleEncoded"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "encoded",
											"type": "10",
											"typeName": "Vec<u8>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "126",
						"type": {
							"path": [
								"xcm",
								"v1",
								"multiasset",
								"MultiAssetFilter"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Definite",
											"fields": [
												{
													"name": null,
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Wild",
											"fields": [
												{
													"name": null,
													"type": "127",
													"typeName": "WildMultiAsset",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "127",
						"type": {
							"path": [
								"xcm",
								"v1",
								"multiasset",
								"WildMultiAsset"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "All",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "AllOf",
											"fields": [
												{
													"name": "id",
													"type": "117",
													"typeName": "AssetId",
													"docs": []
												},
												{
													"name": "fun",
													"type": "128",
													"typeName": "WildFungibility",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "128",
						"type": {
							"path": [
								"xcm",
								"v1",
								"multiasset",
								"WildFungibility"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Fungible",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "NonFungible",
											"fields": [],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "129",
						"type": {
							"path": [
								"xcm",
								"v2",
								"WeightLimit"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Unlimited",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Limited",
											"fields": [
												{
													"name": null,
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "130",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "102"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "102",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "131",
						"type": {
							"path": [
								"xcm",
								"VersionedMultiAssets"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "V0",
											"fields": [
												{
													"name": null,
													"type": "132",
													"typeName": "Vec<v0::MultiAsset>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "V1",
											"fields": [
												{
													"name": null,
													"type": "114",
													"typeName": "v1::MultiAssets",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "132",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "133"
								}
							},
							"docs": []
						}
					},
					{
						"id": "133",
						"type": {
							"path": [
								"xcm",
								"v0",
								"multi_asset",
								"MultiAsset"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "All",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "AllFungible",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "AllNonFungible",
											"fields": [],
											"index": "3",
											"docs": []
										},
										{
											"name": "AllAbstractFungible",
											"fields": [
												{
													"name": "id",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "AllAbstractNonFungible",
											"fields": [
												{
													"name": "class",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "AllConcreteFungible",
											"fields": [
												{
													"name": "id",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "AllConcreteNonFungible",
											"fields": [
												{
													"name": "class",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "AbstractFungible",
											"fields": [
												{
													"name": "id",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												},
												{
													"name": "amount",
													"type": "49",
													"typeName": "u128",
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										},
										{
											"name": "AbstractNonFungible",
											"fields": [
												{
													"name": "class",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												},
												{
													"name": "instance",
													"type": "119",
													"typeName": "AssetInstance",
													"docs": []
												}
											],
											"index": "9",
											"docs": []
										},
										{
											"name": "ConcreteFungible",
											"fields": [
												{
													"name": "id",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "amount",
													"type": "49",
													"typeName": "u128",
													"docs": []
												}
											],
											"index": "10",
											"docs": []
										},
										{
											"name": "ConcreteNonFungible",
											"fields": [
												{
													"name": "class",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "instance",
													"type": "119",
													"typeName": "AssetInstance",
													"docs": []
												}
											],
											"index": "11",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "134",
						"type": {
							"path": [
								"xcm",
								"v0",
								"multi_location",
								"MultiLocation"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Null",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "X1",
											"fields": [
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "X2",
											"fields": [
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "X3",
											"fields": [
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "X4",
											"fields": [
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "X5",
											"fields": [
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "X6",
											"fields": [
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "X7",
											"fields": [
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "X8",
											"fields": [
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												},
												{
													"name": null,
													"type": "135",
													"typeName": "Junction",
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "135",
						"type": {
							"path": [
								"xcm",
								"v0",
								"junction",
								"Junction"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Parent",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Parachain",
											"fields": [
												{
													"name": null,
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "AccountId32",
											"fields": [
												{
													"name": "network",
													"type": "106",
													"typeName": "NetworkId",
													"docs": []
												},
												{
													"name": "id",
													"type": "1",
													"typeName": "[u8; 32]",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "AccountIndex64",
											"fields": [
												{
													"name": "network",
													"type": "106",
													"typeName": "NetworkId",
													"docs": []
												},
												{
													"name": "index",
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "AccountKey20",
											"fields": [
												{
													"name": "network",
													"type": "106",
													"typeName": "NetworkId",
													"docs": []
												},
												{
													"name": "key",
													"type": "108",
													"typeName": "[u8; 20]",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "PalletInstance",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": "u8",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "GeneralIndex",
											"fields": [
												{
													"name": null,
													"type": "49",
													"typeName": "u128",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "GeneralKey",
											"fields": [
												{
													"name": null,
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "OnlyChild",
											"fields": [],
											"index": "8",
											"docs": []
										},
										{
											"name": "Plurality",
											"fields": [
												{
													"name": "id",
													"type": "109",
													"typeName": "BodyId",
													"docs": []
												},
												{
													"name": "part",
													"type": "110",
													"typeName": "BodyPart",
													"docs": []
												}
											],
											"index": "9",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "136",
						"type": {
							"path": [
								"xcm",
								"VersionedMultiLocation"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "V0",
											"fields": [
												{
													"name": null,
													"type": "134",
													"typeName": "v0::MultiLocation",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "V1",
											"fields": [
												{
													"name": null,
													"type": "102",
													"typeName": "v1::MultiLocation",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "137",
						"type": {
							"path": [
								"frame_system",
								"Phase"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "ApplyExtrinsic",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Finalization",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "Initialization",
											"fields": [],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "138",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "9"
								}
							},
							"docs": []
						}
					},
					{
						"id": "139",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "59"
								}
							},
							"docs": []
						}
					},
					{
						"id": "140",
						"type": {
							"path": [
								"frame_system",
								"LastRuntimeUpgradeInfo"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "spec_version",
											"type": "105",
											"typeName": "codec::Compact<u32>",
											"docs": []
										},
										{
											"name": "spec_name",
											"type": "141",
											"typeName": "sp_runtime::RuntimeString",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "141",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"primitive": "Str"
							},
							"docs": []
						}
					},
					{
						"id": "142",
						"type": {
							"path": [
								"frame_system",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "fill_block",
											"fields": [
												{
													"name": "ratio",
													"type": "33",
													"typeName": "Perbill",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"A dispatch that will fill the block weight up to the given ratio."
											]
										},
										{
											"name": "remark",
											"fields": [
												{
													"name": "remark",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Make some on-chain remark.",
												"",
												"# <weight>",
												"- `O(1)`",
												"# </weight>"
											]
										},
										{
											"name": "set_heap_pages",
											"fields": [
												{
													"name": "pages",
													"type": "8",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Set the number of pages in the WebAssembly environment's heap."
											]
										},
										{
											"name": "set_code",
											"fields": [
												{
													"name": "code",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Set the new runtime code.",
												"",
												"# <weight>",
												"- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
												"- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
												"  expensive).",
												"- 1 storage write (codec `O(C)`).",
												"- 1 digest item.",
												"- 1 event.",
												"The weight of this function is dependent on the runtime, but generally this is very",
												"expensive. We will treat this as a full block.",
												"# </weight>"
											]
										},
										{
											"name": "set_code_without_checks",
											"fields": [
												{
													"name": "code",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Set the new runtime code without doing any checks of the given `code`.",
												"",
												"# <weight>",
												"- `O(C)` where `C` length of `code`",
												"- 1 storage write (codec `O(C)`).",
												"- 1 digest item.",
												"- 1 event.",
												"The weight of this function is dependent on the runtime. We will treat this as a full",
												"block. # </weight>"
											]
										},
										{
											"name": "set_storage",
											"fields": [
												{
													"name": "items",
													"type": "143",
													"typeName": "Vec<KeyValue>",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Set some items of storage."
											]
										},
										{
											"name": "kill_storage",
											"fields": [
												{
													"name": "keys",
													"type": "145",
													"typeName": "Vec<Key>",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"Kill some items from storage."
											]
										},
										{
											"name": "kill_prefix",
											"fields": [
												{
													"name": "prefix",
													"type": "10",
													"typeName": "Key",
													"docs": []
												},
												{
													"name": "subkeys",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"Kill all storage items with a key that starts with the given prefix.",
												"",
												"**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
												"the prefix we are removing to accurately calculate the weight of this function."
											]
										},
										{
											"name": "remark_with_event",
											"fields": [
												{
													"name": "remark",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "8",
											"docs": [
												"Make some on-chain remark and emit event."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "143",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "144"
								}
							},
							"docs": []
						}
					},
					{
						"id": "144",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"10",
									"10"
								]
							},
							"docs": []
						}
					},
					{
						"id": "145",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "10"
								}
							},
							"docs": []
						}
					},
					{
						"id": "146",
						"type": {
							"path": [
								"frame_system",
								"limits",
								"BlockWeights"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "base_block",
											"type": "8",
											"typeName": "Weight",
											"docs": []
										},
										{
											"name": "max_block",
											"type": "8",
											"typeName": "Weight",
											"docs": []
										},
										{
											"name": "per_class",
											"type": "147",
											"typeName": "PerDispatchClass<WeightsPerClass>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "147",
						"type": {
							"path": [
								"frame_support",
								"weights",
								"PerDispatchClass"
							],
							"params": [
								{
									"name": "T",
									"type": "148"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "normal",
											"type": "148",
											"typeName": "T",
											"docs": []
										},
										{
											"name": "operational",
											"type": "148",
											"typeName": "T",
											"docs": []
										},
										{
											"name": "mandatory",
											"type": "148",
											"typeName": "T",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "148",
						"type": {
							"path": [
								"frame_system",
								"limits",
								"WeightsPerClass"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "base_extrinsic",
											"type": "8",
											"typeName": "Weight",
											"docs": []
										},
										{
											"name": "max_extrinsic",
											"type": "149",
											"typeName": "Option<Weight>",
											"docs": []
										},
										{
											"name": "max_total",
											"type": "149",
											"typeName": "Option<Weight>",
											"docs": []
										},
										{
											"name": "reserved",
											"type": "149",
											"typeName": "Option<Weight>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "149",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "8"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "8",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "150",
						"type": {
							"path": [
								"frame_system",
								"limits",
								"BlockLength"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "max",
											"type": "151",
											"typeName": "PerDispatchClass<u32>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "151",
						"type": {
							"path": [
								"frame_support",
								"weights",
								"PerDispatchClass"
							],
							"params": [
								{
									"name": "T",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "normal",
											"type": "4",
											"typeName": "T",
											"docs": []
										},
										{
											"name": "operational",
											"type": "4",
											"typeName": "T",
											"docs": []
										},
										{
											"name": "mandatory",
											"type": "4",
											"typeName": "T",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "152",
						"type": {
							"path": [
								"frame_support",
								"weights",
								"RuntimeDbWeight"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "read",
											"type": "8",
											"typeName": "Weight",
											"docs": []
										},
										{
											"name": "write",
											"type": "8",
											"typeName": "Weight",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "153",
						"type": {
							"path": [
								"sp_version",
								"RuntimeVersion"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "spec_name",
											"type": "141",
											"typeName": "RuntimeString",
											"docs": []
										},
										{
											"name": "impl_name",
											"type": "141",
											"typeName": "RuntimeString",
											"docs": []
										},
										{
											"name": "authoring_version",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "spec_version",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "impl_version",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "apis",
											"type": "154",
											"typeName": "ApisVec",
											"docs": []
										},
										{
											"name": "transaction_version",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "state_version",
											"type": "2",
											"typeName": "u8",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "154",
						"type": {
							"path": [
								"Cow"
							],
							"params": [
								{
									"name": "T",
									"type": "155"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "155",
											"typeName": null,
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "155",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "156"
								}
							},
							"docs": []
						}
					},
					{
						"id": "156",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"120",
									"4"
								]
							},
							"docs": []
						}
					},
					{
						"id": "157",
						"type": {
							"path": [
								"frame_system",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "InvalidSpecName",
											"fields": [],
											"index": "0",
											"docs": [
												"The name of specification does not match between the current runtime",
												"and the new runtime."
											]
										},
										{
											"name": "SpecVersionNeedsToIncrease",
											"fields": [],
											"index": "1",
											"docs": [
												"The specification version is not allowed to decrease between the current runtime",
												"and the new runtime."
											]
										},
										{
											"name": "FailedToExtractRuntimeVersion",
											"fields": [],
											"index": "2",
											"docs": [
												"Failed to extract the runtime version from the new runtime.",
												"",
												"Either calling `Core_version` or decoding `RuntimeVersion` failed."
											]
										},
										{
											"name": "NonDefaultComposite",
											"fields": [],
											"index": "3",
											"docs": [
												"Suicide called when the account has non-default composite data."
											]
										},
										{
											"name": "NonZeroRefCount",
											"fields": [],
											"index": "4",
											"docs": [
												"There is a non-zero reference count preventing the account from being purged."
											]
										},
										{
											"name": "CallFiltered",
											"fields": [],
											"index": "5",
											"docs": [
												"The origin filter prevent the call to be dispatched."
											]
										}
									]
								}
							},
							"docs": [
								"Error for the System pallet"
							]
						}
					},
					{
						"id": "158",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"weak_bounded_vec",
								"WeakBoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "159"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "161",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "159",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"160",
									"8"
								]
							},
							"docs": []
						}
					},
					{
						"id": "160",
						"type": {
							"path": [
								"sp_consensus_babe",
								"app",
								"Public"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "45",
											"typeName": "sr25519::Public",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "161",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "159"
								}
							},
							"docs": []
						}
					},
					{
						"id": "162",
						"type": {
							"path": [
								"sp_consensus_slots",
								"Slot"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "8",
											"typeName": "u64",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "163",
						"type": {
							"path": [
								"sp_consensus_babe",
								"digests",
								"NextConfigDescriptor"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "V1",
											"fields": [
												{
													"name": "c",
													"type": "164",
													"typeName": "(u64, u64)",
													"docs": []
												},
												{
													"name": "allowed_slots",
													"type": "165",
													"typeName": "AllowedSlots",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "164",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"8",
									"8"
								]
							},
							"docs": []
						}
					},
					{
						"id": "165",
						"type": {
							"path": [
								"sp_consensus_babe",
								"AllowedSlots"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "PrimarySlots",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "PrimaryAndSecondaryPlainSlots",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "PrimaryAndSecondaryVRFSlots",
											"fields": [],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "166",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "1"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "167",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "167",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "1"
								}
							},
							"docs": []
						}
					},
					{
						"id": "168",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "1"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "1",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "169",
						"type": {
							"path": [
								"sp_consensus_babe",
								"BabeEpochConfiguration"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "c",
											"type": "164",
											"typeName": "(u64, u64)",
											"docs": []
										},
										{
											"name": "allowed_slots",
											"type": "165",
											"typeName": "AllowedSlots",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "170",
						"type": {
							"path": [
								"pallet_babe",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "report_equivocation",
											"fields": [
												{
													"name": "equivocation_proof",
													"type": "171",
													"typeName": "Box<EquivocationProof<T::Header>>",
													"docs": []
												},
												{
													"name": "key_owner_proof",
													"type": "174",
													"typeName": "T::KeyOwnerProof",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Report authority equivocation/misbehavior. This method will verify",
												"the equivocation proof and validate the given key ownership proof",
												"against the extracted offender. If both are valid, the offence will",
												"be reported."
											]
										},
										{
											"name": "report_equivocation_unsigned",
											"fields": [
												{
													"name": "equivocation_proof",
													"type": "171",
													"typeName": "Box<EquivocationProof<T::Header>>",
													"docs": []
												},
												{
													"name": "key_owner_proof",
													"type": "174",
													"typeName": "T::KeyOwnerProof",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Report authority equivocation/misbehavior. This method will verify",
												"the equivocation proof and validate the given key ownership proof",
												"against the extracted offender. If both are valid, the offence will",
												"be reported.",
												"This extrinsic must be called unsigned and it is expected that only",
												"block authors will call it (validated in `ValidateUnsigned`), as such",
												"if the block author is defined it will be defined as the equivocation",
												"reporter."
											]
										},
										{
											"name": "plan_config_change",
											"fields": [
												{
													"name": "config",
													"type": "163",
													"typeName": "NextConfigDescriptor",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Plan an epoch config change. The epoch config change is recorded and will be enacted on",
												"the next call to `enact_epoch_change`. The config will be activated one epoch after.",
												"Multiple calls to this method will replace any existing planned config change that had",
												"not been enacted yet."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "171",
						"type": {
							"path": [
								"sp_consensus_slots",
								"EquivocationProof"
							],
							"params": [
								{
									"name": "Header",
									"type": "172"
								},
								{
									"name": "Id",
									"type": "160"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "offender",
											"type": "160",
											"typeName": "Id",
											"docs": []
										},
										{
											"name": "slot",
											"type": "162",
											"typeName": "Slot",
											"docs": []
										},
										{
											"name": "first_header",
											"type": "172",
											"typeName": "Header",
											"docs": []
										},
										{
											"name": "second_header",
											"type": "172",
											"typeName": "Header",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "172",
						"type": {
							"path": [
								"sp_runtime",
								"generic",
								"header",
								"Header"
							],
							"params": [
								{
									"name": "Number",
									"type": "4"
								},
								{
									"name": "Hash",
									"type": "173"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "parent_hash",
											"type": "9",
											"typeName": "Hash::Output",
											"docs": []
										},
										{
											"name": "number",
											"type": "105",
											"typeName": "Number",
											"docs": []
										},
										{
											"name": "state_root",
											"type": "9",
											"typeName": "Hash::Output",
											"docs": []
										},
										{
											"name": "extrinsics_root",
											"type": "9",
											"typeName": "Hash::Output",
											"docs": []
										},
										{
											"name": "digest",
											"type": "11",
											"typeName": "Digest",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "173",
						"type": {
							"path": [
								"sp_runtime",
								"traits",
								"BlakeTwo256"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": []
								}
							},
							"docs": []
						}
					},
					{
						"id": "174",
						"type": {
							"path": [
								"sp_session",
								"MembershipProof"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "session",
											"type": "4",
											"typeName": "SessionIndex",
											"docs": []
										},
										{
											"name": "trie_nodes",
											"type": "145",
											"typeName": "Vec<Vec<u8>>",
											"docs": []
										},
										{
											"name": "validator_count",
											"type": "4",
											"typeName": "ValidatorCount",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "175",
						"type": {
							"path": [
								"pallet_babe",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "InvalidEquivocationProof",
											"fields": [],
											"index": "0",
											"docs": [
												"An equivocation proof provided as part of an equivocation report is invalid."
											]
										},
										{
											"name": "InvalidKeyOwnershipProof",
											"fields": [],
											"index": "1",
											"docs": [
												"A key ownership proof provided as part of an equivocation report is invalid."
											]
										},
										{
											"name": "DuplicateOffenceReport",
											"fields": [],
											"index": "2",
											"docs": [
												"A given equivocation report is valid but already previously reported."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "176",
						"type": {
							"path": [
								"pallet_timestamp",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "set",
											"fields": [
												{
													"name": "now",
													"type": "107",
													"typeName": "T::Moment",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Set the current time.",
												"",
												"This call should be invoked exactly once per block. It will panic at the finalization",
												"phase, if this call hasn't been invoked by that time.",
												"",
												"The timestamp should be greater than the previous one by the amount specified by",
												"`MinimumPeriod`.",
												"",
												"The dispatch origin for this call must be `Inherent`.",
												"",
												"# <weight>",
												"- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
												"- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
												"  `on_finalize`)",
												"- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
												"# </weight>"
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "177",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"0",
									"6",
									"34"
								]
							},
							"docs": []
						}
					},
					{
						"id": "178",
						"type": {
							"path": [
								"pallet_indices",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "claim",
											"fields": [
												{
													"name": "index",
													"type": "4",
													"typeName": "T::AccountIndex",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Assign an previously unassigned index.",
												"",
												"Payment: `Deposit` is reserved from the sender account.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"- `index`: the index to be claimed. This must not be in use.",
												"",
												"Emits `IndexAssigned` if successful.",
												"",
												"# <weight>",
												"- `O(1)`.",
												"- One storage mutation (codec `O(1)`).",
												"- One reserve operation.",
												"- One event.",
												"-------------------",
												"- DB Weight: 1 Read/Write (Accounts)",
												"# </weight>"
											]
										},
										{
											"name": "transfer",
											"fields": [
												{
													"name": "new",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "index",
													"type": "4",
													"typeName": "T::AccountIndex",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Assign an index already owned by the sender to another account. The balance reservation",
												"is effectively transferred to the new account.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"- `index`: the index to be re-assigned. This must be owned by the sender.",
												"- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
												"",
												"Emits `IndexAssigned` if successful.",
												"",
												"# <weight>",
												"- `O(1)`.",
												"- One storage mutation (codec `O(1)`).",
												"- One transfer operation.",
												"- One event.",
												"-------------------",
												"- DB Weight:",
												"   - Reads: Indices Accounts, System Account (recipient)",
												"   - Writes: Indices Accounts, System Account (recipient)",
												"# </weight>"
											]
										},
										{
											"name": "free",
											"fields": [
												{
													"name": "index",
													"type": "4",
													"typeName": "T::AccountIndex",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Free up an index owned by the sender.",
												"",
												"Payment: Any previous deposit placed for the index is unreserved in the sender account.",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must own the index.",
												"",
												"- `index`: the index to be freed. This must be owned by the sender.",
												"",
												"Emits `IndexFreed` if successful.",
												"",
												"# <weight>",
												"- `O(1)`.",
												"- One storage mutation (codec `O(1)`).",
												"- One reserve operation.",
												"- One event.",
												"-------------------",
												"- DB Weight: 1 Read/Write (Accounts)",
												"# </weight>"
											]
										},
										{
											"name": "force_transfer",
											"fields": [
												{
													"name": "new",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "index",
													"type": "4",
													"typeName": "T::AccountIndex",
													"docs": []
												},
												{
													"name": "freeze",
													"type": "34",
													"typeName": "bool",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Force an index to an account. This doesn't require a deposit. If the index is already",
												"held, then any deposit is reimbursed to its current owner.",
												"",
												"The dispatch origin for this call must be _Root_.",
												"",
												"- `index`: the index to be (re-)assigned.",
												"- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
												"- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
												"",
												"Emits `IndexAssigned` if successful.",
												"",
												"# <weight>",
												"- `O(1)`.",
												"- One storage mutation (codec `O(1)`).",
												"- Up to one reserve operation.",
												"- One event.",
												"-------------------",
												"- DB Weight:",
												"   - Reads: Indices Accounts, System Account (original owner)",
												"   - Writes: Indices Accounts, System Account (original owner)",
												"# </weight>"
											]
										},
										{
											"name": "freeze",
											"fields": [
												{
													"name": "index",
													"type": "4",
													"typeName": "T::AccountIndex",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Freeze an index so it will always point to the sender account. This consumes the",
												"deposit.",
												"",
												"The dispatch origin for this call must be _Signed_ and the signing account must have a",
												"non-frozen account `index`.",
												"",
												"- `index`: the index to be frozen in place.",
												"",
												"Emits `IndexFrozen` if successful.",
												"",
												"# <weight>",
												"- `O(1)`.",
												"- One storage mutation (codec `O(1)`).",
												"- Up to one slash operation.",
												"- One event.",
												"-------------------",
												"- DB Weight: 1 Read/Write (Accounts)",
												"# </weight>"
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "179",
						"type": {
							"path": [
								"pallet_indices",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "NotAssigned",
											"fields": [],
											"index": "0",
											"docs": [
												"The index was not already assigned."
											]
										},
										{
											"name": "NotOwner",
											"fields": [],
											"index": "1",
											"docs": [
												"The index is assigned to another account."
											]
										},
										{
											"name": "InUse",
											"fields": [],
											"index": "2",
											"docs": [
												"The index was not available."
											]
										},
										{
											"name": "NotTransfer",
											"fields": [],
											"index": "3",
											"docs": [
												"The source and destination accounts are identical."
											]
										},
										{
											"name": "Permanent",
											"fields": [],
											"index": "4",
											"docs": [
												"The index is permanent and may not be freed/changed."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "180",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"weak_bounded_vec",
								"WeakBoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "181"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "183",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "181",
						"type": {
							"path": [
								"pallet_balances",
								"BalanceLock"
							],
							"params": [
								{
									"name": "Balance",
									"type": "6"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "id",
											"type": "120",
											"typeName": "LockIdentifier",
											"docs": []
										},
										{
											"name": "amount",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "reasons",
											"type": "182",
											"typeName": "Reasons",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "182",
						"type": {
							"path": [
								"pallet_balances",
								"Reasons"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Fee",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Misc",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "All",
											"fields": [],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "183",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "181"
								}
							},
							"docs": []
						}
					},
					{
						"id": "184",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "185"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "186",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "185",
						"type": {
							"path": [
								"pallet_balances",
								"ReserveData"
							],
							"params": [
								{
									"name": "ReserveIdentifier",
									"type": "120"
								},
								{
									"name": "Balance",
									"type": "6"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "id",
											"type": "120",
											"typeName": "ReserveIdentifier",
											"docs": []
										},
										{
											"name": "amount",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "186",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "185"
								}
							},
							"docs": []
						}
					},
					{
						"id": "187",
						"type": {
							"path": [
								"pallet_balances",
								"Releases"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "V1_0_0",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "V2_0_0",
											"fields": [],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "188",
						"type": {
							"path": [
								"pallet_balances",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								},
								{
									"name": "I",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "transfer",
											"fields": [
												{
													"name": "dest",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "value",
													"type": "49",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Transfer some liquid free balance to another account.",
												"",
												"`transfer` will set the `FreeBalance` of the sender and receiver.",
												"If the sender's account is below the existential deposit as a result",
												"of the transfer, the account will be reaped.",
												"",
												"The dispatch origin for this call must be `Signed` by the transactor.",
												"",
												"# <weight>",
												"- Dependent on arguments but not critical, given proper implementations for input config",
												"  types. See related functions below.",
												"- It contains a limited number of reads and writes internally and no complex",
												"  computation.",
												"",
												"Related functions:",
												"",
												"  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
												"  - Transferring balances to accounts that did not exist before will cause",
												"    `T::OnNewAccount::on_new_account` to be called.",
												"  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
												"  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
												"    that the transfer will not kill the origin account.",
												"---------------------------------",
												"- Origin account is already in memory, so no DB operations for them.",
												"# </weight>"
											]
										},
										{
											"name": "set_balance",
											"fields": [
												{
													"name": "who",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "new_free",
													"type": "49",
													"typeName": "T::Balance",
													"docs": []
												},
												{
													"name": "new_reserved",
													"type": "49",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Set the balances of a given account.",
												"",
												"This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
												"also alter the total issuance of the system (`TotalIssuance`) appropriately.",
												"If the new free or reserved balance is below the existential deposit,",
												"it will reset the account nonce (`frame_system::AccountNonce`).",
												"",
												"The dispatch origin for this call is `root`."
											]
										},
										{
											"name": "force_transfer",
											"fields": [
												{
													"name": "source",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "dest",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "value",
													"type": "49",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Exactly as `transfer`, except the origin must be root and the source account may be",
												"specified.",
												"# <weight>",
												"- Same as transfer, but additional read and write because the source account is not",
												"  assumed to be in the overlay.",
												"# </weight>"
											]
										},
										{
											"name": "transfer_keep_alive",
											"fields": [
												{
													"name": "dest",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "value",
													"type": "49",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Same as the [`transfer`] call, but with a check that the transfer will not kill the",
												"origin account.",
												"",
												"99% of the time you want [`transfer`] instead.",
												"",
												"[`transfer`]: struct.Pallet.html#method.transfer"
											]
										},
										{
											"name": "transfer_all",
											"fields": [
												{
													"name": "dest",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "keep_alive",
													"type": "34",
													"typeName": "bool",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Transfer the entire transferable balance from the caller account.",
												"",
												"NOTE: This function only attempts to transfer _transferable_ balances. This means that",
												"any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
												"transferred by this function. To ensure that this function results in a killed account,",
												"you might need to prepare the account by removing any reference counters, storage",
												"deposits, etc...",
												"",
												"The dispatch origin of this call must be Signed.",
												"",
												"- `dest`: The recipient of the transfer.",
												"- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
												"  of the funds the account has, causing the sender account to be killed (false), or",
												"  transfer everything except at least the existential deposit, which will guarantee to",
												"  keep the sender account alive (true). # <weight>",
												"- O(1). Just like transfer, but reading the user's transferable balance first.",
												"  #</weight>"
											]
										},
										{
											"name": "force_unreserve",
											"fields": [
												{
													"name": "who",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "amount",
													"type": "6",
													"typeName": "T::Balance",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Unreserve some balance from a user by force.",
												"",
												"Can only be called by ROOT."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "189",
						"type": {
							"path": [
								"sp_runtime",
								"multiaddress",
								"MultiAddress"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								},
								{
									"name": "AccountIndex",
									"type": "54"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Id",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "AccountId",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Index",
											"fields": [
												{
													"name": null,
													"type": "190",
													"typeName": "AccountIndex",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Raw",
											"fields": [
												{
													"name": null,
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "Address32",
											"fields": [
												{
													"name": null,
													"type": "1",
													"typeName": "[u8; 32]",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "Address20",
											"fields": [
												{
													"name": null,
													"type": "108",
													"typeName": "[u8; 20]",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "190",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"compact": {
									"type": "54"
								}
							},
							"docs": []
						}
					},
					{
						"id": "191",
						"type": {
							"path": [
								"pallet_balances",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								},
								{
									"name": "I",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "VestingBalance",
											"fields": [],
											"index": "0",
											"docs": [
												"Vesting balance too high to send value"
											]
										},
										{
											"name": "LiquidityRestrictions",
											"fields": [],
											"index": "1",
											"docs": [
												"Account liquidity restrictions prevent withdrawal"
											]
										},
										{
											"name": "InsufficientBalance",
											"fields": [],
											"index": "2",
											"docs": [
												"Balance too low to send value"
											]
										},
										{
											"name": "ExistentialDeposit",
											"fields": [],
											"index": "3",
											"docs": [
												"Value too low to create account due to existential deposit"
											]
										},
										{
											"name": "KeepAlive",
											"fields": [],
											"index": "4",
											"docs": [
												"Transfer/payment would kill account"
											]
										},
										{
											"name": "ExistingVestingSchedule",
											"fields": [],
											"index": "5",
											"docs": [
												"A vesting schedule already exists for this account"
											]
										},
										{
											"name": "DeadAccount",
											"fields": [],
											"index": "6",
											"docs": [
												"Beneficiary account must pre-exist"
											]
										},
										{
											"name": "TooManyReserves",
											"fields": [],
											"index": "7",
											"docs": [
												"Number of named reserves exceed MaxReserves"
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "192",
						"type": {
							"path": [
								"sp_arithmetic",
								"fixed_point",
								"FixedU128"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "6",
											"typeName": "u128",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "193",
						"type": {
							"path": [
								"pallet_transaction_payment",
								"Releases"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "V1Ancient",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "V2",
											"fields": [],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "194",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "195"
								}
							},
							"docs": []
						}
					},
					{
						"id": "195",
						"type": {
							"path": [
								"frame_support",
								"weights",
								"WeightToFeeCoefficient"
							],
							"params": [
								{
									"name": "Balance",
									"type": "6"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "coeff_integer",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "coeff_frac",
											"type": "33",
											"typeName": "Perbill",
											"docs": []
										},
										{
											"name": "negative",
											"type": "34",
											"typeName": "bool",
											"docs": []
										},
										{
											"name": "degree",
											"type": "2",
											"typeName": "u8",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "196",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "197"
								}
							},
							"docs": []
						}
					},
					{
						"id": "197",
						"type": {
							"path": [
								"pallet_authorship",
								"UncleEntryItem"
							],
							"params": [
								{
									"name": "BlockNumber",
									"type": "4"
								},
								{
									"name": "Hash",
									"type": "9"
								},
								{
									"name": "Author",
									"type": "0"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "InclusionHeight",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "BlockNumber",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Uncle",
											"fields": [
												{
													"name": null,
													"type": "9",
													"typeName": "Hash",
													"docs": []
												},
												{
													"name": null,
													"type": "64",
													"typeName": "Option<Author>",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "198",
						"type": {
							"path": [
								"pallet_authorship",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "set_uncles",
											"fields": [
												{
													"name": "new_uncles",
													"type": "199",
													"typeName": "Vec<T::Header>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Provide a set of uncles."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "199",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "172"
								}
							},
							"docs": []
						}
					},
					{
						"id": "200",
						"type": {
							"path": [
								"pallet_authorship",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "InvalidUncleParent",
											"fields": [],
											"index": "0",
											"docs": [
												"The uncle parent not in the chain."
											]
										},
										{
											"name": "UnclesAlreadySet",
											"fields": [],
											"index": "1",
											"docs": [
												"Uncles already set in the block."
											]
										},
										{
											"name": "TooManyUncles",
											"fields": [],
											"index": "2",
											"docs": [
												"Too many uncles."
											]
										},
										{
											"name": "GenesisUncle",
											"fields": [],
											"index": "3",
											"docs": [
												"The uncle is genesis."
											]
										},
										{
											"name": "TooHighUncle",
											"fields": [],
											"index": "4",
											"docs": [
												"The uncle is too high in chain."
											]
										},
										{
											"name": "UncleAlreadyIncluded",
											"fields": [],
											"index": "5",
											"docs": [
												"The uncle is already included."
											]
										},
										{
											"name": "OldUncle",
											"fields": [],
											"index": "6",
											"docs": [
												"The uncle isn't recent enough to be included."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "201",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "0"
								}
							},
							"docs": []
						}
					},
					{
						"id": "202",
						"type": {
							"path": [
								"pallet_staking",
								"StakingLedger"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								},
								{
									"name": "Balance",
									"type": "6"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "stash",
											"type": "0",
											"typeName": "AccountId",
											"docs": []
										},
										{
											"name": "total",
											"type": "49",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "active",
											"type": "49",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "unlocking",
											"type": "203",
											"typeName": "BoundedVec<UnlockChunk<Balance>, MaxUnlockingChunks>",
											"docs": []
										},
										{
											"name": "claimed_rewards",
											"type": "206",
											"typeName": "Vec<EraIndex>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "203",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "204"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "205",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "204",
						"type": {
							"path": [
								"pallet_staking",
								"UnlockChunk"
							],
							"params": [
								{
									"name": "Balance",
									"type": "6"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "value",
											"type": "49",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "era",
											"type": "105",
											"typeName": "EraIndex",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "205",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "204"
								}
							},
							"docs": []
						}
					},
					{
						"id": "206",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "4"
								}
							},
							"docs": []
						}
					},
					{
						"id": "207",
						"type": {
							"path": [
								"pallet_staking",
								"RewardDestination"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Staked",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Stash",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "Controller",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "Account",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "AccountId",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "None",
											"fields": [],
											"index": "4",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "208",
						"type": {
							"path": [
								"pallet_staking",
								"Nominations"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "targets",
											"type": "209",
											"typeName": "BoundedVec<T::AccountId, T::MaxNominations>",
											"docs": []
										},
										{
											"name": "submitted_in",
											"type": "4",
											"typeName": "EraIndex",
											"docs": []
										},
										{
											"name": "suppressed",
											"type": "34",
											"typeName": "bool",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "209",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "0"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "201",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "210",
						"type": {
							"path": [
								"pallet_staking",
								"ActiveEraInfo"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "index",
											"type": "4",
											"typeName": "EraIndex",
											"docs": []
										},
										{
											"name": "start",
											"type": "149",
											"typeName": "Option<u64>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "211",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"4",
									"0"
								]
							},
							"docs": []
						}
					},
					{
						"id": "212",
						"type": {
							"path": [
								"pallet_staking",
								"EraRewardPoints"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "total",
											"type": "4",
											"typeName": "RewardPoint",
											"docs": []
										},
										{
											"name": "individual",
											"type": "213",
											"typeName": "BTreeMap<AccountId, RewardPoint>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "213",
						"type": {
							"path": [
								"BTreeMap"
							],
							"params": [
								{
									"name": "K",
									"type": "0"
								},
								{
									"name": "V",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "214",
											"typeName": null,
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "214",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "215"
								}
							},
							"docs": []
						}
					},
					{
						"id": "215",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"0",
									"4"
								]
							},
							"docs": []
						}
					},
					{
						"id": "216",
						"type": {
							"path": [
								"pallet_staking",
								"Forcing"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "NotForcing",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "ForceNew",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "ForceNone",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "ForceAlways",
											"fields": [],
											"index": "3",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "217",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "218"
								}
							},
							"docs": []
						}
					},
					{
						"id": "218",
						"type": {
							"path": [
								"pallet_staking",
								"UnappliedSlash"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								},
								{
									"name": "Balance",
									"type": "6"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "validator",
											"type": "0",
											"typeName": "AccountId",
											"docs": []
										},
										{
											"name": "own",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "others",
											"type": "219",
											"typeName": "Vec<(AccountId, Balance)>",
											"docs": []
										},
										{
											"name": "reporters",
											"type": "201",
											"typeName": "Vec<AccountId>",
											"docs": []
										},
										{
											"name": "payout",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "219",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "220"
								}
							},
							"docs": []
						}
					},
					{
						"id": "220",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"0",
									"6"
								]
							},
							"docs": []
						}
					},
					{
						"id": "221",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"33",
									"6"
								]
							},
							"docs": []
						}
					},
					{
						"id": "222",
						"type": {
							"path": [
								"pallet_staking",
								"slashing",
								"SlashingSpans"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "span_index",
											"type": "4",
											"typeName": "SpanIndex",
											"docs": []
										},
										{
											"name": "last_start",
											"type": "4",
											"typeName": "EraIndex",
											"docs": []
										},
										{
											"name": "last_nonzero_slash",
											"type": "4",
											"typeName": "EraIndex",
											"docs": []
										},
										{
											"name": "prior",
											"type": "206",
											"typeName": "Vec<EraIndex>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "223",
						"type": {
							"path": [
								"pallet_staking",
								"slashing",
								"SpanRecord"
							],
							"params": [
								{
									"name": "Balance",
									"type": "6"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "slashed",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "paid_out",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "224",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "225"
								}
							},
							"docs": []
						}
					},
					{
						"id": "225",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"4",
									"34"
								]
							},
							"docs": []
						}
					},
					{
						"id": "226",
						"type": {
							"path": [
								"pallet_staking",
								"Releases"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "V1_0_0Ancient",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "V2_0_0",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "V3_0_0",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "V4_0_0",
											"fields": [],
											"index": "3",
											"docs": []
										},
										{
											"name": "V5_0_0",
											"fields": [],
											"index": "4",
											"docs": []
										},
										{
											"name": "V6_0_0",
											"fields": [],
											"index": "5",
											"docs": []
										},
										{
											"name": "V7_0_0",
											"fields": [],
											"index": "6",
											"docs": []
										},
										{
											"name": "V8_0_0",
											"fields": [],
											"index": "7",
											"docs": []
										},
										{
											"name": "V9_0_0",
											"fields": [],
											"index": "8",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "227",
						"type": {
							"path": [
								"sp_arithmetic",
								"per_things",
								"Percent"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "2",
											"typeName": "u8",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "228",
						"type": {
							"path": [
								"pallet_staking",
								"pallet",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "bond",
											"fields": [
												{
													"name": "controller",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "value",
													"type": "49",
													"typeName": "BalanceOf<T>",
													"docs": []
												},
												{
													"name": "payee",
													"type": "207",
													"typeName": "RewardDestination<T::AccountId>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Take the origin account as a stash and lock up `value` of its balance. `controller` will",
												"be the account that controls it.",
												"",
												"`value` must be more than the `minimum_balance` specified by `T::Currency`.",
												"",
												"The dispatch origin for this call must be _Signed_ by the stash account.",
												"",
												"Emits `Bonded`.",
												"# <weight>",
												"- Independent of the arguments. Moderate complexity.",
												"- O(1).",
												"- Three extra DB entries.",
												"",
												"NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
												"unless the `origin` falls below _existential deposit_ and gets removed as dust.",
												"------------------",
												"# </weight>"
											]
										},
										{
											"name": "bond_extra",
											"fields": [
												{
													"name": "max_additional",
													"type": "49",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Add some extra amount that have appeared in the stash `free_balance` into the balance up",
												"for staking.",
												"",
												"The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
												"",
												"Use this if there are additional funds in your stash account that you wish to bond.",
												"Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
												"any limitation on the amount that can be added.",
												"",
												"Emits `Bonded`.",
												"",
												"# <weight>",
												"- Independent of the arguments. Insignificant complexity.",
												"- O(1).",
												"# </weight>"
											]
										},
										{
											"name": "unbond",
											"fields": [
												{
													"name": "value",
													"type": "49",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
												"period ends. If this leaves an amount actively bonded less than",
												"T::Currency::minimum_balance(), then it is increased to the full amount.",
												"",
												"The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
												"",
												"Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
												"the funds out of management ready for transfer.",
												"",
												"No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)",
												"can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need",
												"to be called first to remove some of the chunks (if possible).",
												"",
												"If a user encounters the `InsufficientBond` error when calling this extrinsic,",
												"they should call `chill` first in order to free up their bonded funds.",
												"",
												"Emits `Unbonded`.",
												"",
												"See also [`Call::withdraw_unbonded`]."
											]
										},
										{
											"name": "withdraw_unbonded",
											"fields": [
												{
													"name": "num_slashing_spans",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Remove any unlocked chunks from the `unlocking` queue from our management.",
												"",
												"This essentially frees up that balance to be used by the stash account to do",
												"whatever it wants.",
												"",
												"The dispatch origin for this call must be _Signed_ by the controller.",
												"",
												"Emits `Withdrawn`.",
												"",
												"See also [`Call::unbond`].",
												"",
												"# <weight>",
												"Complexity O(S) where S is the number of slashing spans to remove",
												"NOTE: Weight annotation is the kill scenario, we refund otherwise.",
												"# </weight>"
											]
										},
										{
											"name": "validate",
											"fields": [
												{
													"name": "prefs",
													"type": "31",
													"typeName": "ValidatorPrefs",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Declare the desire to validate for the origin controller.",
												"",
												"Effects will be felt at the beginning of the next era.",
												"",
												"The dispatch origin for this call must be _Signed_ by the controller, not the stash."
											]
										},
										{
											"name": "nominate",
											"fields": [
												{
													"name": "targets",
													"type": "229",
													"typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Declare the desire to nominate `targets` for the origin controller.",
												"",
												"Effects will be felt at the beginning of the next era.",
												"",
												"The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
												"",
												"# <weight>",
												"- The transaction's complexity is proportional to the size of `targets` (N)",
												"which is capped at CompactAssignments::LIMIT (T::MaxNominations).",
												"- Both the reads and writes follow a similar pattern.",
												"# </weight>"
											]
										},
										{
											"name": "chill",
											"fields": [],
											"index": "6",
											"docs": [
												"Declare no desire to either validate or nominate.",
												"",
												"Effects will be felt at the beginning of the next era.",
												"",
												"The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
												"",
												"# <weight>",
												"- Independent of the arguments. Insignificant complexity.",
												"- Contains one read.",
												"- Writes are limited to the `origin` account key.",
												"# </weight>"
											]
										},
										{
											"name": "set_payee",
											"fields": [
												{
													"name": "payee",
													"type": "207",
													"typeName": "RewardDestination<T::AccountId>",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"(Re-)set the payment target for a controller.",
												"",
												"Effects will be felt instantly (as soon as this function is completed successfully).",
												"",
												"The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
												"",
												"# <weight>",
												"- Independent of the arguments. Insignificant complexity.",
												"- Contains a limited number of reads.",
												"- Writes are limited to the `origin` account key.",
												"---------",
												"- Weight: O(1)",
												"- DB Weight:",
												"    - Read: Ledger",
												"    - Write: Payee",
												"# </weight>"
											]
										},
										{
											"name": "set_controller",
											"fields": [
												{
													"name": "controller",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												}
											],
											"index": "8",
											"docs": [
												"(Re-)set the controller of a stash.",
												"",
												"Effects will be felt instantly (as soon as this function is completed successfully).",
												"",
												"The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
												"",
												"# <weight>",
												"- Independent of the arguments. Insignificant complexity.",
												"- Contains a limited number of reads.",
												"- Writes are limited to the `origin` account key.",
												"----------",
												"Weight: O(1)",
												"DB Weight:",
												"- Read: Bonded, Ledger New Controller, Ledger Old Controller",
												"- Write: Bonded, Ledger New Controller, Ledger Old Controller",
												"# </weight>"
											]
										},
										{
											"name": "set_validator_count",
											"fields": [
												{
													"name": "new",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "9",
											"docs": [
												"Sets the ideal number of validators.",
												"",
												"The dispatch origin must be Root.",
												"",
												"# <weight>",
												"Weight: O(1)",
												"Write: Validator Count",
												"# </weight>"
											]
										},
										{
											"name": "increase_validator_count",
											"fields": [
												{
													"name": "additional",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "10",
											"docs": [
												"Increments the ideal number of validators.",
												"",
												"The dispatch origin must be Root.",
												"",
												"# <weight>",
												"Same as [`Self::set_validator_count`].",
												"# </weight>"
											]
										},
										{
											"name": "scale_validator_count",
											"fields": [
												{
													"name": "factor",
													"type": "227",
													"typeName": "Percent",
													"docs": []
												}
											],
											"index": "11",
											"docs": [
												"Scale up the ideal number of validators by a factor.",
												"",
												"The dispatch origin must be Root.",
												"",
												"# <weight>",
												"Same as [`Self::set_validator_count`].",
												"# </weight>"
											]
										},
										{
											"name": "force_no_eras",
											"fields": [],
											"index": "12",
											"docs": [
												"Force there to be no new eras indefinitely.",
												"",
												"The dispatch origin must be Root.",
												"",
												"# Warning",
												"",
												"The election process starts multiple blocks before the end of the era.",
												"Thus the election process may be ongoing when this is called. In this case the",
												"election will continue until the next era is triggered.",
												"",
												"# <weight>",
												"- No arguments.",
												"- Weight: O(1)",
												"- Write: ForceEra",
												"# </weight>"
											]
										},
										{
											"name": "force_new_era",
											"fields": [],
											"index": "13",
											"docs": [
												"Force there to be a new era at the end of the next session. After this, it will be",
												"reset to normal (non-forced) behaviour.",
												"",
												"The dispatch origin must be Root.",
												"",
												"# Warning",
												"",
												"The election process starts multiple blocks before the end of the era.",
												"If this is called just before a new era is triggered, the election process may not",
												"have enough blocks to get a result.",
												"",
												"# <weight>",
												"- No arguments.",
												"- Weight: O(1)",
												"- Write ForceEra",
												"# </weight>"
											]
										},
										{
											"name": "set_invulnerables",
											"fields": [
												{
													"name": "invulnerables",
													"type": "201",
													"typeName": "Vec<T::AccountId>",
													"docs": []
												}
											],
											"index": "14",
											"docs": [
												"Set the validators who cannot be slashed (if any).",
												"",
												"The dispatch origin must be Root."
											]
										},
										{
											"name": "force_unstake",
											"fields": [
												{
													"name": "stash",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "num_slashing_spans",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "15",
											"docs": [
												"Force a current staker to become completely unstaked, immediately.",
												"",
												"The dispatch origin must be Root."
											]
										},
										{
											"name": "force_new_era_always",
											"fields": [],
											"index": "16",
											"docs": [
												"Force there to be a new era at the end of sessions indefinitely.",
												"",
												"The dispatch origin must be Root.",
												"",
												"# Warning",
												"",
												"The election process starts multiple blocks before the end of the era.",
												"If this is called just before a new era is triggered, the election process may not",
												"have enough blocks to get a result."
											]
										},
										{
											"name": "cancel_deferred_slash",
											"fields": [
												{
													"name": "era",
													"type": "4",
													"typeName": "EraIndex",
													"docs": []
												},
												{
													"name": "slash_indices",
													"type": "206",
													"typeName": "Vec<u32>",
													"docs": []
												}
											],
											"index": "17",
											"docs": [
												"Cancel enactment of a deferred slash.",
												"",
												"Can be called by the `T::SlashCancelOrigin`.",
												"",
												"Parameters: era and indices of the slashes for that era to kill."
											]
										},
										{
											"name": "payout_stakers",
											"fields": [
												{
													"name": "validator_stash",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "era",
													"type": "4",
													"typeName": "EraIndex",
													"docs": []
												}
											],
											"index": "18",
											"docs": [
												"Pay out all the stakers behind a single validator for a single era.",
												"",
												"- `validator_stash` is the stash account of the validator. Their nominators, up to",
												"  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
												"- `era` may be any era between `[current_era - history_depth; current_era]`.",
												"",
												"The origin of this call must be _Signed_. Any account can call this function, even if",
												"it is not one of the stakers.",
												"",
												"# <weight>",
												"- Time complexity: at most O(MaxNominatorRewardedPerValidator).",
												"- Contains a limited number of reads and writes.",
												"-----------",
												"N is the Number of payouts for the validator (including the validator)",
												"Weight:",
												"- Reward Destination Staked: O(N)",
												"- Reward Destination Controller (Creating): O(N)",
												"",
												"  NOTE: weights are assuming that payouts are made to alive stash account (Staked).",
												"  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.",
												"# </weight>"
											]
										},
										{
											"name": "rebond",
											"fields": [
												{
													"name": "value",
													"type": "49",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "19",
											"docs": [
												"Rebond a portion of the stash scheduled to be unlocked.",
												"",
												"The dispatch origin must be signed by the controller.",
												"",
												"# <weight>",
												"- Time complexity: O(L), where L is unlocking chunks",
												"- Bounded by `MaxUnlockingChunks`.",
												"- Storage changes: Can't increase storage, only decrease it.",
												"# </weight>"
											]
										},
										{
											"name": "set_history_depth",
											"fields": [
												{
													"name": "new_history_depth",
													"type": "105",
													"typeName": "EraIndex",
													"docs": []
												},
												{
													"name": "era_items_deleted",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "20",
											"docs": [
												"Set `HistoryDepth` value. This function will delete any history information",
												"when `HistoryDepth` is reduced.",
												"",
												"Parameters:",
												"- `new_history_depth`: The new history depth you would like to set.",
												"- `era_items_deleted`: The number of items that will be deleted by this dispatch. This",
												"  should report all the storage items that will be deleted by clearing old era history.",
												"  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an",
												"  accurate number.",
												"",
												"Origin must be root.",
												"",
												"# <weight>",
												"- E: Number of history depths removed, i.e. 10 -> 7 = 3",
												"- Weight: O(E)",
												"- DB Weight:",
												"    - Reads: Current Era, History Depth",
												"    - Writes: History Depth",
												"    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs",
												"    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,",
												"      ErasStartSessionIndex",
												"# </weight>"
											]
										},
										{
											"name": "reap_stash",
											"fields": [
												{
													"name": "stash",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "num_slashing_spans",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "21",
											"docs": [
												"Remove all data structures concerning a staker/stash once it is at a state where it can",
												"be considered `dust` in the staking system. The requirements are:",
												"",
												"1. the `total_balance` of the stash is below existential deposit.",
												"2. or, the `ledger.total` of the stash is below existential deposit.",
												"",
												"The former can happen in cases like a slash; the latter when a fully unbonded account",
												"is still receiving staking rewards in `RewardDestination::Staked`.",
												"",
												"It can be called by anyone, as long as `stash` meets the above requirements.",
												"",
												"Refunds the transaction fees upon successful execution."
											]
										},
										{
											"name": "kick",
											"fields": [
												{
													"name": "who",
													"type": "229",
													"typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
													"docs": []
												}
											],
											"index": "22",
											"docs": [
												"Remove the given nominations from the calling validator.",
												"",
												"Effects will be felt at the beginning of the next era.",
												"",
												"The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
												"",
												"- `who`: A list of nominator stash accounts who are nominating this validator which",
												"  should no longer be nominating this validator.",
												"",
												"Note: Making this call only makes sense if you first set the validator preferences to",
												"block any further nominations."
											]
										},
										{
											"name": "set_staking_configs",
											"fields": [
												{
													"name": "min_nominator_bond",
													"type": "230",
													"typeName": "ConfigOp<BalanceOf<T>>",
													"docs": []
												},
												{
													"name": "min_validator_bond",
													"type": "230",
													"typeName": "ConfigOp<BalanceOf<T>>",
													"docs": []
												},
												{
													"name": "max_nominator_count",
													"type": "231",
													"typeName": "ConfigOp<u32>",
													"docs": []
												},
												{
													"name": "max_validator_count",
													"type": "231",
													"typeName": "ConfigOp<u32>",
													"docs": []
												},
												{
													"name": "chill_threshold",
													"type": "232",
													"typeName": "ConfigOp<Percent>",
													"docs": []
												},
												{
													"name": "min_commission",
													"type": "233",
													"typeName": "ConfigOp<Perbill>",
													"docs": []
												}
											],
											"index": "23",
											"docs": [
												"Update the various staking configurations .",
												"",
												"* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
												"* `min_validator_bond`: The minimum active bond needed to be a validator.",
												"* `max_nominator_count`: The max number of users who can be a nominator at once. When",
												"  set to `None`, no limit is enforced.",
												"* `max_validator_count`: The max number of users who can be a validator at once. When",
												"  set to `None`, no limit is enforced.",
												"* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which",
												"  should be filled in order for the `chill_other` transaction to work.",
												"* `min_commission`: The minimum amount of commission that each validators must maintain.",
												"  This is checked only upon calling `validate`. Existing validators are not affected.",
												"",
												"Origin must be Root to call this function.",
												"",
												"NOTE: Existing nominators and validators will not be affected by this update.",
												"to kick people under the new limits, `chill_other` should be called."
											]
										},
										{
											"name": "chill_other",
											"fields": [
												{
													"name": "controller",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "24",
											"docs": [
												"Declare a `controller` to stop participating as either a validator or nominator.",
												"",
												"Effects will be felt at the beginning of the next era.",
												"",
												"The dispatch origin for this call must be _Signed_, but can be called by anyone.",
												"",
												"If the caller is the same as the controller being targeted, then no further checks are",
												"enforced, and this function behaves just like `chill`.",
												"",
												"If the caller is different than the controller being targeted, the following conditions",
												"must be met:",
												"",
												"* `controller` must belong to a nominator who has become non-decodable,",
												"",
												"Or:",
												"",
												"* A `ChillThreshold` must be set and checked which defines how close to the max",
												"  nominators or validators we must reach before users can start chilling one-another.",
												"* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
												"  how close we are to the threshold.",
												"* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
												"  if this is a person that should be chilled because they have not met the threshold",
												"  bond required.",
												"",
												"This can be helpful if bond requirements are updated, and we need to remove old users",
												"who do not satisfy these requirements."
											]
										},
										{
											"name": "force_apply_min_commission",
											"fields": [
												{
													"name": "validator_stash",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "25",
											"docs": [
												"Force a validator to have at least the minimum commission. This will not affect a",
												"validator who already has a commission greater than or equal to the minimum. Any account",
												"can call this."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "229",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "189"
								}
							},
							"docs": []
						}
					},
					{
						"id": "230",
						"type": {
							"path": [
								"pallet_staking",
								"pallet",
								"pallet",
								"ConfigOp"
							],
							"params": [
								{
									"name": "T",
									"type": "6"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Noop",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Set",
											"fields": [
												{
													"name": null,
													"type": "6",
													"typeName": "T",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Remove",
											"fields": [],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "231",
						"type": {
							"path": [
								"pallet_staking",
								"pallet",
								"pallet",
								"ConfigOp"
							],
							"params": [
								{
									"name": "T",
									"type": "4"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Noop",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Set",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "T",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Remove",
											"fields": [],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "232",
						"type": {
							"path": [
								"pallet_staking",
								"pallet",
								"pallet",
								"ConfigOp"
							],
							"params": [
								{
									"name": "T",
									"type": "227"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Noop",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Set",
											"fields": [
												{
													"name": null,
													"type": "227",
													"typeName": "T",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Remove",
											"fields": [],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "233",
						"type": {
							"path": [
								"pallet_staking",
								"pallet",
								"pallet",
								"ConfigOp"
							],
							"params": [
								{
									"name": "T",
									"type": "33"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Noop",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Set",
											"fields": [
												{
													"name": null,
													"type": "33",
													"typeName": "T",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Remove",
											"fields": [],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "234",
						"type": {
							"path": [
								"pallet_staking",
								"pallet",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "NotController",
											"fields": [],
											"index": "0",
											"docs": [
												"Not a controller account."
											]
										},
										{
											"name": "NotStash",
											"fields": [],
											"index": "1",
											"docs": [
												"Not a stash account."
											]
										},
										{
											"name": "AlreadyBonded",
											"fields": [],
											"index": "2",
											"docs": [
												"Stash is already bonded."
											]
										},
										{
											"name": "AlreadyPaired",
											"fields": [],
											"index": "3",
											"docs": [
												"Controller is already paired."
											]
										},
										{
											"name": "EmptyTargets",
											"fields": [],
											"index": "4",
											"docs": [
												"Targets cannot be empty."
											]
										},
										{
											"name": "DuplicateIndex",
											"fields": [],
											"index": "5",
											"docs": [
												"Duplicate index."
											]
										},
										{
											"name": "InvalidSlashIndex",
											"fields": [],
											"index": "6",
											"docs": [
												"Slash record index out of bounds."
											]
										},
										{
											"name": "InsufficientBond",
											"fields": [],
											"index": "7",
											"docs": [
												"Cannot have a validator or nominator role, with value less than the minimum defined by",
												"governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
												"intention, `chill` first to remove one's role as validator/nominator."
											]
										},
										{
											"name": "NoMoreChunks",
											"fields": [],
											"index": "8",
											"docs": [
												"Can not schedule more unlock chunks."
											]
										},
										{
											"name": "NoUnlockChunk",
											"fields": [],
											"index": "9",
											"docs": [
												"Can not rebond without unlocking chunks."
											]
										},
										{
											"name": "FundedTarget",
											"fields": [],
											"index": "10",
											"docs": [
												"Attempting to target a stash that still has funds."
											]
										},
										{
											"name": "InvalidEraToReward",
											"fields": [],
											"index": "11",
											"docs": [
												"Invalid era to reward."
											]
										},
										{
											"name": "InvalidNumberOfNominations",
											"fields": [],
											"index": "12",
											"docs": [
												"Invalid number of nominations."
											]
										},
										{
											"name": "NotSortedAndUnique",
											"fields": [],
											"index": "13",
											"docs": [
												"Items are not sorted and unique."
											]
										},
										{
											"name": "AlreadyClaimed",
											"fields": [],
											"index": "14",
											"docs": [
												"Rewards for this era have already been claimed for this validator."
											]
										},
										{
											"name": "IncorrectHistoryDepth",
											"fields": [],
											"index": "15",
											"docs": [
												"Incorrect previous history depth input provided."
											]
										},
										{
											"name": "IncorrectSlashingSpans",
											"fields": [],
											"index": "16",
											"docs": [
												"Incorrect number of slashing spans provided."
											]
										},
										{
											"name": "BadState",
											"fields": [],
											"index": "17",
											"docs": [
												"Internal state has become somehow corrupted and the operation cannot continue."
											]
										},
										{
											"name": "TooManyTargets",
											"fields": [],
											"index": "18",
											"docs": [
												"Too many nomination targets supplied."
											]
										},
										{
											"name": "BadTarget",
											"fields": [],
											"index": "19",
											"docs": [
												"A nomination target was supplied that was blocked or otherwise not a validator."
											]
										},
										{
											"name": "CannotChillOther",
											"fields": [],
											"index": "20",
											"docs": [
												"The user has enough bond and thus cannot be chilled forcefully by an external person."
											]
										},
										{
											"name": "TooManyNominators",
											"fields": [],
											"index": "21",
											"docs": [
												"There are too many nominators in the system. Governance needs to adjust the staking",
												"settings to keep things safe for the runtime."
											]
										},
										{
											"name": "TooManyValidators",
											"fields": [],
											"index": "22",
											"docs": [
												"There are too many validators in the system. Governance needs to adjust the staking",
												"settings to keep things safe for the runtime."
											]
										},
										{
											"name": "CommissionTooLow",
											"fields": [],
											"index": "23",
											"docs": [
												"Commission is too low. Must be at least `MinCommission`."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "235",
						"type": {
							"path": [
								"sp_staking",
								"offence",
								"OffenceDetails"
							],
							"params": [
								{
									"name": "Reporter",
									"type": "0"
								},
								{
									"name": "Offender",
									"type": "47"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "offender",
											"type": "47",
											"typeName": "Offender",
											"docs": []
										},
										{
											"name": "reporters",
											"type": "201",
											"typeName": "Vec<Reporter>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "236",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"36",
									"10"
								]
							},
							"docs": []
						}
					},
					{
						"id": "237",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "238"
								}
							},
							"docs": []
						}
					},
					{
						"id": "238",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"0",
									"239"
								]
							},
							"docs": []
						}
					},
					{
						"id": "239",
						"type": {
							"path": [
								"westend_runtime",
								"SessionKeys"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "grandpa",
											"type": "41",
											"typeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public",
											"docs": []
										},
										{
											"name": "babe",
											"type": "160",
											"typeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public",
											"docs": []
										},
										{
											"name": "im_online",
											"type": "44",
											"typeName": "<ImOnline as $crate::BoundToRuntimeAppPublic>::Public",
											"docs": []
										},
										{
											"name": "para_validator",
											"type": "240",
											"typeName": "<Initializer as $crate::BoundToRuntimeAppPublic>::Public",
											"docs": []
										},
										{
											"name": "para_assignment",
											"type": "241",
											"typeName": "<ParaSessionInfo as $crate::BoundToRuntimeAppPublic>::Public",
											"docs": []
										},
										{
											"name": "authority_discovery",
											"type": "242",
											"typeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "240",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"validator_app",
								"Public"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "45",
											"typeName": "sr25519::Public",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "241",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"assignment_app",
								"Public"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "45",
											"typeName": "sr25519::Public",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "242",
						"type": {
							"path": [
								"sp_authority_discovery",
								"app",
								"Public"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "45",
											"typeName": "sr25519::Public",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "243",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"244",
									"10"
								]
							},
							"docs": []
						}
					},
					{
						"id": "244",
						"type": {
							"path": [
								"sp_core",
								"crypto",
								"KeyTypeId"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "14",
											"typeName": "[u8; 4]",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "245",
						"type": {
							"path": [
								"pallet_session",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "set_keys",
											"fields": [
												{
													"name": "keys",
													"type": "239",
													"typeName": "T::Keys",
													"docs": []
												},
												{
													"name": "proof",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Sets the session key(s) of the function caller to `keys`.",
												"Allows an account to set its session key prior to becoming a validator.",
												"This doesn't take effect until the next session.",
												"",
												"The dispatch origin of this function must be signed.",
												"",
												"# <weight>",
												"- Complexity: `O(1)`. Actual cost depends on the number of length of",
												"  `T::Keys::key_ids()` which is fixed.",
												"- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
												"- DbWrites: `origin account`, `NextKeys`",
												"- DbReads per key id: `KeyOwner`",
												"- DbWrites per key id: `KeyOwner`",
												"# </weight>"
											]
										},
										{
											"name": "purge_keys",
											"fields": [],
											"index": "1",
											"docs": [
												"Removes any session key(s) of the function caller.",
												"",
												"This doesn't take effect until the next session.",
												"",
												"The dispatch origin of this function must be Signed and the account must be either be",
												"convertible to a validator ID using the chain's typical addressing system (this usually",
												"means being a controller account) or directly convertible into a validator ID (which",
												"usually means being a stash account).",
												"",
												"# <weight>",
												"- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
												"  of `T::Keys::key_ids()` which is fixed.",
												"- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
												"- DbWrites: `NextKeys`, `origin account`",
												"- DbWrites per key id: `KeyOwner`",
												"# </weight>"
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "246",
						"type": {
							"path": [
								"pallet_session",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "InvalidProof",
											"fields": [],
											"index": "0",
											"docs": [
												"Invalid ownership proof."
											]
										},
										{
											"name": "NoAssociatedValidatorId",
											"fields": [],
											"index": "1",
											"docs": [
												"No associated validator ID for account."
											]
										},
										{
											"name": "DuplicatedKey",
											"fields": [],
											"index": "2",
											"docs": [
												"Registered duplicate key."
											]
										},
										{
											"name": "NoKeys",
											"fields": [],
											"index": "3",
											"docs": [
												"No keys are associated with this account."
											]
										},
										{
											"name": "NoAccount",
											"fields": [],
											"index": "4",
											"docs": [
												"Key setting account is not live, so it's impossible to associate keys."
											]
										}
									]
								}
							},
							"docs": [
								"Error for the session pallet."
							]
						}
					},
					{
						"id": "247",
						"type": {
							"path": [
								"pallet_grandpa",
								"StoredState"
							],
							"params": [
								{
									"name": "N",
									"type": "4"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Live",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "PendingPause",
											"fields": [
												{
													"name": "scheduled_at",
													"type": "4",
													"typeName": "N",
													"docs": []
												},
												{
													"name": "delay",
													"type": "4",
													"typeName": "N",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Paused",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "PendingResume",
											"fields": [
												{
													"name": "scheduled_at",
													"type": "4",
													"typeName": "N",
													"docs": []
												},
												{
													"name": "delay",
													"type": "4",
													"typeName": "N",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "248",
						"type": {
							"path": [
								"pallet_grandpa",
								"StoredPendingChange"
							],
							"params": [
								{
									"name": "N",
									"type": "4"
								},
								{
									"name": "Limit",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "scheduled_at",
											"type": "4",
											"typeName": "N",
											"docs": []
										},
										{
											"name": "delay",
											"type": "4",
											"typeName": "N",
											"docs": []
										},
										{
											"name": "next_authorities",
											"type": "249",
											"typeName": "BoundedAuthorityList<Limit>",
											"docs": []
										},
										{
											"name": "forced",
											"type": "250",
											"typeName": "Option<N>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "249",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"weak_bounded_vec",
								"WeakBoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "40"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "39",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "250",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "4"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "251",
						"type": {
							"path": [
								"pallet_grandpa",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "report_equivocation",
											"fields": [
												{
													"name": "equivocation_proof",
													"type": "252",
													"typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
													"docs": []
												},
												{
													"name": "key_owner_proof",
													"type": "174",
													"typeName": "T::KeyOwnerProof",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Report voter equivocation/misbehavior. This method will verify the",
												"equivocation proof and validate the given key ownership proof",
												"against the extracted offender. If both are valid, the offence",
												"will be reported."
											]
										},
										{
											"name": "report_equivocation_unsigned",
											"fields": [
												{
													"name": "equivocation_proof",
													"type": "252",
													"typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
													"docs": []
												},
												{
													"name": "key_owner_proof",
													"type": "174",
													"typeName": "T::KeyOwnerProof",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Report voter equivocation/misbehavior. This method will verify the",
												"equivocation proof and validate the given key ownership proof",
												"against the extracted offender. If both are valid, the offence",
												"will be reported.",
												"",
												"This extrinsic must be called unsigned and it is expected that only",
												"block authors will call it (validated in `ValidateUnsigned`), as such",
												"if the block author is defined it will be defined as the equivocation",
												"reporter."
											]
										},
										{
											"name": "note_stalled",
											"fields": [
												{
													"name": "delay",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												},
												{
													"name": "best_finalized_block_number",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Note that the current authority set of the GRANDPA finality gadget has",
												"stalled. This will trigger a forced authority set change at the beginning",
												"of the next session, to be enacted `delay` blocks after that. The delay",
												"should be high enough to safely assume that the block signalling the",
												"forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters",
												"will start the new authority set using the given finalized block as base.",
												"Only callable by root."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "252",
						"type": {
							"path": [
								"sp_finality_grandpa",
								"EquivocationProof"
							],
							"params": [
								{
									"name": "H",
									"type": "9"
								},
								{
									"name": "N",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "set_id",
											"type": "8",
											"typeName": "SetId",
											"docs": []
										},
										{
											"name": "equivocation",
											"type": "253",
											"typeName": "Equivocation<H, N>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "253",
						"type": {
							"path": [
								"sp_finality_grandpa",
								"Equivocation"
							],
							"params": [
								{
									"name": "H",
									"type": "9"
								},
								{
									"name": "N",
									"type": "4"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Prevote",
											"fields": [
												{
													"name": null,
													"type": "254",
													"typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Precommit",
											"fields": [
												{
													"name": null,
													"type": "259",
													"typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "254",
						"type": {
							"path": [
								"finality_grandpa",
								"Equivocation"
							],
							"params": [
								{
									"name": "Id",
									"type": "41"
								},
								{
									"name": "V",
									"type": "255"
								},
								{
									"name": "S",
									"type": "256"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "round_number",
											"type": "8",
											"typeName": "u64",
											"docs": []
										},
										{
											"name": "identity",
											"type": "41",
											"typeName": "Id",
											"docs": []
										},
										{
											"name": "first",
											"type": "258",
											"typeName": "(V, S)",
											"docs": []
										},
										{
											"name": "second",
											"type": "258",
											"typeName": "(V, S)",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "255",
						"type": {
							"path": [
								"finality_grandpa",
								"Prevote"
							],
							"params": [
								{
									"name": "H",
									"type": "9"
								},
								{
									"name": "N",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "target_hash",
											"type": "9",
											"typeName": "H",
											"docs": []
										},
										{
											"name": "target_number",
											"type": "4",
											"typeName": "N",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "256",
						"type": {
							"path": [
								"sp_finality_grandpa",
								"app",
								"Signature"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "257",
											"typeName": "ed25519::Signature",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "257",
						"type": {
							"path": [
								"sp_core",
								"ed25519",
								"Signature"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "81",
											"typeName": "[u8; 64]",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "258",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"255",
									"256"
								]
							},
							"docs": []
						}
					},
					{
						"id": "259",
						"type": {
							"path": [
								"finality_grandpa",
								"Equivocation"
							],
							"params": [
								{
									"name": "Id",
									"type": "41"
								},
								{
									"name": "V",
									"type": "260"
								},
								{
									"name": "S",
									"type": "256"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "round_number",
											"type": "8",
											"typeName": "u64",
											"docs": []
										},
										{
											"name": "identity",
											"type": "41",
											"typeName": "Id",
											"docs": []
										},
										{
											"name": "first",
											"type": "261",
											"typeName": "(V, S)",
											"docs": []
										},
										{
											"name": "second",
											"type": "261",
											"typeName": "(V, S)",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "260",
						"type": {
							"path": [
								"finality_grandpa",
								"Precommit"
							],
							"params": [
								{
									"name": "H",
									"type": "9"
								},
								{
									"name": "N",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "target_hash",
											"type": "9",
											"typeName": "H",
											"docs": []
										},
										{
											"name": "target_number",
											"type": "4",
											"typeName": "N",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "261",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"260",
									"256"
								]
							},
							"docs": []
						}
					},
					{
						"id": "262",
						"type": {
							"path": [
								"pallet_grandpa",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "PauseFailed",
											"fields": [],
											"index": "0",
											"docs": [
												"Attempt to signal GRANDPA pause when the authority set isn't live",
												"(either paused or already pending pause)."
											]
										},
										{
											"name": "ResumeFailed",
											"fields": [],
											"index": "1",
											"docs": [
												"Attempt to signal GRANDPA resume when the authority set isn't paused",
												"(either live or already pending resume)."
											]
										},
										{
											"name": "ChangePending",
											"fields": [],
											"index": "2",
											"docs": [
												"Attempt to signal GRANDPA change with one already pending."
											]
										},
										{
											"name": "TooSoon",
											"fields": [],
											"index": "3",
											"docs": [
												"Cannot signal forced change so soon after last."
											]
										},
										{
											"name": "InvalidKeyOwnershipProof",
											"fields": [],
											"index": "4",
											"docs": [
												"A key ownership proof provided as part of an equivocation report is invalid."
											]
										},
										{
											"name": "InvalidEquivocationProof",
											"fields": [],
											"index": "5",
											"docs": [
												"An equivocation proof provided as part of an equivocation report is invalid."
											]
										},
										{
											"name": "DuplicateOffenceReport",
											"fields": [],
											"index": "6",
											"docs": [
												"A given equivocation report is valid but already previously reported."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "263",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"weak_bounded_vec",
								"WeakBoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "44"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "264",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "264",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "44"
								}
							},
							"docs": []
						}
					},
					{
						"id": "265",
						"type": {
							"path": [
								"frame_support",
								"traits",
								"misc",
								"WrapperOpaque"
							],
							"params": [
								{
									"name": "T",
									"type": "266"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "105",
											"typeName": null,
											"docs": []
										},
										{
											"name": null,
											"type": "266",
											"typeName": "T",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "266",
						"type": {
							"path": [
								"pallet_im_online",
								"BoundedOpaqueNetworkState"
							],
							"params": [
								{
									"name": "PeerIdEncodingLimit",
									"type": null
								},
								{
									"name": "MultiAddrEncodingLimit",
									"type": null
								},
								{
									"name": "AddressesLimit",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "peer_id",
											"type": "267",
											"typeName": "WeakBoundedVec<u8, PeerIdEncodingLimit>",
											"docs": []
										},
										{
											"name": "external_addresses",
											"type": "268",
											"typeName": "WeakBoundedVec<WeakBoundedVec<u8, MultiAddrEncodingLimit>, AddressesLimit\n>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "267",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"weak_bounded_vec",
								"WeakBoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "2"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "10",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "268",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"weak_bounded_vec",
								"WeakBoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "267"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "269",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "269",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "267"
								}
							},
							"docs": []
						}
					},
					{
						"id": "270",
						"type": {
							"path": [
								"pallet_im_online",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "heartbeat",
											"fields": [
												{
													"name": "heartbeat",
													"type": "271",
													"typeName": "Heartbeat<T::BlockNumber>",
													"docs": []
												},
												{
													"name": "signature",
													"type": "276",
													"typeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"# <weight>",
												"- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is",
												"  length of `heartbeat.network_state.external_address`",
												"  - `O(K)`: decoding of length `K`",
												"  - `O(E)`: decoding/encoding of length `E`",
												"- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
												"  `ReceivedHeartbeats`",
												"- DbWrites: `ReceivedHeartbeats`",
												"# </weight>"
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "271",
						"type": {
							"path": [
								"pallet_im_online",
								"Heartbeat"
							],
							"params": [
								{
									"name": "BlockNumber",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "block_number",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "network_state",
											"type": "272",
											"typeName": "OpaqueNetworkState",
											"docs": []
										},
										{
											"name": "session_index",
											"type": "4",
											"typeName": "SessionIndex",
											"docs": []
										},
										{
											"name": "authority_index",
											"type": "4",
											"typeName": "AuthIndex",
											"docs": []
										},
										{
											"name": "validators_len",
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "272",
						"type": {
							"path": [
								"sp_core",
								"offchain",
								"OpaqueNetworkState"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "peer_id",
											"type": "273",
											"typeName": "OpaquePeerId",
											"docs": []
										},
										{
											"name": "external_addresses",
											"type": "274",
											"typeName": "Vec<OpaqueMultiaddr>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "273",
						"type": {
							"path": [
								"sp_core",
								"OpaquePeerId"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "10",
											"typeName": "Vec<u8>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "274",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "275"
								}
							},
							"docs": []
						}
					},
					{
						"id": "275",
						"type": {
							"path": [
								"sp_core",
								"offchain",
								"OpaqueMultiaddr"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "10",
											"typeName": "Vec<u8>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "276",
						"type": {
							"path": [
								"pallet_im_online",
								"sr25519",
								"app_sr25519",
								"Signature"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "80",
											"typeName": "sr25519::Signature",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "277",
						"type": {
							"path": [
								"pallet_im_online",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "InvalidKey",
											"fields": [],
											"index": "0",
											"docs": [
												"Non existent public key."
											]
										},
										{
											"name": "DuplicatedHeartbeat",
											"fields": [],
											"index": "1",
											"docs": [
												"Duplicated heartbeat."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "278",
						"type": {
							"path": [
								"pallet_utility",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "batch",
											"fields": [
												{
													"name": "calls",
													"type": "279",
													"typeName": "Vec<<T as Config>::Call>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Send a batch of dispatch calls.",
												"",
												"May be called from any origin.",
												"",
												"- `calls`: The calls to be dispatched from the same origin. The number of call must not",
												"  exceed the constant: `batched_calls_limit` (available in constant metadata).",
												"",
												"If origin is root then call are dispatch without checking origin filter. (This includes",
												"bypassing `frame_system::Config::BaseCallFilter`).",
												"",
												"# <weight>",
												"- Complexity: O(C) where C is the number of calls to be batched.",
												"# </weight>",
												"",
												"This will return `Ok` in all circumstances. To determine the success of the batch, an",
												"event is deposited. If a call failed and the batch was interrupted, then the",
												"`BatchInterrupted` event is deposited, along with the number of successful calls made",
												"and the error of the failed call. If all were successful, then the `BatchCompleted`",
												"event is deposited."
											]
										},
										{
											"name": "as_derivative",
											"fields": [
												{
													"name": "index",
													"type": "67",
													"typeName": "u16",
													"docs": []
												},
												{
													"name": "call",
													"type": "280",
													"typeName": "Box<<T as Config>::Call>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Send a call through an indexed pseudonym of the sender.",
												"",
												"Filter from origin are passed along. The call will be dispatched with an origin which",
												"use the same filter as the origin of this call.",
												"",
												"NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
												"because you expect `proxy` to have been used prior in the call stack and you do not want",
												"the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
												"in the Multisig pallet instead.",
												"",
												"NOTE: Prior to version *12, this was called `as_limited_sub`.",
												"",
												"The dispatch origin for this call must be _Signed_."
											]
										},
										{
											"name": "batch_all",
											"fields": [
												{
													"name": "calls",
													"type": "279",
													"typeName": "Vec<<T as Config>::Call>",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Send a batch of dispatch calls and atomically execute them.",
												"The whole transaction will rollback and fail if any of the calls failed.",
												"",
												"May be called from any origin.",
												"",
												"- `calls`: The calls to be dispatched from the same origin. The number of call must not",
												"  exceed the constant: `batched_calls_limit` (available in constant metadata).",
												"",
												"If origin is root then call are dispatch without checking origin filter. (This includes",
												"bypassing `frame_system::Config::BaseCallFilter`).",
												"",
												"# <weight>",
												"- Complexity: O(C) where C is the number of calls to be batched.",
												"# </weight>"
											]
										},
										{
											"name": "dispatch_as",
											"fields": [
												{
													"name": "as_origin",
													"type": "472",
													"typeName": "Box<T::PalletsOrigin>",
													"docs": []
												},
												{
													"name": "call",
													"type": "280",
													"typeName": "Box<<T as Config>::Call>",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Dispatches a function call with a provided origin.",
												"",
												"The dispatch origin for this call must be _Root_.",
												"",
												"# <weight>",
												"- O(1).",
												"- Limited storage reads.",
												"- One DB write (event).",
												"- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
												"# </weight>"
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "279",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "280"
								}
							},
							"docs": []
						}
					},
					{
						"id": "280",
						"type": {
							"path": [
								"westend_runtime",
								"Call"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "System",
											"fields": [
												{
													"name": null,
													"type": "142",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Babe",
											"fields": [
												{
													"name": null,
													"type": "170",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Timestamp",
											"fields": [
												{
													"name": null,
													"type": "176",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "Indices",
											"fields": [
												{
													"name": null,
													"type": "178",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "Balances",
											"fields": [
												{
													"name": null,
													"type": "188",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "Authorship",
											"fields": [
												{
													"name": null,
													"type": "198",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "Staking",
											"fields": [
												{
													"name": null,
													"type": "228",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "Session",
											"fields": [
												{
													"name": null,
													"type": "245",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										},
										{
											"name": "Grandpa",
											"fields": [
												{
													"name": null,
													"type": "251",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
													"docs": []
												}
											],
											"index": "10",
											"docs": []
										},
										{
											"name": "ImOnline",
											"fields": [
												{
													"name": null,
													"type": "270",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>",
													"docs": []
												}
											],
											"index": "11",
											"docs": []
										},
										{
											"name": "Utility",
											"fields": [
												{
													"name": null,
													"type": "278",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
													"docs": []
												}
											],
											"index": "16",
											"docs": []
										},
										{
											"name": "Identity",
											"fields": [
												{
													"name": null,
													"type": "281",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
													"docs": []
												}
											],
											"index": "17",
											"docs": []
										},
										{
											"name": "Recovery",
											"fields": [
												{
													"name": null,
													"type": "321",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Recovery, Runtime>",
													"docs": []
												}
											],
											"index": "18",
											"docs": []
										},
										{
											"name": "Vesting",
											"fields": [
												{
													"name": null,
													"type": "322",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
													"docs": []
												}
											],
											"index": "19",
											"docs": []
										},
										{
											"name": "Scheduler",
											"fields": [
												{
													"name": null,
													"type": "324",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
													"docs": []
												}
											],
											"index": "20",
											"docs": []
										},
										{
											"name": "Preimage",
											"fields": [
												{
													"name": null,
													"type": "327",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
													"docs": []
												}
											],
											"index": "28",
											"docs": []
										},
										{
											"name": "Sudo",
											"fields": [
												{
													"name": null,
													"type": "328",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
													"docs": []
												}
											],
											"index": "21",
											"docs": []
										},
										{
											"name": "Proxy",
											"fields": [
												{
													"name": null,
													"type": "329",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
													"docs": []
												}
											],
											"index": "22",
											"docs": []
										},
										{
											"name": "Multisig",
											"fields": [
												{
													"name": null,
													"type": "331",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
													"docs": []
												}
											],
											"index": "23",
											"docs": []
										},
										{
											"name": "ElectionProviderMultiPhase",
											"fields": [
												{
													"name": null,
													"type": "334",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
													"docs": []
												}
											],
											"index": "24",
											"docs": []
										},
										{
											"name": "BagsList",
											"fields": [
												{
													"name": null,
													"type": "393",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BagsList, Runtime>",
													"docs": []
												}
											],
											"index": "25",
											"docs": []
										},
										{
											"name": "Configuration",
											"fields": [
												{
													"name": null,
													"type": "394",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Configuration, Runtime>",
													"docs": []
												}
											],
											"index": "42",
											"docs": []
										},
										{
											"name": "ParasShared",
											"fields": [
												{
													"name": null,
													"type": "395",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasShared, Runtime>",
													"docs": []
												}
											],
											"index": "43",
											"docs": []
										},
										{
											"name": "ParaInclusion",
											"fields": [
												{
													"name": null,
													"type": "396",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInclusion, Runtime>",
													"docs": []
												}
											],
											"index": "44",
											"docs": []
										},
										{
											"name": "ParaInherent",
											"fields": [
												{
													"name": null,
													"type": "397",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInherent, Runtime>",
													"docs": []
												}
											],
											"index": "45",
											"docs": []
										},
										{
											"name": "Paras",
											"fields": [
												{
													"name": null,
													"type": "423",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Paras, Runtime>",
													"docs": []
												}
											],
											"index": "47",
											"docs": []
										},
										{
											"name": "Initializer",
											"fields": [
												{
													"name": null,
													"type": "425",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Initializer, Runtime>",
													"docs": []
												}
											],
											"index": "48",
											"docs": []
										},
										{
											"name": "Dmp",
											"fields": [
												{
													"name": null,
													"type": "426",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Dmp, Runtime>",
													"docs": []
												}
											],
											"index": "49",
											"docs": []
										},
										{
											"name": "Ump",
											"fields": [
												{
													"name": null,
													"type": "427",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ump, Runtime>",
													"docs": []
												}
											],
											"index": "50",
											"docs": []
										},
										{
											"name": "Hrmp",
											"fields": [
												{
													"name": null,
													"type": "428",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Hrmp, Runtime>",
													"docs": []
												}
											],
											"index": "51",
											"docs": []
										},
										{
											"name": "ParasDisputes",
											"fields": [
												{
													"name": null,
													"type": "429",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasDisputes, Runtime>",
													"docs": []
												}
											],
											"index": "53",
											"docs": []
										},
										{
											"name": "Registrar",
											"fields": [
												{
													"name": null,
													"type": "430",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Registrar, Runtime>",
													"docs": []
												}
											],
											"index": "60",
											"docs": []
										},
										{
											"name": "Slots",
											"fields": [
												{
													"name": null,
													"type": "431",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Slots, Runtime>",
													"docs": []
												}
											],
											"index": "61",
											"docs": []
										},
										{
											"name": "ParasSudoWrapper",
											"fields": [
												{
													"name": null,
													"type": "432",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasSudoWrapper, Runtime>",
													"docs": []
												}
											],
											"index": "62",
											"docs": []
										},
										{
											"name": "Auctions",
											"fields": [
												{
													"name": null,
													"type": "445",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Auctions, Runtime>",
													"docs": []
												}
											],
											"index": "63",
											"docs": []
										},
										{
											"name": "Crowdloan",
											"fields": [
												{
													"name": null,
													"type": "447",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Crowdloan, Runtime>",
													"docs": []
												}
											],
											"index": "64",
											"docs": []
										},
										{
											"name": "AssignedSlots",
											"fields": [
												{
													"name": null,
													"type": "456",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssignedSlots, Runtime>",
													"docs": []
												}
											],
											"index": "65",
											"docs": []
										},
										{
											"name": "XcmPallet",
											"fields": [
												{
													"name": null,
													"type": "458",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmPallet, Runtime>",
													"docs": []
												}
											],
											"index": "99",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "281",
						"type": {
							"path": [
								"pallet_identity",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "add_registrar",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Add a registrar to the system.",
												"",
												"The dispatch origin for this call must be `T::RegistrarOrigin`.",
												"",
												"- `account`: the account of the registrar.",
												"",
												"Emits `RegistrarAdded` if successful.",
												"",
												"# <weight>",
												"- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
												"- One storage mutation (codec `O(R)`).",
												"- One event.",
												"# </weight>"
											]
										},
										{
											"name": "set_identity",
											"fields": [
												{
													"name": "info",
													"type": "282",
													"typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Set an account's identity information and reserve the appropriate deposit.",
												"",
												"If the account already has identity information, the deposit is taken as part payment",
												"for the new deposit.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"- `info`: The identity information.",
												"",
												"Emits `IdentitySet` if successful.",
												"",
												"# <weight>",
												"- `O(X + X' + R)`",
												"  - where `X` additional-field-count (deposit-bounded and code-bounded)",
												"  - where `R` judgements-count (registrar-count-bounded)",
												"- One balance reserve operation.",
												"- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
												"- One event.",
												"# </weight>"
											]
										},
										{
											"name": "set_subs",
											"fields": [
												{
													"name": "subs",
													"type": "316",
													"typeName": "Vec<(T::AccountId, Data)>",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Set the sub-accounts of the sender.",
												"",
												"Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
												"and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must have a registered",
												"identity.",
												"",
												"- `subs`: The identity's (new) sub-accounts.",
												"",
												"# <weight>",
												"- `O(P + S)`",
												"  - where `P` old-subs-count (hard- and deposit-bounded).",
												"  - where `S` subs-count (hard- and deposit-bounded).",
												"- At most one balance operations.",
												"- DB:",
												"  - `P + S` storage mutations (codec complexity `O(1)`)",
												"  - One storage read (codec complexity `O(P)`).",
												"  - One storage write (codec complexity `O(S)`).",
												"  - One storage-exists (`IdentityOf::contains_key`).",
												"# </weight>"
											]
										},
										{
											"name": "clear_identity",
											"fields": [],
											"index": "3",
											"docs": [
												"Clear an account's identity info and all sub-accounts and return all deposits.",
												"",
												"Payment: All reserved balances on the account are returned.",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must have a registered",
												"identity.",
												"",
												"Emits `IdentityCleared` if successful.",
												"",
												"# <weight>",
												"- `O(R + S + X)`",
												"  - where `R` registrar-count (governance-bounded).",
												"  - where `S` subs-count (hard- and deposit-bounded).",
												"  - where `X` additional-field-count (deposit-bounded and code-bounded).",
												"- One balance-unreserve operation.",
												"- `2` storage reads and `S + 2` storage deletions.",
												"- One event.",
												"# </weight>"
											]
										},
										{
											"name": "request_judgement",
											"fields": [
												{
													"name": "reg_index",
													"type": "105",
													"typeName": "RegistrarIndex",
													"docs": []
												},
												{
													"name": "max_fee",
													"type": "49",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Request a judgement from a registrar.",
												"",
												"Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
												"given.",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must have a",
												"registered identity.",
												"",
												"- `reg_index`: The index of the registrar whose judgement is requested.",
												"- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
												"",
												"```nocompile",
												"Self::registrars().get(reg_index).unwrap().fee",
												"```",
												"",
												"Emits `JudgementRequested` if successful.",
												"",
												"# <weight>",
												"- `O(R + X)`.",
												"- One balance-reserve operation.",
												"- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
												"- One event.",
												"# </weight>"
											]
										},
										{
											"name": "cancel_request",
											"fields": [
												{
													"name": "reg_index",
													"type": "4",
													"typeName": "RegistrarIndex",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Cancel a previous request.",
												"",
												"Payment: A previously reserved deposit is returned on success.",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must have a",
												"registered identity.",
												"",
												"- `reg_index`: The index of the registrar whose judgement is no longer requested.",
												"",
												"Emits `JudgementUnrequested` if successful.",
												"",
												"# <weight>",
												"- `O(R + X)`.",
												"- One balance-reserve operation.",
												"- One storage mutation `O(R + X)`.",
												"- One event",
												"# </weight>"
											]
										},
										{
											"name": "set_fee",
											"fields": [
												{
													"name": "index",
													"type": "105",
													"typeName": "RegistrarIndex",
													"docs": []
												},
												{
													"name": "fee",
													"type": "49",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"Set the fee required for a judgement to be requested from a registrar.",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must be the account",
												"of the registrar whose index is `index`.",
												"",
												"- `index`: the index of the registrar whose fee is to be set.",
												"- `fee`: the new fee.",
												"",
												"# <weight>",
												"- `O(R)`.",
												"- One storage mutation `O(R)`.",
												"- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)",
												"# </weight>"
											]
										},
										{
											"name": "set_account_id",
											"fields": [
												{
													"name": "index",
													"type": "105",
													"typeName": "RegistrarIndex",
													"docs": []
												},
												{
													"name": "new",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"Change the account associated with a registrar.",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must be the account",
												"of the registrar whose index is `index`.",
												"",
												"- `index`: the index of the registrar whose fee is to be set.",
												"- `new`: the new account ID.",
												"",
												"# <weight>",
												"- `O(R)`.",
												"- One storage mutation `O(R)`.",
												"- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)",
												"# </weight>"
											]
										},
										{
											"name": "set_fields",
											"fields": [
												{
													"name": "index",
													"type": "105",
													"typeName": "RegistrarIndex",
													"docs": []
												},
												{
													"name": "fields",
													"type": "318",
													"typeName": "IdentityFields",
													"docs": []
												}
											],
											"index": "8",
											"docs": [
												"Set the field information for a registrar.",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must be the account",
												"of the registrar whose index is `index`.",
												"",
												"- `index`: the index of the registrar whose fee is to be set.",
												"- `fields`: the fields that the registrar concerns themselves with.",
												"",
												"# <weight>",
												"- `O(R)`.",
												"- One storage mutation `O(R)`.",
												"- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)",
												"# </weight>"
											]
										},
										{
											"name": "provide_judgement",
											"fields": [
												{
													"name": "reg_index",
													"type": "105",
													"typeName": "RegistrarIndex",
													"docs": []
												},
												{
													"name": "target",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "judgement",
													"type": "320",
													"typeName": "Judgement<BalanceOf<T>>",
													"docs": []
												}
											],
											"index": "9",
											"docs": [
												"Provide a judgement for an account's identity.",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must be the account",
												"of the registrar whose index is `reg_index`.",
												"",
												"- `reg_index`: the index of the registrar whose judgement is being made.",
												"- `target`: the account whose identity the judgement is upon. This must be an account",
												"  with a registered identity.",
												"- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
												"",
												"Emits `JudgementGiven` if successful.",
												"",
												"# <weight>",
												"- `O(R + X)`.",
												"- One balance-transfer operation.",
												"- Up to one account-lookup operation.",
												"- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
												"- One event.",
												"# </weight>"
											]
										},
										{
											"name": "kill_identity",
											"fields": [
												{
													"name": "target",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												}
											],
											"index": "10",
											"docs": [
												"Remove an account's identity and sub-account information and slash the deposits.",
												"",
												"Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
												"`Slash`. Verification request deposits are not returned; they should be cancelled",
												"manually using `cancel_request`.",
												"",
												"The dispatch origin for this call must match `T::ForceOrigin`.",
												"",
												"- `target`: the account whose identity the judgement is upon. This must be an account",
												"  with a registered identity.",
												"",
												"Emits `IdentityKilled` if successful.",
												"",
												"# <weight>",
												"- `O(R + S + X)`.",
												"- One balance-reserve operation.",
												"- `S + 2` storage mutations.",
												"- One event.",
												"# </weight>"
											]
										},
										{
											"name": "add_sub",
											"fields": [
												{
													"name": "sub",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "data",
													"type": "285",
													"typeName": "Data",
													"docs": []
												}
											],
											"index": "11",
											"docs": [
												"Add the given account to the sender's subs.",
												"",
												"Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
												"to the sender.",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must have a registered",
												"sub identity of `sub`."
											]
										},
										{
											"name": "rename_sub",
											"fields": [
												{
													"name": "sub",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "data",
													"type": "285",
													"typeName": "Data",
													"docs": []
												}
											],
											"index": "12",
											"docs": [
												"Alter the associated name of the given sub-account.",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must have a registered",
												"sub identity of `sub`."
											]
										},
										{
											"name": "remove_sub",
											"fields": [
												{
													"name": "sub",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												}
											],
											"index": "13",
											"docs": [
												"Remove the given account from the sender's subs.",
												"",
												"Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
												"to the sender.",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must have a registered",
												"sub identity of `sub`."
											]
										},
										{
											"name": "quit_sub",
											"fields": [],
											"index": "14",
											"docs": [
												"Remove the sender as a sub-account.",
												"",
												"Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
												"to the sender (*not* the original depositor).",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must have a registered",
												"super-identity.",
												"",
												"NOTE: This should not normally be used, but is provided in the case that the non-",
												"controller of an account is maliciously registered as a sub-account."
											]
										}
									]
								}
							},
							"docs": [
								"Identity pallet declaration."
							]
						}
					},
					{
						"id": "282",
						"type": {
							"path": [
								"pallet_identity",
								"types",
								"IdentityInfo"
							],
							"params": [
								{
									"name": "FieldLimit",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "additional",
											"type": "283",
											"typeName": "BoundedVec<(Data, Data), FieldLimit>",
											"docs": []
										},
										{
											"name": "display",
											"type": "285",
											"typeName": "Data",
											"docs": []
										},
										{
											"name": "legal",
											"type": "285",
											"typeName": "Data",
											"docs": []
										},
										{
											"name": "web",
											"type": "285",
											"typeName": "Data",
											"docs": []
										},
										{
											"name": "riot",
											"type": "285",
											"typeName": "Data",
											"docs": []
										},
										{
											"name": "email",
											"type": "285",
											"typeName": "Data",
											"docs": []
										},
										{
											"name": "pgp_fingerprint",
											"type": "315",
											"typeName": "Option<[u8; 20]>",
											"docs": []
										},
										{
											"name": "image",
											"type": "285",
											"typeName": "Data",
											"docs": []
										},
										{
											"name": "twitter",
											"type": "285",
											"typeName": "Data",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "283",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "284"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "314",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "284",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"285",
									"285"
								]
							},
							"docs": []
						}
					},
					{
						"id": "285",
						"type": {
							"path": [
								"pallet_identity",
								"types",
								"Data"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Raw0",
											"fields": [
												{
													"name": null,
													"type": "286",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Raw1",
											"fields": [
												{
													"name": null,
													"type": "287",
													"typeName": null,
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "Raw2",
											"fields": [
												{
													"name": null,
													"type": "288",
													"typeName": null,
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "Raw3",
											"fields": [
												{
													"name": null,
													"type": "289",
													"typeName": null,
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "Raw4",
											"fields": [
												{
													"name": null,
													"type": "14",
													"typeName": null,
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "Raw5",
											"fields": [
												{
													"name": null,
													"type": "290",
													"typeName": null,
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "Raw6",
											"fields": [
												{
													"name": null,
													"type": "291",
													"typeName": null,
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "Raw7",
											"fields": [
												{
													"name": null,
													"type": "292",
													"typeName": null,
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										},
										{
											"name": "Raw8",
											"fields": [
												{
													"name": null,
													"type": "120",
													"typeName": null,
													"docs": []
												}
											],
											"index": "9",
											"docs": []
										},
										{
											"name": "Raw9",
											"fields": [
												{
													"name": null,
													"type": "293",
													"typeName": null,
													"docs": []
												}
											],
											"index": "10",
											"docs": []
										},
										{
											"name": "Raw10",
											"fields": [
												{
													"name": null,
													"type": "294",
													"typeName": null,
													"docs": []
												}
											],
											"index": "11",
											"docs": []
										},
										{
											"name": "Raw11",
											"fields": [
												{
													"name": null,
													"type": "295",
													"typeName": null,
													"docs": []
												}
											],
											"index": "12",
											"docs": []
										},
										{
											"name": "Raw12",
											"fields": [
												{
													"name": null,
													"type": "296",
													"typeName": null,
													"docs": []
												}
											],
											"index": "13",
											"docs": []
										},
										{
											"name": "Raw13",
											"fields": [
												{
													"name": null,
													"type": "297",
													"typeName": null,
													"docs": []
												}
											],
											"index": "14",
											"docs": []
										},
										{
											"name": "Raw14",
											"fields": [
												{
													"name": null,
													"type": "298",
													"typeName": null,
													"docs": []
												}
											],
											"index": "15",
											"docs": []
										},
										{
											"name": "Raw15",
											"fields": [
												{
													"name": null,
													"type": "299",
													"typeName": null,
													"docs": []
												}
											],
											"index": "16",
											"docs": []
										},
										{
											"name": "Raw16",
											"fields": [
												{
													"name": null,
													"type": "36",
													"typeName": null,
													"docs": []
												}
											],
											"index": "17",
											"docs": []
										},
										{
											"name": "Raw17",
											"fields": [
												{
													"name": null,
													"type": "300",
													"typeName": null,
													"docs": []
												}
											],
											"index": "18",
											"docs": []
										},
										{
											"name": "Raw18",
											"fields": [
												{
													"name": null,
													"type": "301",
													"typeName": null,
													"docs": []
												}
											],
											"index": "19",
											"docs": []
										},
										{
											"name": "Raw19",
											"fields": [
												{
													"name": null,
													"type": "302",
													"typeName": null,
													"docs": []
												}
											],
											"index": "20",
											"docs": []
										},
										{
											"name": "Raw20",
											"fields": [
												{
													"name": null,
													"type": "108",
													"typeName": null,
													"docs": []
												}
											],
											"index": "21",
											"docs": []
										},
										{
											"name": "Raw21",
											"fields": [
												{
													"name": null,
													"type": "303",
													"typeName": null,
													"docs": []
												}
											],
											"index": "22",
											"docs": []
										},
										{
											"name": "Raw22",
											"fields": [
												{
													"name": null,
													"type": "304",
													"typeName": null,
													"docs": []
												}
											],
											"index": "23",
											"docs": []
										},
										{
											"name": "Raw23",
											"fields": [
												{
													"name": null,
													"type": "305",
													"typeName": null,
													"docs": []
												}
											],
											"index": "24",
											"docs": []
										},
										{
											"name": "Raw24",
											"fields": [
												{
													"name": null,
													"type": "306",
													"typeName": null,
													"docs": []
												}
											],
											"index": "25",
											"docs": []
										},
										{
											"name": "Raw25",
											"fields": [
												{
													"name": null,
													"type": "307",
													"typeName": null,
													"docs": []
												}
											],
											"index": "26",
											"docs": []
										},
										{
											"name": "Raw26",
											"fields": [
												{
													"name": null,
													"type": "308",
													"typeName": null,
													"docs": []
												}
											],
											"index": "27",
											"docs": []
										},
										{
											"name": "Raw27",
											"fields": [
												{
													"name": null,
													"type": "309",
													"typeName": null,
													"docs": []
												}
											],
											"index": "28",
											"docs": []
										},
										{
											"name": "Raw28",
											"fields": [
												{
													"name": null,
													"type": "310",
													"typeName": null,
													"docs": []
												}
											],
											"index": "29",
											"docs": []
										},
										{
											"name": "Raw29",
											"fields": [
												{
													"name": null,
													"type": "311",
													"typeName": null,
													"docs": []
												}
											],
											"index": "30",
											"docs": []
										},
										{
											"name": "Raw30",
											"fields": [
												{
													"name": null,
													"type": "312",
													"typeName": null,
													"docs": []
												}
											],
											"index": "31",
											"docs": []
										},
										{
											"name": "Raw31",
											"fields": [
												{
													"name": null,
													"type": "313",
													"typeName": null,
													"docs": []
												}
											],
											"index": "32",
											"docs": []
										},
										{
											"name": "Raw32",
											"fields": [
												{
													"name": null,
													"type": "1",
													"typeName": null,
													"docs": []
												}
											],
											"index": "33",
											"docs": []
										},
										{
											"name": "BlakeTwo256",
											"fields": [
												{
													"name": null,
													"type": "1",
													"typeName": null,
													"docs": []
												}
											],
											"index": "34",
											"docs": []
										},
										{
											"name": "Sha256",
											"fields": [
												{
													"name": null,
													"type": "1",
													"typeName": null,
													"docs": []
												}
											],
											"index": "35",
											"docs": []
										},
										{
											"name": "Keccak256",
											"fields": [
												{
													"name": null,
													"type": "1",
													"typeName": null,
													"docs": []
												}
											],
											"index": "36",
											"docs": []
										},
										{
											"name": "ShaThree256",
											"fields": [
												{
													"name": null,
													"type": "1",
													"typeName": null,
													"docs": []
												}
											],
											"index": "37",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "286",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "0",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "287",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "1",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "288",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "2",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "289",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "3",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "290",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "5",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "291",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "6",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "292",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "7",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "293",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "9",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "294",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "10",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "295",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "11",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "296",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "12",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "297",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "13",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "298",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "14",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "299",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "15",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "300",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "17",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "301",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "18",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "302",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "19",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "303",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "21",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "304",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "22",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "305",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "23",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "306",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "24",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "307",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "25",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "308",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "26",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "309",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "27",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "310",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "28",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "311",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "29",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "312",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "30",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "313",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "31",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "314",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "284"
								}
							},
							"docs": []
						}
					},
					{
						"id": "315",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "108"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "108",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "316",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "317"
								}
							},
							"docs": []
						}
					},
					{
						"id": "317",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"0",
									"285"
								]
							},
							"docs": []
						}
					},
					{
						"id": "318",
						"type": {
							"path": [
								"pallet_identity",
								"types",
								"BitFlags"
							],
							"params": [
								{
									"name": "T",
									"type": "319"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "8",
											"typeName": "IdentityField",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "319",
						"type": {
							"path": [
								"pallet_identity",
								"types",
								"IdentityField"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Display",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "Legal",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "Web",
											"fields": [],
											"index": "4",
											"docs": []
										},
										{
											"name": "Riot",
											"fields": [],
											"index": "8",
											"docs": []
										},
										{
											"name": "Email",
											"fields": [],
											"index": "16",
											"docs": []
										},
										{
											"name": "PgpFingerprint",
											"fields": [],
											"index": "32",
											"docs": []
										},
										{
											"name": "Image",
											"fields": [],
											"index": "64",
											"docs": []
										},
										{
											"name": "Twitter",
											"fields": [],
											"index": "128",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "320",
						"type": {
							"path": [
								"pallet_identity",
								"types",
								"Judgement"
							],
							"params": [
								{
									"name": "Balance",
									"type": "6"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Unknown",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "FeePaid",
											"fields": [
												{
													"name": null,
													"type": "6",
													"typeName": "Balance",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Reasonable",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "KnownGood",
											"fields": [],
											"index": "3",
											"docs": []
										},
										{
											"name": "OutOfDate",
											"fields": [],
											"index": "4",
											"docs": []
										},
										{
											"name": "LowQuality",
											"fields": [],
											"index": "5",
											"docs": []
										},
										{
											"name": "Erroneous",
											"fields": [],
											"index": "6",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "321",
						"type": {
							"path": [
								"pallet_recovery",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "as_recovered",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "call",
													"type": "280",
													"typeName": "Box<<T as Config>::Call>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Send a call through a recovered account.",
												"",
												"The dispatch origin for this call must be _Signed_ and registered to",
												"be able to make calls on behalf of the recovered account.",
												"",
												"Parameters:",
												"- `account`: The recovered account you want to make a call on-behalf-of.",
												"- `call`: The call you want to make with the recovered account.",
												"",
												"# <weight>",
												"- The weight of the `call` + 10,000.",
												"- One storage lookup to check account is recovered by `who`. O(1)",
												"# </weight>"
											]
										},
										{
											"name": "set_recovered",
											"fields": [
												{
													"name": "lost",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "rescuer",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Allow ROOT to bypass the recovery process and set an a rescuer account",
												"for a lost account directly.",
												"",
												"The dispatch origin for this call must be _ROOT_.",
												"",
												"Parameters:",
												"- `lost`: The \"lost account\" to be recovered.",
												"- `rescuer`: The \"rescuer account\" which can call as the lost account.",
												"",
												"# <weight>",
												"- One storage write O(1)",
												"- One event",
												"# </weight>"
											]
										},
										{
											"name": "create_recovery",
											"fields": [
												{
													"name": "friends",
													"type": "201",
													"typeName": "Vec<T::AccountId>",
													"docs": []
												},
												{
													"name": "threshold",
													"type": "67",
													"typeName": "u16",
													"docs": []
												},
												{
													"name": "delay_period",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Create a recovery configuration for your account. This makes your account recoverable.",
												"",
												"Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance",
												"will be reserved for storing the recovery configuration. This deposit is returned",
												"in full when the user calls `remove_recovery`.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"Parameters:",
												"- `friends`: A list of friends you trust to vouch for recovery attempts. Should be",
												"  ordered and contain no duplicate values.",
												"- `threshold`: The number of friends that must vouch for a recovery attempt before the",
												"  account can be recovered. Should be less than or equal to the length of the list of",
												"  friends.",
												"- `delay_period`: The number of blocks after a recovery attempt is initialized that",
												"  needs to pass before the account can be recovered.",
												"",
												"# <weight>",
												"- Key: F (len of friends)",
												"- One storage read to check that account is not already recoverable. O(1).",
												"- A check that the friends list is sorted and unique. O(F)",
												"- One currency reserve operation. O(X)",
												"- One storage write. O(1). Codec O(F).",
												"- One event.",
												"",
												"Total Complexity: O(F + X)",
												"# </weight>"
											]
										},
										{
											"name": "initiate_recovery",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Initiate the process for recovering a recoverable account.",
												"",
												"Payment: `RecoveryDeposit` balance will be reserved for initiating the",
												"recovery process. This deposit will always be repatriated to the account",
												"trying to be recovered. See `close_recovery`.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"Parameters:",
												"- `account`: The lost account that you want to recover. This account needs to be",
												"  recoverable (i.e. have a recovery configuration).",
												"",
												"# <weight>",
												"- One storage read to check that account is recoverable. O(F)",
												"- One storage read to check that this recovery process hasn't already started. O(1)",
												"- One currency reserve operation. O(X)",
												"- One storage read to get the current block number. O(1)",
												"- One storage write. O(1).",
												"- One event.",
												"",
												"Total Complexity: O(F + X)",
												"# </weight>"
											]
										},
										{
											"name": "vouch_recovery",
											"fields": [
												{
													"name": "lost",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "rescuer",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Allow a \"friend\" of a recoverable account to vouch for an active recovery",
												"process for that account.",
												"",
												"The dispatch origin for this call must be _Signed_ and must be a \"friend\"",
												"for the recoverable account.",
												"",
												"Parameters:",
												"- `lost`: The lost account that you want to recover.",
												"- `rescuer`: The account trying to rescue the lost account that you want to vouch for.",
												"",
												"The combination of these two parameters must point to an active recovery",
												"process.",
												"",
												"# <weight>",
												"Key: F (len of friends in config), V (len of vouching friends)",
												"- One storage read to get the recovery configuration. O(1), Codec O(F)",
												"- One storage read to get the active recovery process. O(1), Codec O(V)",
												"- One binary search to confirm caller is a friend. O(logF)",
												"- One binary search to confirm caller has not already vouched. O(logV)",
												"- One storage write. O(1), Codec O(V).",
												"- One event.",
												"",
												"Total Complexity: O(F + logF + V + logV)",
												"# </weight>"
											]
										},
										{
											"name": "claim_recovery",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Allow a successful rescuer to claim their recovered account.",
												"",
												"The dispatch origin for this call must be _Signed_ and must be a \"rescuer\"",
												"who has successfully completed the account recovery process: collected",
												"`threshold` or more vouches, waited `delay_period` blocks since initiation.",
												"",
												"Parameters:",
												"- `account`: The lost account that you want to claim has been successfully recovered by",
												"  you.",
												"",
												"# <weight>",
												"Key: F (len of friends in config), V (len of vouching friends)",
												"- One storage read to get the recovery configuration. O(1), Codec O(F)",
												"- One storage read to get the active recovery process. O(1), Codec O(V)",
												"- One storage read to get the current block number. O(1)",
												"- One storage write. O(1), Codec O(V).",
												"- One event.",
												"",
												"Total Complexity: O(F + V)",
												"# </weight>"
											]
										},
										{
											"name": "close_recovery",
											"fields": [
												{
													"name": "rescuer",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"As the controller of a recoverable account, close an active recovery",
												"process for your account.",
												"",
												"Payment: By calling this function, the recoverable account will receive",
												"the recovery deposit `RecoveryDeposit` placed by the rescuer.",
												"",
												"The dispatch origin for this call must be _Signed_ and must be a",
												"recoverable account with an active recovery process for it.",
												"",
												"Parameters:",
												"- `rescuer`: The account trying to rescue this recoverable account.",
												"",
												"# <weight>",
												"Key: V (len of vouching friends)",
												"- One storage read/remove to get the active recovery process. O(1), Codec O(V)",
												"- One balance call to repatriate reserved. O(X)",
												"- One event.",
												"",
												"Total Complexity: O(V + X)",
												"# </weight>"
											]
										},
										{
											"name": "remove_recovery",
											"fields": [],
											"index": "7",
											"docs": [
												"Remove the recovery process for your account. Recovered accounts are still accessible.",
												"",
												"NOTE: The user must make sure to call `close_recovery` on all active",
												"recovery attempts before calling this function else it will fail.",
												"",
												"Payment: By calling this function the recoverable account will unreserve",
												"their recovery configuration deposit.",
												"(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)",
												"",
												"The dispatch origin for this call must be _Signed_ and must be a",
												"recoverable account (i.e. has a recovery configuration).",
												"",
												"# <weight>",
												"Key: F (len of friends)",
												"- One storage read to get the prefix iterator for active recoveries. O(1)",
												"- One storage read/remove to get the recovery configuration. O(1), Codec O(F)",
												"- One balance call to unreserved. O(X)",
												"- One event.",
												"",
												"Total Complexity: O(F + X)",
												"# </weight>"
											]
										},
										{
											"name": "cancel_recovered",
											"fields": [
												{
													"name": "account",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "8",
											"docs": [
												"Cancel the ability to use `as_recovered` for `account`.",
												"",
												"The dispatch origin for this call must be _Signed_ and registered to",
												"be able to make calls on behalf of the recovered account.",
												"",
												"Parameters:",
												"- `account`: The recovered account you are able to call on-behalf-of.",
												"",
												"# <weight>",
												"- One storage mutation to check account is recovered by `who`. O(1)",
												"# </weight>"
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "322",
						"type": {
							"path": [
								"pallet_vesting",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "vest",
											"fields": [],
											"index": "0",
											"docs": [
												"Unlock any vested funds of the sender account.",
												"",
												"The dispatch origin for this call must be _Signed_ and the sender must have funds still",
												"locked under this pallet.",
												"",
												"Emits either `VestingCompleted` or `VestingUpdated`.",
												"",
												"# <weight>",
												"- `O(1)`.",
												"- DbWeight: 2 Reads, 2 Writes",
												"    - Reads: Vesting Storage, Balances Locks, [Sender Account]",
												"    - Writes: Vesting Storage, Balances Locks, [Sender Account]",
												"# </weight>"
											]
										},
										{
											"name": "vest_other",
											"fields": [
												{
													"name": "target",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Unlock any vested funds of a `target` account.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"- `target`: The account whose vested funds should be unlocked. Must have funds still",
												"locked under this pallet.",
												"",
												"Emits either `VestingCompleted` or `VestingUpdated`.",
												"",
												"# <weight>",
												"- `O(1)`.",
												"- DbWeight: 3 Reads, 3 Writes",
												"    - Reads: Vesting Storage, Balances Locks, Target Account",
												"    - Writes: Vesting Storage, Balances Locks, Target Account",
												"# </weight>"
											]
										},
										{
											"name": "vested_transfer",
											"fields": [
												{
													"name": "target",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "schedule",
													"type": "323",
													"typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Create a vested transfer.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"- `target`: The account receiving the vested funds.",
												"- `schedule`: The vesting schedule attached to the transfer.",
												"",
												"Emits `VestingCreated`.",
												"",
												"NOTE: This will unlock all schedules through the current block.",
												"",
												"# <weight>",
												"- `O(1)`.",
												"- DbWeight: 3 Reads, 3 Writes",
												"    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
												"    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
												"# </weight>"
											]
										},
										{
											"name": "force_vested_transfer",
											"fields": [
												{
													"name": "source",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "target",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "schedule",
													"type": "323",
													"typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Force a vested transfer.",
												"",
												"The dispatch origin for this call must be _Root_.",
												"",
												"- `source`: The account whose funds should be transferred.",
												"- `target`: The account that should be transferred the vested funds.",
												"- `schedule`: The vesting schedule attached to the transfer.",
												"",
												"Emits `VestingCreated`.",
												"",
												"NOTE: This will unlock all schedules through the current block.",
												"",
												"# <weight>",
												"- `O(1)`.",
												"- DbWeight: 4 Reads, 4 Writes",
												"    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account",
												"    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account",
												"# </weight>"
											]
										},
										{
											"name": "merge_schedules",
											"fields": [
												{
													"name": "schedule1_index",
													"type": "4",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "schedule2_index",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
												"the highest possible start and end blocks. If both schedules have already started the",
												"current block will be used as the schedule start; with the caveat that if one schedule",
												"is finished by the current block, the other will be treated as the new merged schedule,",
												"unmodified.",
												"",
												"NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
												"NOTE: This will unlock all schedules through the current block prior to merging.",
												"NOTE: If both schedules have ended by the current block, no new schedule will be created",
												"and both will be removed.",
												"",
												"Merged schedule attributes:",
												"- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
												"  current_block)`.",
												"- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
												"- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"- `schedule1_index`: index of the first schedule to merge.",
												"- `schedule2_index`: index of the second schedule to merge."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "323",
						"type": {
							"path": [
								"pallet_vesting",
								"vesting_info",
								"VestingInfo"
							],
							"params": [
								{
									"name": "Balance",
									"type": "6"
								},
								{
									"name": "BlockNumber",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "locked",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "per_block",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "starting_block",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "324",
						"type": {
							"path": [
								"pallet_scheduler",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "schedule",
											"fields": [
												{
													"name": "when",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												},
												{
													"name": "maybe_periodic",
													"type": "325",
													"typeName": "Option<schedule::Period<T::BlockNumber>>",
													"docs": []
												},
												{
													"name": "priority",
													"type": "2",
													"typeName": "schedule::Priority",
													"docs": []
												},
												{
													"name": "call",
													"type": "326",
													"typeName": "Box<CallOrHashOf<T>>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Anonymously schedule a task."
											]
										},
										{
											"name": "cancel",
											"fields": [
												{
													"name": "when",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												},
												{
													"name": "index",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Cancel an anonymously scheduled task."
											]
										},
										{
											"name": "schedule_named",
											"fields": [
												{
													"name": "id",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												},
												{
													"name": "when",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												},
												{
													"name": "maybe_periodic",
													"type": "325",
													"typeName": "Option<schedule::Period<T::BlockNumber>>",
													"docs": []
												},
												{
													"name": "priority",
													"type": "2",
													"typeName": "schedule::Priority",
													"docs": []
												},
												{
													"name": "call",
													"type": "326",
													"typeName": "Box<CallOrHashOf<T>>",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Schedule a named task."
											]
										},
										{
											"name": "cancel_named",
											"fields": [
												{
													"name": "id",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Cancel a named scheduled task."
											]
										},
										{
											"name": "schedule_after",
											"fields": [
												{
													"name": "after",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												},
												{
													"name": "maybe_periodic",
													"type": "325",
													"typeName": "Option<schedule::Period<T::BlockNumber>>",
													"docs": []
												},
												{
													"name": "priority",
													"type": "2",
													"typeName": "schedule::Priority",
													"docs": []
												},
												{
													"name": "call",
													"type": "326",
													"typeName": "Box<CallOrHashOf<T>>",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Anonymously schedule a task after a delay.",
												"",
												"# <weight>",
												"Same as [`schedule`].",
												"# </weight>"
											]
										},
										{
											"name": "schedule_named_after",
											"fields": [
												{
													"name": "id",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												},
												{
													"name": "after",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												},
												{
													"name": "maybe_periodic",
													"type": "325",
													"typeName": "Option<schedule::Period<T::BlockNumber>>",
													"docs": []
												},
												{
													"name": "priority",
													"type": "2",
													"typeName": "schedule::Priority",
													"docs": []
												},
												{
													"name": "call",
													"type": "326",
													"typeName": "Box<CallOrHashOf<T>>",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Schedule a named task after a delay.",
												"",
												"# <weight>",
												"Same as [`schedule_named`](Self::schedule_named).",
												"# </weight>"
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "325",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "59"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "59",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "326",
						"type": {
							"path": [
								"frame_support",
								"traits",
								"schedule",
								"MaybeHashed"
							],
							"params": [
								{
									"name": "T",
									"type": "280"
								},
								{
									"name": "Hash",
									"type": "9"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Value",
											"fields": [
												{
													"name": null,
													"type": "280",
													"typeName": "T",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Hash",
											"fields": [
												{
													"name": null,
													"type": "9",
													"typeName": "Hash",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "327",
						"type": {
							"path": [
								"pallet_preimage",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "note_preimage",
											"fields": [
												{
													"name": "bytes",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Register a preimage on-chain.",
												"",
												"If the preimage was previously requested, no fees or deposits are taken for providing",
												"the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
											]
										},
										{
											"name": "unnote_preimage",
											"fields": [
												{
													"name": "hash",
													"type": "9",
													"typeName": "T::Hash",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Clear an unrequested preimage from the runtime storage."
											]
										},
										{
											"name": "request_preimage",
											"fields": [
												{
													"name": "hash",
													"type": "9",
													"typeName": "T::Hash",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Request a preimage be uploaded to the chain without paying any fees or deposits.",
												"",
												"If the preimage requests has already been provided on-chain, we unreserve any deposit",
												"a user may have paid, and take the control of the preimage out of their hands."
											]
										},
										{
											"name": "unrequest_preimage",
											"fields": [
												{
													"name": "hash",
													"type": "9",
													"typeName": "T::Hash",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Clear a previously made request for a preimage.",
												"",
												"NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "328",
						"type": {
							"path": [
								"pallet_sudo",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "sudo",
											"fields": [
												{
													"name": "call",
													"type": "280",
													"typeName": "Box<<T as Config>::Call>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Authenticates the sudo key and dispatches a function call with `Root` origin.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"# <weight>",
												"- O(1).",
												"- Limited storage reads.",
												"- One DB write (event).",
												"- Weight of derivative `call` execution + 10,000.",
												"# </weight>"
											]
										},
										{
											"name": "sudo_unchecked_weight",
											"fields": [
												{
													"name": "call",
													"type": "280",
													"typeName": "Box<<T as Config>::Call>",
													"docs": []
												},
												{
													"name": "weight",
													"type": "8",
													"typeName": "Weight",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Authenticates the sudo key and dispatches a function call with `Root` origin.",
												"This function does not check the weight of the call, and instead allows the",
												"Sudo user to specify the weight of the call.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"# <weight>",
												"- O(1).",
												"- The weight of this call is defined by the caller.",
												"# </weight>"
											]
										},
										{
											"name": "set_key",
											"fields": [
												{
													"name": "new",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
												"key.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"# <weight>",
												"- O(1).",
												"- Limited storage reads.",
												"- One DB change.",
												"# </weight>"
											]
										},
										{
											"name": "sudo_as",
											"fields": [
												{
													"name": "who",
													"type": "189",
													"typeName": "<T::Lookup as StaticLookup>::Source",
													"docs": []
												},
												{
													"name": "call",
													"type": "280",
													"typeName": "Box<<T as Config>::Call>",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Authenticates the sudo key and dispatches a function call with `Signed` origin from",
												"a given account.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"# <weight>",
												"- O(1).",
												"- Limited storage reads.",
												"- One DB write (event).",
												"- Weight of derivative `call` execution + 10,000.",
												"# </weight>"
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "329",
						"type": {
							"path": [
								"pallet_proxy",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "proxy",
											"fields": [
												{
													"name": "real",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "force_proxy_type",
													"type": "330",
													"typeName": "Option<T::ProxyType>",
													"docs": []
												},
												{
													"name": "call",
													"type": "280",
													"typeName": "Box<<T as Config>::Call>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Dispatch the given `call` from an account that the sender is authorised for through",
												"`add_proxy`.",
												"",
												"Removes any corresponding announcement(s).",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"Parameters:",
												"- `real`: The account that the proxy will make a call on behalf of.",
												"- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
												"- `call`: The call to be made by the `real` account.",
												"",
												"# <weight>",
												"Weight is a function of the number of proxies the user has (P).",
												"# </weight>"
											]
										},
										{
											"name": "add_proxy",
											"fields": [
												{
													"name": "delegate",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "proxy_type",
													"type": "66",
													"typeName": "T::ProxyType",
													"docs": []
												},
												{
													"name": "delay",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Register a proxy account for the sender that is able to make calls on its behalf.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"Parameters:",
												"- `proxy`: The account that the `caller` would like to make a proxy.",
												"- `proxy_type`: The permissions allowed for this proxy account.",
												"- `delay`: The announcement period required of the initial proxy. Will generally be",
												"zero.",
												"",
												"# <weight>",
												"Weight is a function of the number of proxies the user has (P).",
												"# </weight>"
											]
										},
										{
											"name": "remove_proxy",
											"fields": [
												{
													"name": "delegate",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "proxy_type",
													"type": "66",
													"typeName": "T::ProxyType",
													"docs": []
												},
												{
													"name": "delay",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Unregister a proxy account for the sender.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"Parameters:",
												"- `proxy`: The account that the `caller` would like to remove as a proxy.",
												"- `proxy_type`: The permissions currently enabled for the removed proxy account.",
												"",
												"# <weight>",
												"Weight is a function of the number of proxies the user has (P).",
												"# </weight>"
											]
										},
										{
											"name": "remove_proxies",
											"fields": [],
											"index": "3",
											"docs": [
												"Unregister all proxy accounts for the sender.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"WARNING: This may be called on accounts created by `anonymous`, however if done, then",
												"the unreserved fees will be inaccessible. **All access to this account will be lost.**",
												"",
												"# <weight>",
												"Weight is a function of the number of proxies the user has (P).",
												"# </weight>"
											]
										},
										{
											"name": "anonymous",
											"fields": [
												{
													"name": "proxy_type",
													"type": "66",
													"typeName": "T::ProxyType",
													"docs": []
												},
												{
													"name": "delay",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												},
												{
													"name": "index",
													"type": "67",
													"typeName": "u16",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
												"initialize it with a proxy of `proxy_type` for `origin` sender.",
												"",
												"Requires a `Signed` origin.",
												"",
												"- `proxy_type`: The type of the proxy that the sender will be registered as over the",
												"new account. This will almost always be the most permissive `ProxyType` possible to",
												"allow for maximum flexibility.",
												"- `index`: A disambiguation index, in case this is called multiple times in the same",
												"transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
												"want to use `0`.",
												"- `delay`: The announcement period required of the initial proxy. Will generally be",
												"zero.",
												"",
												"Fails with `Duplicate` if this has already been called in this transaction, from the",
												"same sender, with the same parameters.",
												"",
												"Fails if there are insufficient funds to pay for deposit.",
												"",
												"# <weight>",
												"Weight is a function of the number of proxies the user has (P).",
												"# </weight>",
												"TODO: Might be over counting 1 read"
											]
										},
										{
											"name": "kill_anonymous",
											"fields": [
												{
													"name": "spawner",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "proxy_type",
													"type": "66",
													"typeName": "T::ProxyType",
													"docs": []
												},
												{
													"name": "index",
													"type": "67",
													"typeName": "u16",
													"docs": []
												},
												{
													"name": "height",
													"type": "105",
													"typeName": "T::BlockNumber",
													"docs": []
												},
												{
													"name": "ext_index",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Removes a previously spawned anonymous proxy.",
												"",
												"WARNING: **All access to this account will be lost.** Any funds held in it will be",
												"inaccessible.",
												"",
												"Requires a `Signed` origin, and the sender account must have been created by a call to",
												"`anonymous` with corresponding parameters.",
												"",
												"- `spawner`: The account that originally called `anonymous` to create this account.",
												"- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
												"- `proxy_type`: The proxy type originally passed to `anonymous`.",
												"- `height`: The height of the chain when the call to `anonymous` was processed.",
												"- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
												"",
												"Fails with `NoPermission` in case the caller is not a previously created anonymous",
												"account whose `anonymous` call has corresponding parameters.",
												"",
												"# <weight>",
												"Weight is a function of the number of proxies the user has (P).",
												"# </weight>"
											]
										},
										{
											"name": "announce",
											"fields": [
												{
													"name": "real",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "call_hash",
													"type": "9",
													"typeName": "CallHashOf<T>",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"Publish the hash of a proxy-call that will be made in the future.",
												"",
												"This must be called some number of blocks before the corresponding `proxy` is attempted",
												"if the delay associated with the proxy relationship is greater than zero.",
												"",
												"No more than `MaxPending` announcements may be made at any one time.",
												"",
												"This will take a deposit of `AnnouncementDepositFactor` as well as",
												"`AnnouncementDepositBase` if there are no other pending announcements.",
												"",
												"The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
												"",
												"Parameters:",
												"- `real`: The account that the proxy will make a call on behalf of.",
												"- `call_hash`: The hash of the call to be made by the `real` account.",
												"",
												"# <weight>",
												"Weight is a function of:",
												"- A: the number of announcements made.",
												"- P: the number of proxies the user has.",
												"# </weight>"
											]
										},
										{
											"name": "remove_announcement",
											"fields": [
												{
													"name": "real",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "call_hash",
													"type": "9",
													"typeName": "CallHashOf<T>",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"Remove a given announcement.",
												"",
												"May be called by a proxy account to remove a call they previously announced and return",
												"the deposit.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"Parameters:",
												"- `real`: The account that the proxy will make a call on behalf of.",
												"- `call_hash`: The hash of the call to be made by the `real` account.",
												"",
												"# <weight>",
												"Weight is a function of:",
												"- A: the number of announcements made.",
												"- P: the number of proxies the user has.",
												"# </weight>"
											]
										},
										{
											"name": "reject_announcement",
											"fields": [
												{
													"name": "delegate",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "call_hash",
													"type": "9",
													"typeName": "CallHashOf<T>",
													"docs": []
												}
											],
											"index": "8",
											"docs": [
												"Remove the given announcement of a delegate.",
												"",
												"May be called by a target (proxied) account to remove a call that one of their delegates",
												"(`delegate`) has announced they want to execute. The deposit is returned.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"Parameters:",
												"- `delegate`: The account that previously announced the call.",
												"- `call_hash`: The hash of the call to be made.",
												"",
												"# <weight>",
												"Weight is a function of:",
												"- A: the number of announcements made.",
												"- P: the number of proxies the user has.",
												"# </weight>"
											]
										},
										{
											"name": "proxy_announced",
											"fields": [
												{
													"name": "delegate",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "real",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "force_proxy_type",
													"type": "330",
													"typeName": "Option<T::ProxyType>",
													"docs": []
												},
												{
													"name": "call",
													"type": "280",
													"typeName": "Box<<T as Config>::Call>",
													"docs": []
												}
											],
											"index": "9",
											"docs": [
												"Dispatch the given `call` from an account that the sender is authorized for through",
												"`add_proxy`.",
												"",
												"Removes any corresponding announcement(s).",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"Parameters:",
												"- `real`: The account that the proxy will make a call on behalf of.",
												"- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
												"- `call`: The call to be made by the `real` account.",
												"",
												"# <weight>",
												"Weight is a function of:",
												"- A: the number of announcements made.",
												"- P: the number of proxies the user has.",
												"# </weight>"
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "330",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "66"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "66",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "331",
						"type": {
							"path": [
								"pallet_multisig",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "as_multi_threshold_1",
											"fields": [
												{
													"name": "other_signatories",
													"type": "201",
													"typeName": "Vec<T::AccountId>",
													"docs": []
												},
												{
													"name": "call",
													"type": "280",
													"typeName": "Box<<T as Config>::Call>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Immediately dispatch a multi-signature call using a single approval from the caller.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"- `other_signatories`: The accounts (other than the sender) who are part of the",
												"multi-signature, but do not participate in the approval process.",
												"- `call`: The call to be executed.",
												"",
												"Result is equivalent to the dispatched result.",
												"",
												"# <weight>",
												"O(Z + C) where Z is the length of the call and C its execution weight.",
												"-------------------------------",
												"- DB Weight: None",
												"- Plus Call Weight",
												"# </weight>"
											]
										},
										{
											"name": "as_multi",
											"fields": [
												{
													"name": "threshold",
													"type": "67",
													"typeName": "u16",
													"docs": []
												},
												{
													"name": "other_signatories",
													"type": "201",
													"typeName": "Vec<T::AccountId>",
													"docs": []
												},
												{
													"name": "maybe_timepoint",
													"type": "332",
													"typeName": "Option<Timepoint<T::BlockNumber>>",
													"docs": []
												},
												{
													"name": "call",
													"type": "333",
													"typeName": "OpaqueCall<T>",
													"docs": []
												},
												{
													"name": "store_call",
													"type": "34",
													"typeName": "bool",
													"docs": []
												},
												{
													"name": "max_weight",
													"type": "8",
													"typeName": "Weight",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Register approval for a dispatch to be made from a deterministic composite account if",
												"approved by a total of `threshold - 1` of `other_signatories`.",
												"",
												"If there are enough, then dispatch the call.",
												"",
												"Payment: `DepositBase` will be reserved if this is the first approval, plus",
												"`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
												"is cancelled.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"- `threshold`: The total number of approvals for this dispatch before it is executed.",
												"- `other_signatories`: The accounts (other than the sender) who can approve this",
												"dispatch. May not be empty.",
												"- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
												"not the first approval, then it must be `Some`, with the timepoint (block number and",
												"transaction index) of the first approval transaction.",
												"- `call`: The call to be executed.",
												"",
												"NOTE: Unless this is the final approval, you will generally want to use",
												"`approve_as_multi` instead, since it only requires a hash of the call.",
												"",
												"Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
												"on success, result is `Ok` and the result from the interior call, if it was executed,",
												"may be found in the deposited `MultisigExecuted` event.",
												"",
												"# <weight>",
												"- `O(S + Z + Call)`.",
												"- Up to one balance-reserve or unreserve operation.",
												"- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
												"  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
												"- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
												"- One encode & hash, both of complexity `O(S)`.",
												"- Up to one binary search and insert (`O(logS + S)`).",
												"- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
												"- One event.",
												"- The weight of the `call`.",
												"- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
												"  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
												"-------------------------------",
												"- DB Weight:",
												"    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
												"    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
												"- Plus Call Weight",
												"# </weight>"
											]
										},
										{
											"name": "approve_as_multi",
											"fields": [
												{
													"name": "threshold",
													"type": "67",
													"typeName": "u16",
													"docs": []
												},
												{
													"name": "other_signatories",
													"type": "201",
													"typeName": "Vec<T::AccountId>",
													"docs": []
												},
												{
													"name": "maybe_timepoint",
													"type": "332",
													"typeName": "Option<Timepoint<T::BlockNumber>>",
													"docs": []
												},
												{
													"name": "call_hash",
													"type": "1",
													"typeName": "[u8; 32]",
													"docs": []
												},
												{
													"name": "max_weight",
													"type": "8",
													"typeName": "Weight",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Register approval for a dispatch to be made from a deterministic composite account if",
												"approved by a total of `threshold - 1` of `other_signatories`.",
												"",
												"Payment: `DepositBase` will be reserved if this is the first approval, plus",
												"`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
												"is cancelled.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"- `threshold`: The total number of approvals for this dispatch before it is executed.",
												"- `other_signatories`: The accounts (other than the sender) who can approve this",
												"dispatch. May not be empty.",
												"- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
												"not the first approval, then it must be `Some`, with the timepoint (block number and",
												"transaction index) of the first approval transaction.",
												"- `call_hash`: The hash of the call to be executed.",
												"",
												"NOTE: If this is the final approval, you will want to use `as_multi` instead.",
												"",
												"# <weight>",
												"- `O(S)`.",
												"- Up to one balance-reserve or unreserve operation.",
												"- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
												"  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
												"- One encode & hash, both of complexity `O(S)`.",
												"- Up to one binary search and insert (`O(logS + S)`).",
												"- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
												"- One event.",
												"- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
												"  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
												"----------------------------------",
												"- DB Weight:",
												"    - Read: Multisig Storage, [Caller Account]",
												"    - Write: Multisig Storage, [Caller Account]",
												"# </weight>"
											]
										},
										{
											"name": "cancel_as_multi",
											"fields": [
												{
													"name": "threshold",
													"type": "67",
													"typeName": "u16",
													"docs": []
												},
												{
													"name": "other_signatories",
													"type": "201",
													"typeName": "Vec<T::AccountId>",
													"docs": []
												},
												{
													"name": "timepoint",
													"type": "69",
													"typeName": "Timepoint<T::BlockNumber>",
													"docs": []
												},
												{
													"name": "call_hash",
													"type": "1",
													"typeName": "[u8; 32]",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
												"for this operation will be unreserved on success.",
												"",
												"The dispatch origin for this call must be _Signed_.",
												"",
												"- `threshold`: The total number of approvals for this dispatch before it is executed.",
												"- `other_signatories`: The accounts (other than the sender) who can approve this",
												"dispatch. May not be empty.",
												"- `timepoint`: The timepoint (block number and transaction index) of the first approval",
												"transaction for this dispatch.",
												"- `call_hash`: The hash of the call to be executed.",
												"",
												"# <weight>",
												"- `O(S)`.",
												"- Up to one balance-reserve or unreserve operation.",
												"- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
												"  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
												"- One encode & hash, both of complexity `O(S)`.",
												"- One event.",
												"- I/O: 1 read `O(S)`, one remove.",
												"- Storage: removes one item.",
												"----------------------------------",
												"- DB Weight:",
												"    - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
												"    - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
												"# </weight>"
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "332",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "69"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "69",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "333",
						"type": {
							"path": [
								"frame_support",
								"traits",
								"misc",
								"WrapperKeepOpaque"
							],
							"params": [
								{
									"name": "T",
									"type": "280"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "105",
											"typeName": null,
											"docs": []
										},
										{
											"name": null,
											"type": "280",
											"typeName": "T",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "334",
						"type": {
							"path": [
								"pallet_election_provider_multi_phase",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "submit_unsigned",
											"fields": [
												{
													"name": "raw_solution",
													"type": "335",
													"typeName": "Box<RawSolution<SolutionOf<T>>>",
													"docs": []
												},
												{
													"name": "witness",
													"type": "388",
													"typeName": "SolutionOrSnapshotSize",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Submit a solution for the unsigned phase.",
												"",
												"The dispatch origin fo this call must be __none__.",
												"",
												"This submission is checked on the fly. Moreover, this unsigned solution is only",
												"validated when submitted to the pool from the **local** node. Effectively, this means",
												"that only active validators can submit this transaction when authoring a block (similar",
												"to an inherent).",
												"",
												"To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
												"panic if the solution submitted by the validator is invalid in any way, effectively",
												"putting their authoring reward at risk.",
												"",
												"No deposit or reward is associated with this submission."
											]
										},
										{
											"name": "set_minimum_untrusted_score",
											"fields": [
												{
													"name": "maybe_next_score",
													"type": "389",
													"typeName": "Option<ElectionScore>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Set a new value for `MinimumUntrustedScore`.",
												"",
												"Dispatch origin must be aligned with `T::ForceOrigin`.",
												"",
												"This check can be turned off by setting the value to `None`."
											]
										},
										{
											"name": "set_emergency_election_result",
											"fields": [
												{
													"name": "supports",
													"type": "390",
													"typeName": "Supports<T::AccountId>",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Set a solution in the queue, to be handed out to the client of this pallet in the next",
												"call to `ElectionProvider::elect`.",
												"",
												"This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
												"",
												"The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
												"feasibility check itself can in principle cause the election process to fail (due to",
												"memory/weight constrains)."
											]
										},
										{
											"name": "submit",
											"fields": [
												{
													"name": "raw_solution",
													"type": "335",
													"typeName": "Box<RawSolution<SolutionOf<T>>>",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Submit a solution for the signed phase.",
												"",
												"The dispatch origin fo this call must be __signed__.",
												"",
												"The solution is potentially queued, based on the claimed score and processed at the end",
												"of the signed phase.",
												"",
												"A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
												"might be rewarded, slashed, or get all or a part of the deposit back."
											]
										},
										{
											"name": "governance_fallback",
											"fields": [
												{
													"name": "maybe_max_voters",
													"type": "250",
													"typeName": "Option<u32>",
													"docs": []
												},
												{
													"name": "maybe_max_targets",
													"type": "250",
													"typeName": "Option<u32>",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Trigger the governance fallback.",
												"",
												"This can only be called when [`Phase::Emergency`] is enabled, as an alternative to",
												"calling [`Call::set_emergency_election_result`]."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "335",
						"type": {
							"path": [
								"pallet_election_provider_multi_phase",
								"RawSolution"
							],
							"params": [
								{
									"name": "S",
									"type": "336"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "solution",
											"type": "336",
											"typeName": "S",
											"docs": []
										},
										{
											"name": "score",
											"type": "387",
											"typeName": "ElectionScore",
											"docs": []
										},
										{
											"name": "round",
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "336",
						"type": {
							"path": [
								"westend_runtime",
								"NposCompactSolution16"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "votes1",
											"type": "337",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes2",
											"type": "340",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes3",
											"type": "345",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes4",
											"type": "348",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes5",
											"type": "351",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes6",
											"type": "354",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes7",
											"type": "357",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes8",
											"type": "360",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes9",
											"type": "363",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes10",
											"type": "366",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes11",
											"type": "369",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes12",
											"type": "372",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes13",
											"type": "375",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes14",
											"type": "378",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes15",
											"type": "381",
											"typeName": null,
											"docs": []
										},
										{
											"name": "votes16",
											"type": "384",
											"typeName": null,
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "337",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "338"
								}
							},
							"docs": []
						}
					},
					{
						"id": "338",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "339",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"compact": {
									"type": "67"
								}
							},
							"docs": []
						}
					},
					{
						"id": "340",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "341"
								}
							},
							"docs": []
						}
					},
					{
						"id": "341",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"342",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "342",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"339",
									"343"
								]
							},
							"docs": []
						}
					},
					{
						"id": "343",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"compact": {
									"type": "344"
								}
							},
							"docs": []
						}
					},
					{
						"id": "344",
						"type": {
							"path": [
								"sp_arithmetic",
								"per_things",
								"PerU16"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "67",
											"typeName": "u16",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "345",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "346"
								}
							},
							"docs": []
						}
					},
					{
						"id": "346",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"347",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "347",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "2",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "348",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "349"
								}
							},
							"docs": []
						}
					},
					{
						"id": "349",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"350",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "350",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "3",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "351",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "352"
								}
							},
							"docs": []
						}
					},
					{
						"id": "352",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"353",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "353",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "4",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "354",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "355"
								}
							},
							"docs": []
						}
					},
					{
						"id": "355",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"356",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "356",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "5",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "357",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "358"
								}
							},
							"docs": []
						}
					},
					{
						"id": "358",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"359",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "359",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "6",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "360",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "361"
								}
							},
							"docs": []
						}
					},
					{
						"id": "361",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"362",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "362",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "7",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "363",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "364"
								}
							},
							"docs": []
						}
					},
					{
						"id": "364",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"365",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "365",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "8",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "366",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "367"
								}
							},
							"docs": []
						}
					},
					{
						"id": "367",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"368",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "368",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "9",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "369",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "370"
								}
							},
							"docs": []
						}
					},
					{
						"id": "370",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"371",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "371",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "10",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "372",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "373"
								}
							},
							"docs": []
						}
					},
					{
						"id": "373",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"374",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "374",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "11",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "375",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "376"
								}
							},
							"docs": []
						}
					},
					{
						"id": "376",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"377",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "377",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "12",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "378",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "379"
								}
							},
							"docs": []
						}
					},
					{
						"id": "379",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"380",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "380",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "13",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "381",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "382"
								}
							},
							"docs": []
						}
					},
					{
						"id": "382",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"383",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "383",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "14",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "384",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "385"
								}
							},
							"docs": []
						}
					},
					{
						"id": "385",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"105",
									"386",
									"339"
								]
							},
							"docs": []
						}
					},
					{
						"id": "386",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "15",
									"type": "342"
								}
							},
							"docs": []
						}
					},
					{
						"id": "387",
						"type": {
							"path": [
								"sp_npos_elections",
								"ElectionScore"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "minimal_stake",
											"type": "6",
											"typeName": "ExtendedBalance",
											"docs": []
										},
										{
											"name": "sum_stake",
											"type": "6",
											"typeName": "ExtendedBalance",
											"docs": []
										},
										{
											"name": "sum_stake_squared",
											"type": "6",
											"typeName": "ExtendedBalance",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "388",
						"type": {
							"path": [
								"pallet_election_provider_multi_phase",
								"SolutionOrSnapshotSize"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "voters",
											"type": "105",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "targets",
											"type": "105",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "389",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "387"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "387",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "390",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "391"
								}
							},
							"docs": []
						}
					},
					{
						"id": "391",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"0",
									"392"
								]
							},
							"docs": []
						}
					},
					{
						"id": "392",
						"type": {
							"path": [
								"sp_npos_elections",
								"Support"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "total",
											"type": "6",
											"typeName": "ExtendedBalance",
											"docs": []
										},
										{
											"name": "voters",
											"type": "219",
											"typeName": "Vec<(AccountId, ExtendedBalance)>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "393",
						"type": {
							"path": [
								"pallet_bags_list",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								},
								{
									"name": "I",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "rebag",
											"fields": [
												{
													"name": "dislocated",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
												"changed its score that it should properly fall into a different bag than its current",
												"one.",
												"",
												"Anyone can call this function about any potentially dislocated account.",
												"",
												"Will never return an error; if `dislocated` does not exist or doesn't need a rebag, then",
												"it is a noop and fees are still collected from `origin`."
											]
										},
										{
											"name": "put_in_front_of",
											"fields": [
												{
													"name": "lighter",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Move the caller's Id directly in front of `lighter`.",
												"",
												"The dispatch origin for this call must be _Signed_ and can only be called by the Id of",
												"the account going in front of `lighter`.",
												"",
												"Only works if",
												"- both nodes are within the same bag,",
												"- and `origin` has a greater `Score` than `lighter`."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "394",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"configuration",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "set_validation_upgrade_cooldown",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Set the validation upgrade cooldown."
											]
										},
										{
											"name": "set_validation_upgrade_delay",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Set the validation upgrade delay."
											]
										},
										{
											"name": "set_code_retention_period",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Set the acceptance period for an included candidate."
											]
										},
										{
											"name": "set_max_code_size",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Set the max validation code size for incoming upgrades."
											]
										},
										{
											"name": "set_max_pov_size",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Set the max POV block size for incoming upgrades."
											]
										},
										{
											"name": "set_max_head_data_size",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Set the max head data size for paras."
											]
										},
										{
											"name": "set_parathread_cores",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"Set the number of parathread execution cores."
											]
										},
										{
											"name": "set_parathread_retries",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"Set the number of retries for a particular parathread."
											]
										},
										{
											"name": "set_group_rotation_frequency",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "8",
											"docs": [
												"Set the parachain validator-group rotation frequency"
											]
										},
										{
											"name": "set_chain_availability_period",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "9",
											"docs": [
												"Set the availability period for parachains."
											]
										},
										{
											"name": "set_thread_availability_period",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "10",
											"docs": [
												"Set the availability period for parathreads."
											]
										},
										{
											"name": "set_scheduling_lookahead",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "11",
											"docs": [
												"Set the scheduling lookahead, in expected number of blocks at peak throughput."
											]
										},
										{
											"name": "set_max_validators_per_core",
											"fields": [
												{
													"name": "new",
													"type": "250",
													"typeName": "Option<u32>",
													"docs": []
												}
											],
											"index": "12",
											"docs": [
												"Set the maximum number of validators to assign to any core."
											]
										},
										{
											"name": "set_max_validators",
											"fields": [
												{
													"name": "new",
													"type": "250",
													"typeName": "Option<u32>",
													"docs": []
												}
											],
											"index": "13",
											"docs": [
												"Set the maximum number of validators to use in parachain consensus."
											]
										},
										{
											"name": "set_dispute_period",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "SessionIndex",
													"docs": []
												}
											],
											"index": "14",
											"docs": [
												"Set the dispute period, in number of sessions to keep for disputes."
											]
										},
										{
											"name": "set_dispute_post_conclusion_acceptance_period",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "15",
											"docs": [
												"Set the dispute post conclusion acceptance period."
											]
										},
										{
											"name": "set_dispute_max_spam_slots",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "16",
											"docs": [
												"Set the maximum number of dispute spam slots."
											]
										},
										{
											"name": "set_dispute_conclusion_by_time_out_period",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "17",
											"docs": [
												"Set the dispute conclusion by time out period."
											]
										},
										{
											"name": "set_no_show_slots",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "18",
											"docs": [
												"Set the no show slots, in number of number of consensus slots.",
												"Must be at least 1."
											]
										},
										{
											"name": "set_n_delay_tranches",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "19",
											"docs": [
												"Set the total number of delay tranches."
											]
										},
										{
											"name": "set_zeroth_delay_tranche_width",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "20",
											"docs": [
												"Set the zeroth delay tranche width."
											]
										},
										{
											"name": "set_needed_approvals",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "21",
											"docs": [
												"Set the number of validators needed to approve a block."
											]
										},
										{
											"name": "set_relay_vrf_modulo_samples",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "22",
											"docs": [
												"Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion."
											]
										},
										{
											"name": "set_max_upward_queue_count",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "23",
											"docs": [
												"Sets the maximum items that can present in a upward dispatch queue at once."
											]
										},
										{
											"name": "set_max_upward_queue_size",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "24",
											"docs": [
												"Sets the maximum total size of items that can present in a upward dispatch queue at once."
											]
										},
										{
											"name": "set_max_downward_message_size",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "25",
											"docs": [
												"Set the critical downward message size."
											]
										},
										{
											"name": "set_ump_service_total_weight",
											"fields": [
												{
													"name": "new",
													"type": "8",
													"typeName": "Weight",
													"docs": []
												}
											],
											"index": "26",
											"docs": [
												"Sets the soft limit for the phase of dispatching dispatchable upward messages."
											]
										},
										{
											"name": "set_max_upward_message_size",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "27",
											"docs": [
												"Sets the maximum size of an upward message that can be sent by a candidate."
											]
										},
										{
											"name": "set_max_upward_message_num_per_candidate",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "28",
											"docs": [
												"Sets the maximum number of messages that a candidate can contain."
											]
										},
										{
											"name": "set_hrmp_open_request_ttl",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "29",
											"docs": [
												"Sets the number of sessions after which an HRMP open channel request expires."
											]
										},
										{
											"name": "set_hrmp_sender_deposit",
											"fields": [
												{
													"name": "new",
													"type": "6",
													"typeName": "Balance",
													"docs": []
												}
											],
											"index": "30",
											"docs": [
												"Sets the amount of funds that the sender should provide for opening an HRMP channel."
											]
										},
										{
											"name": "set_hrmp_recipient_deposit",
											"fields": [
												{
													"name": "new",
													"type": "6",
													"typeName": "Balance",
													"docs": []
												}
											],
											"index": "31",
											"docs": [
												"Sets the amount of funds that the recipient should provide for accepting opening an HRMP",
												"channel."
											]
										},
										{
											"name": "set_hrmp_channel_max_capacity",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "32",
											"docs": [
												"Sets the maximum number of messages allowed in an HRMP channel at once."
											]
										},
										{
											"name": "set_hrmp_channel_max_total_size",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "33",
											"docs": [
												"Sets the maximum total size of messages in bytes allowed in an HRMP channel at once."
											]
										},
										{
											"name": "set_hrmp_max_parachain_inbound_channels",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "34",
											"docs": [
												"Sets the maximum number of inbound HRMP channels a parachain is allowed to accept."
											]
										},
										{
											"name": "set_hrmp_max_parathread_inbound_channels",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "35",
											"docs": [
												"Sets the maximum number of inbound HRMP channels a parathread is allowed to accept."
											]
										},
										{
											"name": "set_hrmp_channel_max_message_size",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "36",
											"docs": [
												"Sets the maximum size of a message that could ever be put into an HRMP channel."
											]
										},
										{
											"name": "set_hrmp_max_parachain_outbound_channels",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "37",
											"docs": [
												"Sets the maximum number of outbound HRMP channels a parachain is allowed to open."
											]
										},
										{
											"name": "set_hrmp_max_parathread_outbound_channels",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "38",
											"docs": [
												"Sets the maximum number of outbound HRMP channels a parathread is allowed to open."
											]
										},
										{
											"name": "set_hrmp_max_message_num_per_candidate",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "39",
											"docs": [
												"Sets the maximum number of outbound HRMP messages can be sent by a candidate."
											]
										},
										{
											"name": "set_ump_max_individual_weight",
											"fields": [
												{
													"name": "new",
													"type": "8",
													"typeName": "Weight",
													"docs": []
												}
											],
											"index": "40",
											"docs": [
												"Sets the maximum amount of weight any individual upward message may consume."
											]
										},
										{
											"name": "set_pvf_checking_enabled",
											"fields": [
												{
													"name": "new",
													"type": "34",
													"typeName": "bool",
													"docs": []
												}
											],
											"index": "41",
											"docs": [
												"Enable or disable PVF pre-checking. Consult the field documentation prior executing."
											]
										},
										{
											"name": "set_pvf_voting_ttl",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "SessionIndex",
													"docs": []
												}
											],
											"index": "42",
											"docs": [
												"Set the number of session changes after which a PVF pre-checking voting is rejected."
											]
										},
										{
											"name": "set_minimum_validation_upgrade_delay",
											"fields": [
												{
													"name": "new",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "43",
											"docs": [
												"Sets the minimum delay between announcing the upgrade block for a parachain until the",
												"upgrade taking place.",
												"",
												"See the field documentation for information and constraints for the new value."
											]
										},
										{
											"name": "set_bypass_consistency_check",
											"fields": [
												{
													"name": "new",
													"type": "34",
													"typeName": "bool",
													"docs": []
												}
											],
											"index": "44",
											"docs": [
												"Setting this to true will disable consistency checks for the configuration setters.",
												"Use with caution."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "395",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"shared",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": []
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "396",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"inclusion",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": []
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "397",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"paras_inherent",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "enter",
											"fields": [
												{
													"name": "data",
													"type": "398",
													"typeName": "ParachainsInherentData<T::Header>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Enter the paras inherent. This will process bitfields and backed candidates."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "398",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"InherentData"
							],
							"params": [
								{
									"name": "HDR",
									"type": "172"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "bitfields",
											"type": "399",
											"typeName": "UncheckedSignedAvailabilityBitfields",
											"docs": []
										},
										{
											"name": "backed_candidates",
											"type": "406",
											"typeName": "Vec<BackedCandidate<HDR::Hash>>",
											"docs": []
										},
										{
											"name": "disputes",
											"type": "416",
											"typeName": "MultiDisputeStatementSet",
											"docs": []
										},
										{
											"name": "parent_header",
											"type": "172",
											"typeName": "HDR",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "399",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "400"
								}
							},
							"docs": []
						}
					},
					{
						"id": "400",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"signed",
								"UncheckedSigned"
							],
							"params": [
								{
									"name": "Payload",
									"type": "401"
								},
								{
									"name": "RealPayload",
									"type": "401"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "payload",
											"type": "401",
											"typeName": "Payload",
											"docs": []
										},
										{
											"name": "validator_index",
											"type": "404",
											"typeName": "ValidatorIndex",
											"docs": []
										},
										{
											"name": "signature",
											"type": "405",
											"typeName": "ValidatorSignature",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "401",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"AvailabilityBitfield"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "402",
											"typeName": "BitVec<u8, bitvec::order::Lsb0>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "402",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"bitSequence": {
									"bitStoreType": "2",
									"bitOrderType": "403"
								}
							},
							"docs": []
						}
					},
					{
						"id": "403",
						"type": {
							"path": [
								"bitvec",
								"order",
								"Lsb0"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": []
								}
							},
							"docs": []
						}
					},
					{
						"id": "404",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"ValidatorIndex"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "405",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"validator_app",
								"Signature"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "80",
											"typeName": "sr25519::Signature",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "406",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "407"
								}
							},
							"docs": []
						}
					},
					{
						"id": "407",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"BackedCandidate"
							],
							"params": [
								{
									"name": "H",
									"type": "9"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "candidate",
											"type": "408",
											"typeName": "CommittedCandidateReceipt<H>",
											"docs": []
										},
										{
											"name": "validity_votes",
											"type": "414",
											"typeName": "Vec<ValidityAttestation>",
											"docs": []
										},
										{
											"name": "validator_indices",
											"type": "402",
											"typeName": "BitVec<u8, bitvec::order::Lsb0>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "408",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"CommittedCandidateReceipt"
							],
							"params": [
								{
									"name": "H",
									"type": "9"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "descriptor",
											"type": "76",
											"typeName": "CandidateDescriptor<H>",
											"docs": []
										},
										{
											"name": "commitments",
											"type": "409",
											"typeName": "CandidateCommitments",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "409",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"CandidateCommitments"
							],
							"params": [
								{
									"name": "N",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "upward_messages",
											"type": "145",
											"typeName": "Vec<UpwardMessage>",
											"docs": []
										},
										{
											"name": "horizontal_messages",
											"type": "410",
											"typeName": "Vec<OutboundHrmpMessage<Id>>",
											"docs": []
										},
										{
											"name": "new_validation_code",
											"type": "412",
											"typeName": "Option<ValidationCode>",
											"docs": []
										},
										{
											"name": "head_data",
											"type": "83",
											"typeName": "HeadData",
											"docs": []
										},
										{
											"name": "processed_downward_messages",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "hrmp_watermark",
											"type": "4",
											"typeName": "N",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "410",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "411"
								}
							},
							"docs": []
						}
					},
					{
						"id": "411",
						"type": {
							"path": [
								"polkadot_core_primitives",
								"OutboundHrmpMessage"
							],
							"params": [
								{
									"name": "Id",
									"type": "77"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "recipient",
											"type": "77",
											"typeName": "Id",
											"docs": []
										},
										{
											"name": "data",
											"type": "10",
											"typeName": "sp_std::vec::Vec<u8>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "412",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "413"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "413",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "413",
						"type": {
							"path": [
								"polkadot_parachain",
								"primitives",
								"ValidationCode"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "10",
											"typeName": "Vec<u8>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "414",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "415"
								}
							},
							"docs": []
						}
					},
					{
						"id": "415",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"ValidityAttestation"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Implicit",
											"fields": [
												{
													"name": null,
													"type": "405",
													"typeName": "ValidatorSignature",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Explicit",
											"fields": [
												{
													"name": null,
													"type": "405",
													"typeName": "ValidatorSignature",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "416",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "417"
								}
							},
							"docs": []
						}
					},
					{
						"id": "417",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"DisputeStatementSet"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "candidate_hash",
											"type": "93",
											"typeName": "CandidateHash",
											"docs": []
										},
										{
											"name": "session",
											"type": "4",
											"typeName": "SessionIndex",
											"docs": []
										},
										{
											"name": "statements",
											"type": "418",
											"typeName": "Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "418",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "419"
								}
							},
							"docs": []
						}
					},
					{
						"id": "419",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"420",
									"404",
									"405"
								]
							},
							"docs": []
						}
					},
					{
						"id": "420",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"DisputeStatement"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Valid",
											"fields": [
												{
													"name": null,
													"type": "421",
													"typeName": "ValidDisputeStatementKind",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Invalid",
											"fields": [
												{
													"name": null,
													"type": "422",
													"typeName": "InvalidDisputeStatementKind",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "421",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"ValidDisputeStatementKind"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Explicit",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "BackingSeconded",
											"fields": [
												{
													"name": null,
													"type": "9",
													"typeName": "Hash",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "BackingValid",
											"fields": [
												{
													"name": null,
													"type": "9",
													"typeName": "Hash",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "ApprovalChecking",
											"fields": [],
											"index": "3",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "422",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"InvalidDisputeStatementKind"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Explicit",
											"fields": [],
											"index": "0",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "423",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"paras",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "force_set_current_code",
											"fields": [
												{
													"name": "para",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "new_code",
													"type": "413",
													"typeName": "ValidationCode",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Set the storage for the parachain validation code immediately."
											]
										},
										{
											"name": "force_set_current_head",
											"fields": [
												{
													"name": "para",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "new_head",
													"type": "83",
													"typeName": "HeadData",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Set the storage for the current parachain head data immediately."
											]
										},
										{
											"name": "force_schedule_code_upgrade",
											"fields": [
												{
													"name": "para",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "new_code",
													"type": "413",
													"typeName": "ValidationCode",
													"docs": []
												},
												{
													"name": "relay_parent_number",
													"type": "4",
													"typeName": "T::BlockNumber",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Schedule an upgrade as if it was scheduled in the given relay parent block."
											]
										},
										{
											"name": "force_note_new_head",
											"fields": [
												{
													"name": "para",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "new_head",
													"type": "83",
													"typeName": "HeadData",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Note a new block head for para within the context of the current block."
											]
										},
										{
											"name": "force_queue_action",
											"fields": [
												{
													"name": "para",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Put a parachain directly into the next session's action queue.",
												"We can't queue it any sooner than this without going into the",
												"initializer..."
											]
										},
										{
											"name": "add_trusted_validation_code",
											"fields": [
												{
													"name": "validation_code",
													"type": "413",
													"typeName": "ValidationCode",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Adds the validation code to the storage.",
												"",
												"The code will not be added if it is already present. Additionally, if PVF pre-checking",
												"is running for that code, it will be instantly accepted.",
												"",
												"Otherwise, the code will be added into the storage. Note that the code will be added",
												"into storage with reference count 0. This is to account the fact that there are no users",
												"for this code yet. The caller will have to make sure that this code eventually gets",
												"used by some parachain or removed from the storage to avoid storage leaks. For the latter",
												"prefer to use the `poke_unused_validation_code` dispatchable to raw storage manipulation.",
												"",
												"This function is mainly meant to be used for upgrading parachains that do not follow",
												"the go-ahead signal while the PVF pre-checking feature is enabled."
											]
										},
										{
											"name": "poke_unused_validation_code",
											"fields": [
												{
													"name": "validation_code_hash",
													"type": "82",
													"typeName": "ValidationCodeHash",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"Remove the validation code from the storage iff the reference count is 0.",
												"",
												"This is better than removing the storage directly, because it will not remove the code",
												"that was suddenly got used by some parachain while this dispatchable was pending",
												"dispatching."
											]
										},
										{
											"name": "include_pvf_check_statement",
											"fields": [
												{
													"name": "stmt",
													"type": "424",
													"typeName": "PvfCheckStatement",
													"docs": []
												},
												{
													"name": "signature",
													"type": "405",
													"typeName": "ValidatorSignature",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"Includes a statement for a PVF pre-checking vote. Potentially, finalizes the vote and",
												"enacts the results if that was the last vote before achieving the supermajority."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "424",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"PvfCheckStatement"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "accept",
											"type": "34",
											"typeName": "bool",
											"docs": []
										},
										{
											"name": "subject",
											"type": "82",
											"typeName": "ValidationCodeHash",
											"docs": []
										},
										{
											"name": "session_index",
											"type": "4",
											"typeName": "SessionIndex",
											"docs": []
										},
										{
											"name": "validator_index",
											"type": "404",
											"typeName": "ValidatorIndex",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "425",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"initializer",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "force_approve",
											"fields": [
												{
													"name": "up_to",
													"type": "4",
													"typeName": "BlockNumber",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Issue a signal to the consensus engine to forcibly act as though all parachain",
												"blocks in all relay chain blocks up to and including the given number in the current",
												"chain are valid and should be finalized."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "426",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"dmp",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": []
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "427",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"ump",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "service_overweight",
											"fields": [
												{
													"name": "index",
													"type": "8",
													"typeName": "OverweightIndex",
													"docs": []
												},
												{
													"name": "weight_limit",
													"type": "8",
													"typeName": "Weight",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Service a single overweight upward message.",
												"",
												"- `origin`: Must pass `ExecuteOverweightOrigin`.",
												"- `index`: The index of the overweight message to service.",
												"- `weight_limit`: The amount of weight that message execution may take.",
												"",
												"Errors:",
												"- `UnknownMessageIndex`: Message of `index` is unknown.",
												"- `WeightOverLimit`: Message execution may use greater than `weight_limit`.",
												"",
												"Events:",
												"- `OverweightServiced`: On success."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "428",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"hrmp",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "hrmp_init_open_channel",
											"fields": [
												{
													"name": "recipient",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "proposed_max_capacity",
													"type": "4",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "proposed_max_message_size",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Initiate opening a channel from a parachain to a given recipient with given channel",
												"parameters.",
												"",
												"- `proposed_max_capacity` - specifies how many messages can be in the channel at once.",
												"- `proposed_max_message_size` - specifies the maximum size of the messages.",
												"",
												"These numbers are a subject to the relay-chain configuration limits.",
												"",
												"The channel can be opened only after the recipient confirms it and only on a session",
												"change."
											]
										},
										{
											"name": "hrmp_accept_open_channel",
											"fields": [
												{
													"name": "sender",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Accept a pending open channel request from the given sender.",
												"",
												"The channel will be opened only on the next session boundary."
											]
										},
										{
											"name": "hrmp_close_channel",
											"fields": [
												{
													"name": "channel_id",
													"type": "91",
													"typeName": "HrmpChannelId",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Initiate unilateral closing of a channel. The origin must be either the sender or the",
												"recipient in the channel being closed.",
												"",
												"The closure can only happen on a session change."
											]
										},
										{
											"name": "force_clean_hrmp",
											"fields": [
												{
													"name": "para",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "inbound",
													"type": "4",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "outbound",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"This extrinsic triggers the cleanup of all the HRMP storage items that",
												"a para may have. Normally this happens once per session, but this allows",
												"you to trigger the cleanup immediately for a specific parachain.",
												"",
												"Origin must be Root.",
												"",
												"Number of inbound and outbound channels for `para` must be provided as witness data of weighing."
											]
										},
										{
											"name": "force_process_hrmp_open",
											"fields": [
												{
													"name": "channels",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Force process HRMP open channel requests.",
												"",
												"If there are pending HRMP open channel requests, you can use this",
												"function process all of those requests immediately.",
												"",
												"Total number of opening channels must be provided as witness data of weighing."
											]
										},
										{
											"name": "force_process_hrmp_close",
											"fields": [
												{
													"name": "channels",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Force process HRMP close channel requests.",
												"",
												"If there are pending HRMP close channel requests, you can use this",
												"function process all of those requests immediately.",
												"",
												"Total number of closing channels must be provided as witness data of weighing."
											]
										},
										{
											"name": "hrmp_cancel_open_request",
											"fields": [
												{
													"name": "channel_id",
													"type": "91",
													"typeName": "HrmpChannelId",
													"docs": []
												},
												{
													"name": "open_requests",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"This cancels a pending open channel request. It can be canceled by either of the sender",
												"or the recipient for that request. The origin must be either of those.",
												"",
												"The cancellation happens immediately. It is not possible to cancel the request if it is",
												"already accepted.",
												"",
												"Total number of open requests (i.e. `HrmpOpenChannelRequestsList`) must be provided as",
												"witness data."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "429",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"disputes",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "force_unfreeze",
											"fields": [],
											"index": "0",
											"docs": []
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "430",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"paras_registrar",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "register",
											"fields": [
												{
													"name": "id",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "genesis_head",
													"type": "83",
													"typeName": "HeadData",
													"docs": []
												},
												{
													"name": "validation_code",
													"type": "413",
													"typeName": "ValidationCode",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Register head data and validation code for a reserved Para Id.",
												"",
												"## Arguments",
												"- `origin`: Must be called by a `Signed` origin.",
												"- `id`: The para ID. Must be owned/managed by the `origin` signing account.",
												"- `genesis_head`: The genesis head data of the parachain/thread.",
												"- `validation_code`: The initial validation code of the parachain/thread.",
												"",
												"## Deposits/Fees",
												"The origin signed account must reserve a corresponding deposit for the registration. Anything already",
												"reserved previously for this para ID is accounted for.",
												"",
												"## Events",
												"The `Registered` event is emitted in case of success."
											]
										},
										{
											"name": "force_register",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "deposit",
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												},
												{
													"name": "id",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "genesis_head",
													"type": "83",
													"typeName": "HeadData",
													"docs": []
												},
												{
													"name": "validation_code",
													"type": "413",
													"typeName": "ValidationCode",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Force the registration of a Para Id on the relay chain.",
												"",
												"This function must be called by a Root origin.",
												"",
												"The deposit taken can be specified for this registration. Any `ParaId`",
												"can be registered, including sub-1000 IDs which are System Parachains."
											]
										},
										{
											"name": "deregister",
											"fields": [
												{
													"name": "id",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Deregister a Para Id, freeing all data and returning any deposit.",
												"",
												"The caller must be Root, the `para` owner, or the `para` itself. The para must be a parathread."
											]
										},
										{
											"name": "swap",
											"fields": [
												{
													"name": "id",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "other",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Swap a parachain with another parachain or parathread.",
												"",
												"The origin must be Root, the `para` owner, or the `para` itself.",
												"",
												"The swap will happen only if there is already an opposite swap pending. If there is not,",
												"the swap will be stored in the pending swaps map, ready for a later confirmatory swap.",
												"",
												"The `ParaId`s remain mapped to the same head data and code so external code can rely on",
												"`ParaId` to be a long-term identifier of a notional \"parachain\". However, their",
												"scheduling info (i.e. whether they're a parathread or parachain), auction information",
												"and the auction deposit are switched."
											]
										},
										{
											"name": "force_remove_lock",
											"fields": [
												{
													"name": "para",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Remove a manager lock from a para. This will allow the manager of a",
												"previously locked para to deregister or swap a para without using governance.",
												"",
												"Can only be called by the Root origin."
											]
										},
										{
											"name": "reserve",
											"fields": [],
											"index": "5",
											"docs": [
												"Reserve a Para Id on the relay chain.",
												"",
												"This function will reserve a new Para Id to be owned/managed by the origin account.",
												"The origin account is able to register head data and validation code using `register` to create",
												"a parathread. Using the Slots pallet, a parathread can then be upgraded to get a parachain slot.",
												"",
												"## Arguments",
												"- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new para ID.",
												"",
												"## Deposits/Fees",
												"The origin must reserve a deposit of `ParaDeposit` for the registration.",
												"",
												"## Events",
												"The `Reserved` event is emitted in case of success, which provides the ID reserved for use."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "431",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"slots",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "force_lease",
											"fields": [
												{
													"name": "para",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "leaser",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "amount",
													"type": "6",
													"typeName": "BalanceOf<T>",
													"docs": []
												},
												{
													"name": "period_begin",
													"type": "4",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												},
												{
													"name": "period_count",
													"type": "4",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Just a connect into the `lease_out` call, in case Root wants to force some lease to happen",
												"independently of any other on-chain mechanism to use it.",
												"",
												"The dispatch origin for this call must match `T::ForceOrigin`."
											]
										},
										{
											"name": "clear_all_leases",
											"fields": [
												{
													"name": "para",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Clear all leases for a Para Id, refunding any deposits back to the original owners.",
												"",
												"The dispatch origin for this call must match `T::ForceOrigin`."
											]
										},
										{
											"name": "trigger_onboard",
											"fields": [
												{
													"name": "para",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Try to onboard a parachain that has a lease for the current lease period.",
												"",
												"This function can be useful if there was some state issue with a para that should",
												"have onboarded, but was unable to. As long as they have a lease period, we can",
												"let them onboard from here.",
												"",
												"Origin must be signed, but can be called by anyone."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "432",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"paras_sudo_wrapper",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "sudo_schedule_para_initialize",
											"fields": [
												{
													"name": "id",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "genesis",
													"type": "433",
													"typeName": "ParaGenesisArgs",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Schedule a para to be initialized at the start of the next session."
											]
										},
										{
											"name": "sudo_schedule_para_cleanup",
											"fields": [
												{
													"name": "id",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Schedule a para to be cleaned up at the start of the next session."
											]
										},
										{
											"name": "sudo_schedule_parathread_upgrade",
											"fields": [
												{
													"name": "id",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Upgrade a parathread to a parachain"
											]
										},
										{
											"name": "sudo_schedule_parachain_downgrade",
											"fields": [
												{
													"name": "id",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Downgrade a parachain to a parathread"
											]
										},
										{
											"name": "sudo_queue_downward_xcm",
											"fields": [
												{
													"name": "id",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "xcm",
													"type": "434",
													"typeName": "Box<xcm::opaque::VersionedXcm>",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Send a downward XCM to the given para.",
												"",
												"The given parachain should exist and the payload should not exceed the preconfigured size",
												"`config.max_downward_message_size`."
											]
										},
										{
											"name": "sudo_establish_hrmp_channel",
											"fields": [
												{
													"name": "sender",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "recipient",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "max_capacity",
													"type": "4",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "max_message_size",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Forcefully establish a channel from the sender to the recipient.",
												"",
												"This is equivalent to sending an `Hrmp::hrmp_init_open_channel` extrinsic followed by",
												"`Hrmp::hrmp_accept_open_channel`."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "433",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"paras",
								"ParaGenesisArgs"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "genesis_head",
											"type": "83",
											"typeName": "HeadData",
											"docs": []
										},
										{
											"name": "validation_code",
											"type": "413",
											"typeName": "ValidationCode",
											"docs": []
										},
										{
											"name": "parachain",
											"type": "34",
											"typeName": "bool",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "434",
						"type": {
							"path": [
								"xcm",
								"VersionedXcm"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "V0",
											"fields": [
												{
													"name": null,
													"type": "435",
													"typeName": "v0::Xcm<Call>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "V1",
											"fields": [
												{
													"name": null,
													"type": "440",
													"typeName": "v1::Xcm<Call>",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "V2",
											"fields": [
												{
													"name": null,
													"type": "111",
													"typeName": "v2::Xcm<Call>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "435",
						"type": {
							"path": [
								"xcm",
								"v0",
								"Xcm"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "WithdrawAsset",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "effects",
													"type": "436",
													"typeName": "Vec<Order<Call>>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "ReserveAssetDeposit",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "effects",
													"type": "436",
													"typeName": "Vec<Order<Call>>",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "TeleportAsset",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "effects",
													"type": "436",
													"typeName": "Vec<Order<Call>>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "QueryResponse",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "response",
													"type": "439",
													"typeName": "Response",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "TransferAsset",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "dest",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "TransferReserveAsset",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "dest",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "436",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "Transact",
											"fields": [
												{
													"name": "origin_type",
													"type": "124",
													"typeName": "OriginKind",
													"docs": []
												},
												{
													"name": "require_weight_at_most",
													"type": "8",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "call",
													"type": "125",
													"typeName": "DoubleEncoded<Call>",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "HrmpNewChannelOpenRequest",
											"fields": [
												{
													"name": "sender",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "max_message_size",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "max_capacity",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "HrmpChannelAccepted",
											"fields": [
												{
													"name": "recipient",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										},
										{
											"name": "HrmpChannelClosing",
											"fields": [
												{
													"name": "initiator",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "sender",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "recipient",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "9",
											"docs": []
										},
										{
											"name": "RelayedFrom",
											"fields": [
												{
													"name": "who",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "message",
													"type": "435",
													"typeName": "alloc::boxed::Box<Xcm<Call>>",
													"docs": []
												}
											],
											"index": "10",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "436",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "437"
								}
							},
							"docs": []
						}
					},
					{
						"id": "437",
						"type": {
							"path": [
								"xcm",
								"v0",
								"order",
								"Order"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Null",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "DepositAsset",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "dest",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "DepositReserveAsset",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "dest",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "436",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "ExchangeAsset",
											"fields": [
												{
													"name": "give",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "receive",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "InitiateReserveWithdraw",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "reserve",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "436",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "InitiateTeleport",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "dest",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "436",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "QueryHolding",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "dest",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "BuyExecution",
											"fields": [
												{
													"name": "fees",
													"type": "133",
													"typeName": "MultiAsset",
													"docs": []
												},
												{
													"name": "weight",
													"type": "8",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "debt",
													"type": "8",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "halt_on_error",
													"type": "34",
													"typeName": "bool",
													"docs": []
												},
												{
													"name": "xcm",
													"type": "438",
													"typeName": "Vec<Xcm<Call>>",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "438",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "435"
								}
							},
							"docs": []
						}
					},
					{
						"id": "439",
						"type": {
							"path": [
								"xcm",
								"v0",
								"Response"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Assets",
											"fields": [
												{
													"name": null,
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "440",
						"type": {
							"path": [
								"xcm",
								"v1",
								"Xcm"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "WithdrawAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "effects",
													"type": "441",
													"typeName": "Vec<Order<Call>>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "ReserveAssetDeposited",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "effects",
													"type": "441",
													"typeName": "Vec<Order<Call>>",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "ReceiveTeleportedAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "effects",
													"type": "441",
													"typeName": "Vec<Order<Call>>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "QueryResponse",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "response",
													"type": "444",
													"typeName": "Response",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "TransferAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "beneficiary",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "TransferReserveAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "441",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "Transact",
											"fields": [
												{
													"name": "origin_type",
													"type": "124",
													"typeName": "OriginKind",
													"docs": []
												},
												{
													"name": "require_weight_at_most",
													"type": "8",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "call",
													"type": "125",
													"typeName": "DoubleEncoded<Call>",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "HrmpNewChannelOpenRequest",
											"fields": [
												{
													"name": "sender",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "max_message_size",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "max_capacity",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "HrmpChannelAccepted",
											"fields": [
												{
													"name": "recipient",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										},
										{
											"name": "HrmpChannelClosing",
											"fields": [
												{
													"name": "initiator",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "sender",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "recipient",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "9",
											"docs": []
										},
										{
											"name": "RelayedFrom",
											"fields": [
												{
													"name": "who",
													"type": "103",
													"typeName": "InteriorMultiLocation",
													"docs": []
												},
												{
													"name": "message",
													"type": "440",
													"typeName": "alloc::boxed::Box<Xcm<Call>>",
													"docs": []
												}
											],
											"index": "10",
											"docs": []
										},
										{
											"name": "SubscribeVersion",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "max_response_weight",
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "11",
											"docs": []
										},
										{
											"name": "UnsubscribeVersion",
											"fields": [],
											"index": "12",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "441",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "442"
								}
							},
							"docs": []
						}
					},
					{
						"id": "442",
						"type": {
							"path": [
								"xcm",
								"v1",
								"order",
								"Order"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Noop",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "DepositAsset",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "max_assets",
													"type": "4",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "beneficiary",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "DepositReserveAsset",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "max_assets",
													"type": "4",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "441",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "ExchangeAsset",
											"fields": [
												{
													"name": "give",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "receive",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "InitiateReserveWithdraw",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "reserve",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "441",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "InitiateTeleport",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "441",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "QueryHolding",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "BuyExecution",
											"fields": [
												{
													"name": "fees",
													"type": "116",
													"typeName": "MultiAsset",
													"docs": []
												},
												{
													"name": "weight",
													"type": "8",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "debt",
													"type": "8",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "halt_on_error",
													"type": "34",
													"typeName": "bool",
													"docs": []
												},
												{
													"name": "instructions",
													"type": "443",
													"typeName": "Vec<Xcm<Call>>",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "443",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "440"
								}
							},
							"docs": []
						}
					},
					{
						"id": "444",
						"type": {
							"path": [
								"xcm",
								"v1",
								"Response"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Assets",
											"fields": [
												{
													"name": null,
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Version",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "super::Version",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "445",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"auctions",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "new_auction",
											"fields": [
												{
													"name": "duration",
													"type": "105",
													"typeName": "T::BlockNumber",
													"docs": []
												},
												{
													"name": "lease_period_index",
													"type": "105",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Create a new auction.",
												"",
												"This can only happen when there isn't already an auction in progress and may only be",
												"called by the root origin. Accepts the `duration` of this auction and the",
												"`lease_period_index` of the initial lease period of the four that are to be auctioned."
											]
										},
										{
											"name": "bid",
											"fields": [
												{
													"name": "para",
													"type": "446",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "auction_index",
													"type": "105",
													"typeName": "AuctionIndex",
													"docs": []
												},
												{
													"name": "first_slot",
													"type": "105",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												},
												{
													"name": "last_slot",
													"type": "105",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												},
												{
													"name": "amount",
													"type": "49",
													"typeName": "BalanceOf<T>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Make a new bid from an account (including a parachain account) for deploying a new",
												"parachain.",
												"",
												"Multiple simultaneous bids from the same bidder are allowed only as long as all active",
												"bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
												"",
												"- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and",
												"funded by) the same account.",
												"- `auction_index` is the index of the auction to bid on. Should just be the present",
												"value of `AuctionCounter`.",
												"- `first_slot` is the first lease period index of the range to bid on. This is the",
												"absolute lease period index value, not an auction-specific offset.",
												"- `last_slot` is the last lease period index of the range to bid on. This is the",
												"absolute lease period index value, not an auction-specific offset.",
												"- `amount` is the amount to bid to be held as deposit for the parachain should the",
												"bid win. This amount is held throughout the range."
											]
										},
										{
											"name": "cancel_auction",
											"fields": [],
											"index": "2",
											"docs": [
												"Cancel an in-progress auction.",
												"",
												"Can only be called by Root origin."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "446",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"compact": {
									"type": "77"
								}
							},
							"docs": []
						}
					},
					{
						"id": "447",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"crowdloan",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "create",
											"fields": [
												{
													"name": "index",
													"type": "446",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "cap",
													"type": "49",
													"typeName": "BalanceOf<T>",
													"docs": []
												},
												{
													"name": "first_period",
													"type": "105",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												},
												{
													"name": "last_period",
													"type": "105",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												},
												{
													"name": "end",
													"type": "105",
													"typeName": "T::BlockNumber",
													"docs": []
												},
												{
													"name": "verifier",
													"type": "448",
													"typeName": "Option<MultiSigner>",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Create a new crowdloaning campaign for a parachain slot with the given lease period range.",
												"",
												"This applies a lock to your parachain configuration, ensuring that it cannot be changed",
												"by the parachain manager."
											]
										},
										{
											"name": "contribute",
											"fields": [
												{
													"name": "index",
													"type": "446",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "value",
													"type": "49",
													"typeName": "BalanceOf<T>",
													"docs": []
												},
												{
													"name": "signature",
													"type": "452",
													"typeName": "Option<MultiSignature>",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Contribute to a crowd sale. This will transfer some balance over to fund a parachain",
												"slot. It will be withdrawable when the crowdloan has ended and the funds are unused."
											]
										},
										{
											"name": "withdraw",
											"fields": [
												{
													"name": "who",
													"type": "0",
													"typeName": "T::AccountId",
													"docs": []
												},
												{
													"name": "index",
													"type": "446",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Withdraw full balance of a specific contributor.",
												"",
												"Origin must be signed, but can come from anyone.",
												"",
												"The fund must be either in, or ready for, retirement. For a fund to be *in* retirement, then the retirement",
												"flag must be set. For a fund to be ready for retirement, then:",
												"- it must not already be in retirement;",
												"- the amount of raised funds must be bigger than the _free_ balance of the account;",
												"- and either:",
												"  - the block number must be at least `end`; or",
												"  - the current lease period must be greater than the fund's `last_period`.",
												"",
												"In this case, the fund's retirement flag is set and its `end` is reset to the current block",
												"number.",
												"",
												"- `who`: The account whose contribution should be withdrawn.",
												"- `index`: The parachain to whose crowdloan the contribution was made."
											]
										},
										{
											"name": "refund",
											"fields": [
												{
													"name": "index",
													"type": "446",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Automatically refund contributors of an ended crowdloan.",
												"Due to weight restrictions, this function may need to be called multiple",
												"times to fully refund all users. We will refund `RemoveKeysLimit` users at a time.",
												"",
												"Origin must be signed, but can come from anyone."
											]
										},
										{
											"name": "dissolve",
											"fields": [
												{
													"name": "index",
													"type": "446",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Remove a fund after the retirement period has ended and all funds have been returned."
											]
										},
										{
											"name": "edit",
											"fields": [
												{
													"name": "index",
													"type": "446",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "cap",
													"type": "49",
													"typeName": "BalanceOf<T>",
													"docs": []
												},
												{
													"name": "first_period",
													"type": "105",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												},
												{
													"name": "last_period",
													"type": "105",
													"typeName": "LeasePeriodOf<T>",
													"docs": []
												},
												{
													"name": "end",
													"type": "105",
													"typeName": "T::BlockNumber",
													"docs": []
												},
												{
													"name": "verifier",
													"type": "448",
													"typeName": "Option<MultiSigner>",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Edit the configuration for an in-progress crowdloan.",
												"",
												"Can only be called by Root origin."
											]
										},
										{
											"name": "add_memo",
											"fields": [
												{
													"name": "index",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "memo",
													"type": "10",
													"typeName": "Vec<u8>",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"Add an optional memo to an existing crowdloan contribution.",
												"",
												"Origin must be Signed, and the user must have contributed to the crowdloan."
											]
										},
										{
											"name": "poke",
											"fields": [
												{
													"name": "index",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"Poke the fund into `NewRaise`",
												"",
												"Origin must be Signed, and the fund has non-zero raise."
											]
										},
										{
											"name": "contribute_all",
											"fields": [
												{
													"name": "index",
													"type": "446",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "signature",
													"type": "452",
													"typeName": "Option<MultiSignature>",
													"docs": []
												}
											],
											"index": "8",
											"docs": [
												"Contribute your entire balance to a crowd sale. This will transfer the entire balance of a user over to fund a parachain",
												"slot. It will be withdrawable when the crowdloan has ended and the funds are unused."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "448",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "449"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "449",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "449",
						"type": {
							"path": [
								"sp_runtime",
								"MultiSigner"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Ed25519",
											"fields": [
												{
													"name": null,
													"type": "42",
													"typeName": "ed25519::Public",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Sr25519",
											"fields": [
												{
													"name": null,
													"type": "45",
													"typeName": "sr25519::Public",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Ecdsa",
											"fields": [
												{
													"name": null,
													"type": "450",
													"typeName": "ecdsa::Public",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "450",
						"type": {
							"path": [
								"sp_core",
								"ecdsa",
								"Public"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "451",
											"typeName": "[u8; 33]",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "451",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "33",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "452",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "453"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "453",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "453",
						"type": {
							"path": [
								"sp_runtime",
								"MultiSignature"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Ed25519",
											"fields": [
												{
													"name": null,
													"type": "257",
													"typeName": "ed25519::Signature",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Sr25519",
											"fields": [
												{
													"name": null,
													"type": "80",
													"typeName": "sr25519::Signature",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Ecdsa",
											"fields": [
												{
													"name": null,
													"type": "454",
													"typeName": "ecdsa::Signature",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "454",
						"type": {
							"path": [
								"sp_core",
								"ecdsa",
								"Signature"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "455",
											"typeName": "[u8; 65]",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "455",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "65",
									"type": "2"
								}
							},
							"docs": []
						}
					},
					{
						"id": "456",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"assigned_slots",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "assign_perm_parachain_slot",
											"fields": [
												{
													"name": "id",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "0",
											"docs": [
												"Assign a permanent parachain slot and immediately create a lease for it."
											]
										},
										{
											"name": "assign_temp_parachain_slot",
											"fields": [
												{
													"name": "id",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "lease_period_start",
													"type": "457",
													"typeName": "SlotLeasePeriodStart",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Assign a temporary parachain slot. The function tries to create a lease for it",
												"immediately if `SlotLeasePeriodStart::Current` is specified, and if the number",
												"of currently active temporary slots is below `MaxTemporarySlotPerLeasePeriod`."
											]
										},
										{
											"name": "unassign_parachain_slot",
											"fields": [
												{
													"name": "id",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Unassign a permanent or temporary parachain slot"
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "457",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"assigned_slots",
								"SlotLeasePeriodStart"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Current",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Next",
											"fields": [],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "458",
						"type": {
							"path": [
								"pallet_xcm",
								"pallet",
								"Call"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "send",
											"fields": [
												{
													"name": "dest",
													"type": "136",
													"typeName": "Box<VersionedMultiLocation>",
													"docs": []
												},
												{
													"name": "message",
													"type": "434",
													"typeName": "Box<VersionedXcm<()>>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "teleport_assets",
											"fields": [
												{
													"name": "dest",
													"type": "136",
													"typeName": "Box<VersionedMultiLocation>",
													"docs": []
												},
												{
													"name": "beneficiary",
													"type": "136",
													"typeName": "Box<VersionedMultiLocation>",
													"docs": []
												},
												{
													"name": "assets",
													"type": "131",
													"typeName": "Box<VersionedMultiAssets>",
													"docs": []
												},
												{
													"name": "fee_asset_item",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "1",
											"docs": [
												"Teleport some assets from the local chain to some destination chain.",
												"",
												"Fee payment on the destination side is made from the asset in the `assets` vector of",
												"index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
												"with all fees taken as needed from the asset.",
												"",
												"- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
												"- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
												"  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
												"- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
												"  an `AccountId32` value.",
												"- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
												"  `dest` side. May not be empty.",
												"- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
												"  fees."
											]
										},
										{
											"name": "reserve_transfer_assets",
											"fields": [
												{
													"name": "dest",
													"type": "136",
													"typeName": "Box<VersionedMultiLocation>",
													"docs": []
												},
												{
													"name": "beneficiary",
													"type": "136",
													"typeName": "Box<VersionedMultiLocation>",
													"docs": []
												},
												{
													"name": "assets",
													"type": "131",
													"typeName": "Box<VersionedMultiAssets>",
													"docs": []
												},
												{
													"name": "fee_asset_item",
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "2",
											"docs": [
												"Transfer some assets from the local chain to the sovereign account of a destination",
												"chain and forward a notification XCM.",
												"",
												"Fee payment on the destination side is made from the asset in the `assets` vector of",
												"index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
												"with all fees taken as needed from the asset.",
												"",
												"- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
												"- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
												"  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
												"- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
												"  an `AccountId32` value.",
												"- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
												"  `dest` side.",
												"- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
												"  fees."
											]
										},
										{
											"name": "execute",
											"fields": [
												{
													"name": "message",
													"type": "459",
													"typeName": "Box<VersionedXcm<<T as SysConfig>::Call>>",
													"docs": []
												},
												{
													"name": "max_weight",
													"type": "8",
													"typeName": "Weight",
													"docs": []
												}
											],
											"index": "3",
											"docs": [
												"Execute an XCM message from a local, signed, origin.",
												"",
												"An event is deposited indicating whether `msg` could be executed completely or only",
												"partially.",
												"",
												"No more than `max_weight` will be used in its attempted execution. If this is less than the",
												"maximum amount of weight that the message could take to be executed, then no execution",
												"attempt will be made.",
												"",
												"NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
												"to completion; only that *some* of it was executed."
											]
										},
										{
											"name": "force_xcm_version",
											"fields": [
												{
													"name": "location",
													"type": "102",
													"typeName": "Box<MultiLocation>",
													"docs": []
												},
												{
													"name": "xcm_version",
													"type": "4",
													"typeName": "XcmVersion",
													"docs": []
												}
											],
											"index": "4",
											"docs": [
												"Extoll that a particular destination can be communicated with through a particular",
												"version of XCM.",
												"",
												"- `origin`: Must be Root.",
												"- `location`: The destination that is being described.",
												"- `xcm_version`: The latest version of XCM that `location` supports."
											]
										},
										{
											"name": "force_default_xcm_version",
											"fields": [
												{
													"name": "maybe_xcm_version",
													"type": "250",
													"typeName": "Option<XcmVersion>",
													"docs": []
												}
											],
											"index": "5",
											"docs": [
												"Set a safe XCM version (the version that XCM should be encoded with if the most recent",
												"version a destination can accept is unknown).",
												"",
												"- `origin`: Must be Root.",
												"- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
											]
										},
										{
											"name": "force_subscribe_version_notify",
											"fields": [
												{
													"name": "location",
													"type": "136",
													"typeName": "Box<VersionedMultiLocation>",
													"docs": []
												}
											],
											"index": "6",
											"docs": [
												"Ask a location to notify us regarding their XCM version and any changes to it.",
												"",
												"- `origin`: Must be Root.",
												"- `location`: The location to which we should subscribe for XCM version notifications."
											]
										},
										{
											"name": "force_unsubscribe_version_notify",
											"fields": [
												{
													"name": "location",
													"type": "136",
													"typeName": "Box<VersionedMultiLocation>",
													"docs": []
												}
											],
											"index": "7",
											"docs": [
												"Require that a particular destination should no longer notify us regarding any XCM",
												"version changes.",
												"",
												"- `origin`: Must be Root.",
												"- `location`: The location to which we are currently subscribed for XCM version",
												"  notifications which we no longer desire."
											]
										},
										{
											"name": "limited_reserve_transfer_assets",
											"fields": [
												{
													"name": "dest",
													"type": "136",
													"typeName": "Box<VersionedMultiLocation>",
													"docs": []
												},
												{
													"name": "beneficiary",
													"type": "136",
													"typeName": "Box<VersionedMultiLocation>",
													"docs": []
												},
												{
													"name": "assets",
													"type": "131",
													"typeName": "Box<VersionedMultiAssets>",
													"docs": []
												},
												{
													"name": "fee_asset_item",
													"type": "4",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "weight_limit",
													"type": "129",
													"typeName": "WeightLimit",
													"docs": []
												}
											],
											"index": "8",
											"docs": [
												"Transfer some assets from the local chain to the sovereign account of a destination",
												"chain and forward a notification XCM.",
												"",
												"Fee payment on the destination side is made from the asset in the `assets` vector of",
												"index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
												"is needed than `weight_limit`, then the operation will fail and the assets send may be",
												"at risk.",
												"",
												"- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
												"- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
												"  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
												"- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
												"  an `AccountId32` value.",
												"- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
												"  `dest` side.",
												"- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
												"  fees.",
												"- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
											]
										},
										{
											"name": "limited_teleport_assets",
											"fields": [
												{
													"name": "dest",
													"type": "136",
													"typeName": "Box<VersionedMultiLocation>",
													"docs": []
												},
												{
													"name": "beneficiary",
													"type": "136",
													"typeName": "Box<VersionedMultiLocation>",
													"docs": []
												},
												{
													"name": "assets",
													"type": "131",
													"typeName": "Box<VersionedMultiAssets>",
													"docs": []
												},
												{
													"name": "fee_asset_item",
													"type": "4",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "weight_limit",
													"type": "129",
													"typeName": "WeightLimit",
													"docs": []
												}
											],
											"index": "9",
											"docs": [
												"Teleport some assets from the local chain to some destination chain.",
												"",
												"Fee payment on the destination side is made from the asset in the `assets` vector of",
												"index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
												"is needed than `weight_limit`, then the operation will fail and the assets send may be",
												"at risk.",
												"",
												"- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
												"- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
												"  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
												"- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
												"  an `AccountId32` value.",
												"- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
												"  `dest` side. May not be empty.",
												"- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
												"  fees.",
												"- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
											]
										}
									]
								}
							},
							"docs": [
								"Contains one variant per dispatchable that can be called by an extrinsic."
							]
						}
					},
					{
						"id": "459",
						"type": {
							"path": [
								"xcm",
								"VersionedXcm"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "V0",
											"fields": [
												{
													"name": null,
													"type": "460",
													"typeName": "v0::Xcm<Call>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "V1",
											"fields": [
												{
													"name": null,
													"type": "465",
													"typeName": "v1::Xcm<Call>",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "V2",
											"fields": [
												{
													"name": null,
													"type": "469",
													"typeName": "v2::Xcm<Call>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "460",
						"type": {
							"path": [
								"xcm",
								"v0",
								"Xcm"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "WithdrawAsset",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "effects",
													"type": "461",
													"typeName": "Vec<Order<Call>>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "ReserveAssetDeposit",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "effects",
													"type": "461",
													"typeName": "Vec<Order<Call>>",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "TeleportAsset",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "effects",
													"type": "461",
													"typeName": "Vec<Order<Call>>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "QueryResponse",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "response",
													"type": "439",
													"typeName": "Response",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "TransferAsset",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "dest",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "TransferReserveAsset",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "dest",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "436",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "Transact",
											"fields": [
												{
													"name": "origin_type",
													"type": "124",
													"typeName": "OriginKind",
													"docs": []
												},
												{
													"name": "require_weight_at_most",
													"type": "8",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "call",
													"type": "464",
													"typeName": "DoubleEncoded<Call>",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "HrmpNewChannelOpenRequest",
											"fields": [
												{
													"name": "sender",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "max_message_size",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "max_capacity",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "HrmpChannelAccepted",
											"fields": [
												{
													"name": "recipient",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										},
										{
											"name": "HrmpChannelClosing",
											"fields": [
												{
													"name": "initiator",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "sender",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "recipient",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "9",
											"docs": []
										},
										{
											"name": "RelayedFrom",
											"fields": [
												{
													"name": "who",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "message",
													"type": "460",
													"typeName": "alloc::boxed::Box<Xcm<Call>>",
													"docs": []
												}
											],
											"index": "10",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "461",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "462"
								}
							},
							"docs": []
						}
					},
					{
						"id": "462",
						"type": {
							"path": [
								"xcm",
								"v0",
								"order",
								"Order"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Null",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "DepositAsset",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "dest",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "DepositReserveAsset",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "dest",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "436",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "ExchangeAsset",
											"fields": [
												{
													"name": "give",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "receive",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "InitiateReserveWithdraw",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "reserve",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "436",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "InitiateTeleport",
											"fields": [
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												},
												{
													"name": "dest",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "436",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "QueryHolding",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "dest",
													"type": "134",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "assets",
													"type": "132",
													"typeName": "Vec<MultiAsset>",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "BuyExecution",
											"fields": [
												{
													"name": "fees",
													"type": "133",
													"typeName": "MultiAsset",
													"docs": []
												},
												{
													"name": "weight",
													"type": "8",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "debt",
													"type": "8",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "halt_on_error",
													"type": "34",
													"typeName": "bool",
													"docs": []
												},
												{
													"name": "xcm",
													"type": "463",
													"typeName": "Vec<Xcm<Call>>",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "463",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "460"
								}
							},
							"docs": []
						}
					},
					{
						"id": "464",
						"type": {
							"path": [
								"xcm",
								"double_encoded",
								"DoubleEncoded"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "encoded",
											"type": "10",
											"typeName": "Vec<u8>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "465",
						"type": {
							"path": [
								"xcm",
								"v1",
								"Xcm"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "WithdrawAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "effects",
													"type": "466",
													"typeName": "Vec<Order<Call>>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "ReserveAssetDeposited",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "effects",
													"type": "466",
													"typeName": "Vec<Order<Call>>",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "ReceiveTeleportedAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "effects",
													"type": "466",
													"typeName": "Vec<Order<Call>>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "QueryResponse",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "response",
													"type": "444",
													"typeName": "Response",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "TransferAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "beneficiary",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "TransferReserveAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "441",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "Transact",
											"fields": [
												{
													"name": "origin_type",
													"type": "124",
													"typeName": "OriginKind",
													"docs": []
												},
												{
													"name": "require_weight_at_most",
													"type": "8",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "call",
													"type": "464",
													"typeName": "DoubleEncoded<Call>",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "HrmpNewChannelOpenRequest",
											"fields": [
												{
													"name": "sender",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "max_message_size",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "max_capacity",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "HrmpChannelAccepted",
											"fields": [
												{
													"name": "recipient",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										},
										{
											"name": "HrmpChannelClosing",
											"fields": [
												{
													"name": "initiator",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "sender",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "recipient",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "9",
											"docs": []
										},
										{
											"name": "RelayedFrom",
											"fields": [
												{
													"name": "who",
													"type": "103",
													"typeName": "InteriorMultiLocation",
													"docs": []
												},
												{
													"name": "message",
													"type": "465",
													"typeName": "alloc::boxed::Box<Xcm<Call>>",
													"docs": []
												}
											],
											"index": "10",
											"docs": []
										},
										{
											"name": "SubscribeVersion",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "max_response_weight",
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "11",
											"docs": []
										},
										{
											"name": "UnsubscribeVersion",
											"fields": [],
											"index": "12",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "466",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "467"
								}
							},
							"docs": []
						}
					},
					{
						"id": "467",
						"type": {
							"path": [
								"xcm",
								"v1",
								"order",
								"Order"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Noop",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "DepositAsset",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "max_assets",
													"type": "4",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "beneficiary",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "DepositReserveAsset",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "max_assets",
													"type": "4",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "441",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "ExchangeAsset",
											"fields": [
												{
													"name": "give",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "receive",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "InitiateReserveWithdraw",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "reserve",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "441",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "InitiateTeleport",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "effects",
													"type": "441",
													"typeName": "Vec<Order<()>>",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "QueryHolding",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "BuyExecution",
											"fields": [
												{
													"name": "fees",
													"type": "116",
													"typeName": "MultiAsset",
													"docs": []
												},
												{
													"name": "weight",
													"type": "8",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "debt",
													"type": "8",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "halt_on_error",
													"type": "34",
													"typeName": "bool",
													"docs": []
												},
												{
													"name": "instructions",
													"type": "468",
													"typeName": "Vec<Xcm<Call>>",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "468",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "465"
								}
							},
							"docs": []
						}
					},
					{
						"id": "469",
						"type": {
							"path": [
								"xcm",
								"v2",
								"Xcm"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "470",
											"typeName": "Vec<Instruction<Call>>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "470",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "471"
								}
							},
							"docs": []
						}
					},
					{
						"id": "471",
						"type": {
							"path": [
								"xcm",
								"v2",
								"Instruction"
							],
							"params": [
								{
									"name": "Call",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "WithdrawAsset",
											"fields": [
												{
													"name": null,
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "ReserveAssetDeposited",
											"fields": [
												{
													"name": null,
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "ReceiveTeleportedAsset",
											"fields": [
												{
													"name": null,
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "QueryResponse",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": "response",
													"type": "121",
													"typeName": "Response",
													"docs": []
												},
												{
													"name": "max_weight",
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "TransferAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "beneficiary",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "TransferReserveAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "xcm",
													"type": "111",
													"typeName": "Xcm<()>",
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "Transact",
											"fields": [
												{
													"name": "origin_type",
													"type": "124",
													"typeName": "OriginKind",
													"docs": []
												},
												{
													"name": "require_weight_at_most",
													"type": "107",
													"typeName": "u64",
													"docs": []
												},
												{
													"name": "call",
													"type": "464",
													"typeName": "DoubleEncoded<Call>",
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "HrmpNewChannelOpenRequest",
											"fields": [
												{
													"name": "sender",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "max_message_size",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "max_capacity",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "HrmpChannelAccepted",
											"fields": [
												{
													"name": "recipient",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										},
										{
											"name": "HrmpChannelClosing",
											"fields": [
												{
													"name": "initiator",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "sender",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "recipient",
													"type": "105",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "9",
											"docs": []
										},
										{
											"name": "ClearOrigin",
											"fields": [],
											"index": "10",
											"docs": []
										},
										{
											"name": "DescendOrigin",
											"fields": [
												{
													"name": null,
													"type": "103",
													"typeName": "InteriorMultiLocation",
													"docs": []
												}
											],
											"index": "11",
											"docs": []
										},
										{
											"name": "ReportError",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "max_response_weight",
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "12",
											"docs": []
										},
										{
											"name": "DepositAsset",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "max_assets",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "beneficiary",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "13",
											"docs": []
										},
										{
											"name": "DepositReserveAsset",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "max_assets",
													"type": "105",
													"typeName": "u32",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "xcm",
													"type": "111",
													"typeName": "Xcm<()>",
													"docs": []
												}
											],
											"index": "14",
											"docs": []
										},
										{
											"name": "ExchangeAsset",
											"fields": [
												{
													"name": "give",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "receive",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												}
											],
											"index": "15",
											"docs": []
										},
										{
											"name": "InitiateReserveWithdraw",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "reserve",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "xcm",
													"type": "111",
													"typeName": "Xcm<()>",
													"docs": []
												}
											],
											"index": "16",
											"docs": []
										},
										{
											"name": "InitiateTeleport",
											"fields": [
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "xcm",
													"type": "111",
													"typeName": "Xcm<()>",
													"docs": []
												}
											],
											"index": "17",
											"docs": []
										},
										{
											"name": "QueryHolding",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": "dest",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												},
												{
													"name": "assets",
													"type": "126",
													"typeName": "MultiAssetFilter",
													"docs": []
												},
												{
													"name": "max_response_weight",
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "18",
											"docs": []
										},
										{
											"name": "BuyExecution",
											"fields": [
												{
													"name": "fees",
													"type": "116",
													"typeName": "MultiAsset",
													"docs": []
												},
												{
													"name": "weight_limit",
													"type": "129",
													"typeName": "WeightLimit",
													"docs": []
												}
											],
											"index": "19",
											"docs": []
										},
										{
											"name": "RefundSurplus",
											"fields": [],
											"index": "20",
											"docs": []
										},
										{
											"name": "SetErrorHandler",
											"fields": [
												{
													"name": null,
													"type": "469",
													"typeName": "Xcm<Call>",
													"docs": []
												}
											],
											"index": "21",
											"docs": []
										},
										{
											"name": "SetAppendix",
											"fields": [
												{
													"name": null,
													"type": "469",
													"typeName": "Xcm<Call>",
													"docs": []
												}
											],
											"index": "22",
											"docs": []
										},
										{
											"name": "ClearError",
											"fields": [],
											"index": "23",
											"docs": []
										},
										{
											"name": "ClaimAsset",
											"fields": [
												{
													"name": "assets",
													"type": "114",
													"typeName": "MultiAssets",
													"docs": []
												},
												{
													"name": "ticket",
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "24",
											"docs": []
										},
										{
											"name": "Trap",
											"fields": [
												{
													"name": null,
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "25",
											"docs": []
										},
										{
											"name": "SubscribeVersion",
											"fields": [
												{
													"name": "query_id",
													"type": "107",
													"typeName": "QueryId",
													"docs": []
												},
												{
													"name": "max_response_weight",
													"type": "107",
													"typeName": "u64",
													"docs": []
												}
											],
											"index": "26",
											"docs": []
										},
										{
											"name": "UnsubscribeVersion",
											"fields": [],
											"index": "27",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "472",
						"type": {
							"path": [
								"westend_runtime",
								"OriginCaller"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "system",
											"fields": [
												{
													"name": null,
													"type": "473",
													"typeName": "frame_system::Origin<Runtime>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "ParachainsOrigin",
											"fields": [
												{
													"name": null,
													"type": "474",
													"typeName": "parachains_origin::Origin",
													"docs": []
												}
											],
											"index": "41",
											"docs": []
										},
										{
											"name": "XcmPallet",
											"fields": [
												{
													"name": null,
													"type": "475",
													"typeName": "pallet_xcm::Origin",
													"docs": []
												}
											],
											"index": "99",
											"docs": []
										},
										{
											"name": "Void",
											"fields": [
												{
													"name": null,
													"type": "476",
													"typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "473",
						"type": {
							"path": [
								"frame_support",
								"dispatch",
								"RawOrigin"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Root",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Signed",
											"fields": [
												{
													"name": null,
													"type": "0",
													"typeName": "AccountId",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "None",
											"fields": [],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "474",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"origin",
								"pallet",
								"Origin"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Parachain",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "475",
						"type": {
							"path": [
								"pallet_xcm",
								"pallet",
								"Origin"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Xcm",
											"fields": [
												{
													"name": null,
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Response",
											"fields": [
												{
													"name": null,
													"type": "102",
													"typeName": "MultiLocation",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "476",
						"type": {
							"path": [
								"sp_core",
								"Void"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": []
								}
							},
							"docs": []
						}
					},
					{
						"id": "477",
						"type": {
							"path": [
								"pallet_utility",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "TooManyCalls",
											"fields": [],
											"index": "0",
											"docs": [
												"Too many calls batched."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "478",
						"type": {
							"path": [
								"pallet_identity",
								"types",
								"Registration"
							],
							"params": [
								{
									"name": "Balance",
									"type": "6"
								},
								{
									"name": "MaxJudgements",
									"type": null
								},
								{
									"name": "MaxAdditionalFields",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "judgements",
											"type": "479",
											"typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
											"docs": []
										},
										{
											"name": "deposit",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "info",
											"type": "282",
											"typeName": "IdentityInfo<MaxAdditionalFields>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "479",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "480"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "481",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "480",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"4",
									"320"
								]
							},
							"docs": []
						}
					},
					{
						"id": "481",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "480"
								}
							},
							"docs": []
						}
					},
					{
						"id": "482",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"6",
									"483"
								]
							},
							"docs": []
						}
					},
					{
						"id": "483",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "0"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "201",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "484",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "485"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "487",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "485",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "486"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "486",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "486",
						"type": {
							"path": [
								"pallet_identity",
								"types",
								"RegistrarInfo"
							],
							"params": [
								{
									"name": "Balance",
									"type": "6"
								},
								{
									"name": "AccountId",
									"type": "0"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "account",
											"type": "0",
											"typeName": "AccountId",
											"docs": []
										},
										{
											"name": "fee",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "fields",
											"type": "318",
											"typeName": "IdentityFields",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "487",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "485"
								}
							},
							"docs": []
						}
					},
					{
						"id": "488",
						"type": {
							"path": [
								"pallet_identity",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "TooManySubAccounts",
											"fields": [],
											"index": "0",
											"docs": [
												"Too many subs-accounts."
											]
										},
										{
											"name": "NotFound",
											"fields": [],
											"index": "1",
											"docs": [
												"Account isn't found."
											]
										},
										{
											"name": "NotNamed",
											"fields": [],
											"index": "2",
											"docs": [
												"Account isn't named."
											]
										},
										{
											"name": "EmptyIndex",
											"fields": [],
											"index": "3",
											"docs": [
												"Empty index."
											]
										},
										{
											"name": "FeeChanged",
											"fields": [],
											"index": "4",
											"docs": [
												"Fee is changed."
											]
										},
										{
											"name": "NoIdentity",
											"fields": [],
											"index": "5",
											"docs": [
												"No identity found."
											]
										},
										{
											"name": "StickyJudgement",
											"fields": [],
											"index": "6",
											"docs": [
												"Sticky judgement."
											]
										},
										{
											"name": "JudgementGiven",
											"fields": [],
											"index": "7",
											"docs": [
												"Judgement given."
											]
										},
										{
											"name": "InvalidJudgement",
											"fields": [],
											"index": "8",
											"docs": [
												"Invalid judgement."
											]
										},
										{
											"name": "InvalidIndex",
											"fields": [],
											"index": "9",
											"docs": [
												"The index is invalid."
											]
										},
										{
											"name": "InvalidTarget",
											"fields": [],
											"index": "10",
											"docs": [
												"The target is invalid."
											]
										},
										{
											"name": "TooManyFields",
											"fields": [],
											"index": "11",
											"docs": [
												"Too many additional fields."
											]
										},
										{
											"name": "TooManyRegistrars",
											"fields": [],
											"index": "12",
											"docs": [
												"Maximum amount of registrars reached. Cannot add any more."
											]
										},
										{
											"name": "AlreadyClaimed",
											"fields": [],
											"index": "13",
											"docs": [
												"Account ID is already named."
											]
										},
										{
											"name": "NotSub",
											"fields": [],
											"index": "14",
											"docs": [
												"Sender is not a sub-account."
											]
										},
										{
											"name": "NotOwned",
											"fields": [],
											"index": "15",
											"docs": [
												"Sub-account isn't owned by sender."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "489",
						"type": {
							"path": [
								"pallet_recovery",
								"RecoveryConfig"
							],
							"params": [
								{
									"name": "BlockNumber",
									"type": "4"
								},
								{
									"name": "Balance",
									"type": "6"
								},
								{
									"name": "Friends",
									"type": "490"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "delay_period",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "deposit",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "friends",
											"type": "490",
											"typeName": "Friends",
											"docs": []
										},
										{
											"name": "threshold",
											"type": "67",
											"typeName": "u16",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "490",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "0"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "201",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "491",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"0",
									"0"
								]
							},
							"docs": []
						}
					},
					{
						"id": "492",
						"type": {
							"path": [
								"pallet_recovery",
								"ActiveRecovery"
							],
							"params": [
								{
									"name": "BlockNumber",
									"type": "4"
								},
								{
									"name": "Balance",
									"type": "6"
								},
								{
									"name": "Friends",
									"type": "490"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "created",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "deposit",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "friends",
											"type": "490",
											"typeName": "Friends",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "493",
						"type": {
							"path": [
								"pallet_recovery",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "NotAllowed",
											"fields": [],
											"index": "0",
											"docs": [
												"User is not allowed to make a call on behalf of this account"
											]
										},
										{
											"name": "ZeroThreshold",
											"fields": [],
											"index": "1",
											"docs": [
												"Threshold must be greater than zero"
											]
										},
										{
											"name": "NotEnoughFriends",
											"fields": [],
											"index": "2",
											"docs": [
												"Friends list must be greater than zero and threshold"
											]
										},
										{
											"name": "MaxFriends",
											"fields": [],
											"index": "3",
											"docs": [
												"Friends list must be less than max friends"
											]
										},
										{
											"name": "NotSorted",
											"fields": [],
											"index": "4",
											"docs": [
												"Friends list must be sorted and free of duplicates"
											]
										},
										{
											"name": "NotRecoverable",
											"fields": [],
											"index": "5",
											"docs": [
												"This account is not set up for recovery"
											]
										},
										{
											"name": "AlreadyRecoverable",
											"fields": [],
											"index": "6",
											"docs": [
												"This account is already set up for recovery"
											]
										},
										{
											"name": "AlreadyStarted",
											"fields": [],
											"index": "7",
											"docs": [
												"A recovery process has already started for this account"
											]
										},
										{
											"name": "NotStarted",
											"fields": [],
											"index": "8",
											"docs": [
												"A recovery process has not started for this rescuer"
											]
										},
										{
											"name": "NotFriend",
											"fields": [],
											"index": "9",
											"docs": [
												"This account is not a friend who can vouch"
											]
										},
										{
											"name": "DelayPeriod",
											"fields": [],
											"index": "10",
											"docs": [
												"The friend must wait until the delay period to vouch for this recovery"
											]
										},
										{
											"name": "AlreadyVouched",
											"fields": [],
											"index": "11",
											"docs": [
												"This user has already vouched for this recovery"
											]
										},
										{
											"name": "Threshold",
											"fields": [],
											"index": "12",
											"docs": [
												"The threshold for recovering this account has not been met"
											]
										},
										{
											"name": "StillActive",
											"fields": [],
											"index": "13",
											"docs": [
												"There are still active recovery attempts that need to be closed"
											]
										},
										{
											"name": "AlreadyProxy",
											"fields": [],
											"index": "14",
											"docs": [
												"This account is already set up for recovery"
											]
										},
										{
											"name": "BadState",
											"fields": [],
											"index": "15",
											"docs": [
												"Some internal state is broken."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "494",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "323"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "495",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "495",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "323"
								}
							},
							"docs": []
						}
					},
					{
						"id": "496",
						"type": {
							"path": [
								"pallet_vesting",
								"Releases"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "V0",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "V1",
											"fields": [],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "497",
						"type": {
							"path": [
								"pallet_vesting",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "NotVesting",
											"fields": [],
											"index": "0",
											"docs": [
												"The account given is not vesting."
											]
										},
										{
											"name": "AtMaxVestingSchedules",
											"fields": [],
											"index": "1",
											"docs": [
												"The account already has `MaxVestingSchedules` count of schedules and thus",
												"cannot add another one. Consider merging existing schedules in order to add another."
											]
										},
										{
											"name": "AmountLow",
											"fields": [],
											"index": "2",
											"docs": [
												"Amount being transferred is too low to create a vesting schedule."
											]
										},
										{
											"name": "ScheduleIndexOutOfBounds",
											"fields": [],
											"index": "3",
											"docs": [
												"An index was out of bounds of the vesting schedules."
											]
										},
										{
											"name": "InvalidScheduleParams",
											"fields": [],
											"index": "4",
											"docs": [
												"Failed to create a new schedule because some parameter was invalid."
											]
										}
									]
								}
							},
							"docs": [
								"Error for the vesting pallet."
							]
						}
					},
					{
						"id": "498",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "499"
								}
							},
							"docs": []
						}
					},
					{
						"id": "499",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "500"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "500",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "500",
						"type": {
							"path": [
								"pallet_scheduler",
								"ScheduledV3"
							],
							"params": [
								{
									"name": "Call",
									"type": "326"
								},
								{
									"name": "BlockNumber",
									"type": "4"
								},
								{
									"name": "PalletsOrigin",
									"type": "472"
								},
								{
									"name": "AccountId",
									"type": "0"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "maybe_id",
											"type": "60",
											"typeName": "Option<Vec<u8>>",
											"docs": []
										},
										{
											"name": "priority",
											"type": "2",
											"typeName": "schedule::Priority",
											"docs": []
										},
										{
											"name": "call",
											"type": "326",
											"typeName": "Call",
											"docs": []
										},
										{
											"name": "maybe_periodic",
											"type": "325",
											"typeName": "Option<schedule::Period<BlockNumber>>",
											"docs": []
										},
										{
											"name": "origin",
											"type": "472",
											"typeName": "PalletsOrigin",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "501",
						"type": {
							"path": [
								"pallet_scheduler",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "FailedToSchedule",
											"fields": [],
											"index": "0",
											"docs": [
												"Failed to schedule a call"
											]
										},
										{
											"name": "NotFound",
											"fields": [],
											"index": "1",
											"docs": [
												"Cannot find the scheduled call."
											]
										},
										{
											"name": "TargetBlockNumberInPast",
											"fields": [],
											"index": "2",
											"docs": [
												"Given target block number is in the past."
											]
										},
										{
											"name": "RescheduleNoChange",
											"fields": [],
											"index": "3",
											"docs": [
												"Reschedule failed because it does not change scheduled time."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "502",
						"type": {
							"path": [
								"pallet_preimage",
								"RequestStatus"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								},
								{
									"name": "Balance",
									"type": "6"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Unrequested",
											"fields": [
												{
													"name": null,
													"type": "503",
													"typeName": "Option<(AccountId, Balance)>",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Requested",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "503",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "220"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "220",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "504",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "2"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "10",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "505",
						"type": {
							"path": [
								"pallet_preimage",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "TooLarge",
											"fields": [],
											"index": "0",
											"docs": [
												"Preimage is too large to store on-chain."
											]
										},
										{
											"name": "AlreadyNoted",
											"fields": [],
											"index": "1",
											"docs": [
												"Preimage has already been noted on-chain."
											]
										},
										{
											"name": "NotAuthorized",
											"fields": [],
											"index": "2",
											"docs": [
												"The user is not authorized to perform this action."
											]
										},
										{
											"name": "NotNoted",
											"fields": [],
											"index": "3",
											"docs": [
												"The preimage cannot be removed since it has not yet been noted."
											]
										},
										{
											"name": "Requested",
											"fields": [],
											"index": "4",
											"docs": [
												"A preimage may not be removed when there are outstanding requests."
											]
										},
										{
											"name": "NotRequested",
											"fields": [],
											"index": "5",
											"docs": [
												"The preimage request cannot be removed since no outstanding requests exist."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "506",
						"type": {
							"path": [
								"pallet_sudo",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "RequireSudo",
											"fields": [],
											"index": "0",
											"docs": [
												"Sender must be the Sudo account"
											]
										}
									]
								}
							},
							"docs": [
								"Error for the Sudo pallet"
							]
						}
					},
					{
						"id": "507",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"508",
									"6"
								]
							},
							"docs": []
						}
					},
					{
						"id": "508",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "509"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "510",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "509",
						"type": {
							"path": [
								"pallet_proxy",
								"ProxyDefinition"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								},
								{
									"name": "ProxyType",
									"type": "66"
								},
								{
									"name": "BlockNumber",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "delegate",
											"type": "0",
											"typeName": "AccountId",
											"docs": []
										},
										{
											"name": "proxy_type",
											"type": "66",
											"typeName": "ProxyType",
											"docs": []
										},
										{
											"name": "delay",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "510",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "509"
								}
							},
							"docs": []
						}
					},
					{
						"id": "511",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"512",
									"6"
								]
							},
							"docs": []
						}
					},
					{
						"id": "512",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "513"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "514",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "513",
						"type": {
							"path": [
								"pallet_proxy",
								"Announcement"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								},
								{
									"name": "Hash",
									"type": "9"
								},
								{
									"name": "BlockNumber",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "real",
											"type": "0",
											"typeName": "AccountId",
											"docs": []
										},
										{
											"name": "call_hash",
											"type": "9",
											"typeName": "Hash",
											"docs": []
										},
										{
											"name": "height",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "514",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "513"
								}
							},
							"docs": []
						}
					},
					{
						"id": "515",
						"type": {
							"path": [
								"pallet_proxy",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "TooMany",
											"fields": [],
											"index": "0",
											"docs": [
												"There are too many proxies registered or too many announcements pending."
											]
										},
										{
											"name": "NotFound",
											"fields": [],
											"index": "1",
											"docs": [
												"Proxy registration not found."
											]
										},
										{
											"name": "NotProxy",
											"fields": [],
											"index": "2",
											"docs": [
												"Sender is not a proxy of the account to be proxied."
											]
										},
										{
											"name": "Unproxyable",
											"fields": [],
											"index": "3",
											"docs": [
												"A call which is incompatible with the proxy type's filter was attempted."
											]
										},
										{
											"name": "Duplicate",
											"fields": [],
											"index": "4",
											"docs": [
												"Account is already a proxy."
											]
										},
										{
											"name": "NoPermission",
											"fields": [],
											"index": "5",
											"docs": [
												"Call may not be made by proxy because it may escalate its privileges."
											]
										},
										{
											"name": "Unannounced",
											"fields": [],
											"index": "6",
											"docs": [
												"Announcement, if made at all, was made too recently."
											]
										},
										{
											"name": "NoSelfProxy",
											"fields": [],
											"index": "7",
											"docs": [
												"Cannot add self as proxy."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "516",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"0",
									"1"
								]
							},
							"docs": []
						}
					},
					{
						"id": "517",
						"type": {
							"path": [
								"pallet_multisig",
								"Multisig"
							],
							"params": [
								{
									"name": "BlockNumber",
									"type": "4"
								},
								{
									"name": "Balance",
									"type": "6"
								},
								{
									"name": "AccountId",
									"type": "0"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "when",
											"type": "69",
											"typeName": "Timepoint<BlockNumber>",
											"docs": []
										},
										{
											"name": "deposit",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "depositor",
											"type": "0",
											"typeName": "AccountId",
											"docs": []
										},
										{
											"name": "approvals",
											"type": "201",
											"typeName": "Vec<AccountId>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "518",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"333",
									"0",
									"6"
								]
							},
							"docs": []
						}
					},
					{
						"id": "519",
						"type": {
							"path": [
								"pallet_multisig",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "MinimumThreshold",
											"fields": [],
											"index": "0",
											"docs": [
												"Threshold must be 2 or greater."
											]
										},
										{
											"name": "AlreadyApproved",
											"fields": [],
											"index": "1",
											"docs": [
												"Call is already approved by this signatory."
											]
										},
										{
											"name": "NoApprovalsNeeded",
											"fields": [],
											"index": "2",
											"docs": [
												"Call doesn't need any (more) approvals."
											]
										},
										{
											"name": "TooFewSignatories",
											"fields": [],
											"index": "3",
											"docs": [
												"There are too few signatories in the list."
											]
										},
										{
											"name": "TooManySignatories",
											"fields": [],
											"index": "4",
											"docs": [
												"There are too many signatories in the list."
											]
										},
										{
											"name": "SignatoriesOutOfOrder",
											"fields": [],
											"index": "5",
											"docs": [
												"The signatories were provided out of order; they should be ordered."
											]
										},
										{
											"name": "SenderInSignatories",
											"fields": [],
											"index": "6",
											"docs": [
												"The sender was contained in the other signatories; it shouldn't be."
											]
										},
										{
											"name": "NotFound",
											"fields": [],
											"index": "7",
											"docs": [
												"Multisig operation not found when attempting to cancel."
											]
										},
										{
											"name": "NotOwner",
											"fields": [],
											"index": "8",
											"docs": [
												"Only the account that originally created the multisig is able to cancel it."
											]
										},
										{
											"name": "NoTimepoint",
											"fields": [],
											"index": "9",
											"docs": [
												"No timepoint was given, yet the multisig operation is already underway."
											]
										},
										{
											"name": "WrongTimepoint",
											"fields": [],
											"index": "10",
											"docs": [
												"A different timepoint was given to the multisig operation that is underway."
											]
										},
										{
											"name": "UnexpectedTimepoint",
											"fields": [],
											"index": "11",
											"docs": [
												"A timepoint was given, yet no multisig operation is underway."
											]
										},
										{
											"name": "MaxWeightTooLow",
											"fields": [],
											"index": "12",
											"docs": [
												"The maximum weight information provided was too low."
											]
										},
										{
											"name": "AlreadyStored",
											"fields": [],
											"index": "13",
											"docs": [
												"The data to be stored is already stored."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "520",
						"type": {
							"path": [
								"pallet_election_provider_multi_phase",
								"Phase"
							],
							"params": [
								{
									"name": "Bn",
									"type": "4"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Off",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Signed",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "Unsigned",
											"fields": [
												{
													"name": null,
													"type": "521",
													"typeName": "(bool, Bn)",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "Emergency",
											"fields": [],
											"index": "3",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "521",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"34",
									"4"
								]
							},
							"docs": []
						}
					},
					{
						"id": "522",
						"type": {
							"path": [
								"pallet_election_provider_multi_phase",
								"ReadySolution"
							],
							"params": [
								{
									"name": "A",
									"type": "0"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "supports",
											"type": "390",
											"typeName": "Supports<A>",
											"docs": []
										},
										{
											"name": "score",
											"type": "387",
											"typeName": "ElectionScore",
											"docs": []
										},
										{
											"name": "compute",
											"type": "71",
											"typeName": "ElectionCompute",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "523",
						"type": {
							"path": [
								"pallet_election_provider_multi_phase",
								"RoundSnapshot"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "voters",
											"type": "524",
											"typeName": "Vec<VoterOf<T>>",
											"docs": []
										},
										{
											"name": "targets",
											"type": "201",
											"typeName": "Vec<T::AccountId>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "524",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "525"
								}
							},
							"docs": []
						}
					},
					{
						"id": "525",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"0",
									"8",
									"209"
								]
							},
							"docs": []
						}
					},
					{
						"id": "526",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_btree_map",
								"BoundedBTreeMap"
							],
							"params": [
								{
									"name": "K",
									"type": "387"
								},
								{
									"name": "V",
									"type": "4"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "527",
											"typeName": "BTreeMap<K, V>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "527",
						"type": {
							"path": [
								"BTreeMap"
							],
							"params": [
								{
									"name": "K",
									"type": "387"
								},
								{
									"name": "V",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "528",
											"typeName": null,
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "528",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "529"
								}
							},
							"docs": []
						}
					},
					{
						"id": "529",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"387",
									"4"
								]
							},
							"docs": []
						}
					},
					{
						"id": "530",
						"type": {
							"path": [
								"pallet_election_provider_multi_phase",
								"signed",
								"SignedSubmission"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								},
								{
									"name": "Balance",
									"type": "6"
								},
								{
									"name": "Solution",
									"type": "336"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "who",
											"type": "0",
											"typeName": "AccountId",
											"docs": []
										},
										{
											"name": "deposit",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "raw_solution",
											"type": "335",
											"typeName": "RawSolution<Solution>",
											"docs": []
										},
										{
											"name": "reward",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "531",
						"type": {
							"path": [
								"pallet_election_provider_multi_phase",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "PreDispatchEarlySubmission",
											"fields": [],
											"index": "0",
											"docs": [
												"Submission was too early."
											]
										},
										{
											"name": "PreDispatchWrongWinnerCount",
											"fields": [],
											"index": "1",
											"docs": [
												"Wrong number of winners presented."
											]
										},
										{
											"name": "PreDispatchWeakSubmission",
											"fields": [],
											"index": "2",
											"docs": [
												"Submission was too weak, score-wise."
											]
										},
										{
											"name": "SignedQueueFull",
											"fields": [],
											"index": "3",
											"docs": [
												"The queue was full, and the solution was not better than any of the existing ones."
											]
										},
										{
											"name": "SignedCannotPayDeposit",
											"fields": [],
											"index": "4",
											"docs": [
												"The origin failed to pay the deposit."
											]
										},
										{
											"name": "SignedInvalidWitness",
											"fields": [],
											"index": "5",
											"docs": [
												"Witness data to dispatchable is invalid."
											]
										},
										{
											"name": "SignedTooMuchWeight",
											"fields": [],
											"index": "6",
											"docs": [
												"The signed submission consumes too much weight"
											]
										},
										{
											"name": "OcwCallWrongEra",
											"fields": [],
											"index": "7",
											"docs": [
												"OCW submitted solution for wrong round"
											]
										},
										{
											"name": "MissingSnapshotMetadata",
											"fields": [],
											"index": "8",
											"docs": [
												"Snapshot metadata should exist but didn't."
											]
										},
										{
											"name": "InvalidSubmissionIndex",
											"fields": [],
											"index": "9",
											"docs": [
												"`Self::insert_submission` returned an invalid index."
											]
										},
										{
											"name": "CallNotAllowed",
											"fields": [],
											"index": "10",
											"docs": [
												"The call is not allowed at this point."
											]
										},
										{
											"name": "FallbackFailed",
											"fields": [],
											"index": "11",
											"docs": [
												"The fallback failed"
											]
										}
									]
								}
							},
							"docs": [
								"Error of the pallet that can be returned in response to dispatches."
							]
						}
					},
					{
						"id": "532",
						"type": {
							"path": [
								"pallet_bags_list",
								"list",
								"Node"
							],
							"params": [
								{
									"name": "T",
									"type": null
								},
								{
									"name": "I",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "id",
											"type": "0",
											"typeName": "T::AccountId",
											"docs": []
										},
										{
											"name": "prev",
											"type": "64",
											"typeName": "Option<T::AccountId>",
											"docs": []
										},
										{
											"name": "next",
											"type": "64",
											"typeName": "Option<T::AccountId>",
											"docs": []
										},
										{
											"name": "bag_upper",
											"type": "8",
											"typeName": "T::Score",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "533",
						"type": {
							"path": [
								"pallet_bags_list",
								"list",
								"Bag"
							],
							"params": [
								{
									"name": "T",
									"type": null
								},
								{
									"name": "I",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "head",
											"type": "64",
											"typeName": "Option<T::AccountId>",
											"docs": []
										},
										{
											"name": "tail",
											"type": "64",
											"typeName": "Option<T::AccountId>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "534",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "8"
								}
							},
							"docs": []
						}
					},
					{
						"id": "535",
						"type": {
							"path": [
								"pallet_bags_list",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								},
								{
									"name": "I",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "NotInSameBag",
											"fields": [],
											"index": "0",
											"docs": [
												"Attempted to place node in front of a node in another bag."
											]
										},
										{
											"name": "IdNotFound",
											"fields": [],
											"index": "1",
											"docs": [
												"Id not found in list."
											]
										},
										{
											"name": "NotHeavier",
											"fields": [],
											"index": "2",
											"docs": [
												"An Id does not have a greater score than another Id."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "536",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"configuration",
								"HostConfiguration"
							],
							"params": [
								{
									"name": "BlockNumber",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "max_code_size",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "max_head_data_size",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "max_upward_queue_count",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "max_upward_queue_size",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "max_upward_message_size",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "max_upward_message_num_per_candidate",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "hrmp_max_message_num_per_candidate",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "validation_upgrade_cooldown",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "validation_upgrade_delay",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "max_pov_size",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "max_downward_message_size",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "ump_service_total_weight",
											"type": "8",
											"typeName": "Weight",
											"docs": []
										},
										{
											"name": "hrmp_max_parachain_outbound_channels",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "hrmp_max_parathread_outbound_channels",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "hrmp_sender_deposit",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "hrmp_recipient_deposit",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "hrmp_channel_max_capacity",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "hrmp_channel_max_total_size",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "hrmp_max_parachain_inbound_channels",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "hrmp_max_parathread_inbound_channels",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "hrmp_channel_max_message_size",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "code_retention_period",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "parathread_cores",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "parathread_retries",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "group_rotation_frequency",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "chain_availability_period",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "thread_availability_period",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "scheduling_lookahead",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "max_validators_per_core",
											"type": "250",
											"typeName": "Option<u32>",
											"docs": []
										},
										{
											"name": "max_validators",
											"type": "250",
											"typeName": "Option<u32>",
											"docs": []
										},
										{
											"name": "dispute_period",
											"type": "4",
											"typeName": "SessionIndex",
											"docs": []
										},
										{
											"name": "dispute_post_conclusion_acceptance_period",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "dispute_max_spam_slots",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "dispute_conclusion_by_time_out_period",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "no_show_slots",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "n_delay_tranches",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "zeroth_delay_tranche_width",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "needed_approvals",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "relay_vrf_modulo_samples",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "ump_max_individual_weight",
											"type": "8",
											"typeName": "Weight",
											"docs": []
										},
										{
											"name": "pvf_checking_enabled",
											"type": "34",
											"typeName": "bool",
											"docs": []
										},
										{
											"name": "pvf_voting_ttl",
											"type": "4",
											"typeName": "SessionIndex",
											"docs": []
										},
										{
											"name": "minimum_validation_upgrade_delay",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "537",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "538"
								}
							},
							"docs": []
						}
					},
					{
						"id": "538",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"4",
									"536"
								]
							},
							"docs": []
						}
					},
					{
						"id": "539",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"configuration",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "InvalidNewValue",
											"fields": [],
											"index": "0",
											"docs": [
												"The new value for a configuration parameter is invalid."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "540",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "404"
								}
							},
							"docs": []
						}
					},
					{
						"id": "541",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "240"
								}
							},
							"docs": []
						}
					},
					{
						"id": "542",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"inclusion",
								"AvailabilityBitfieldRecord"
							],
							"params": [
								{
									"name": "N",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "bitfield",
											"type": "401",
											"typeName": "AvailabilityBitfield",
											"docs": []
										},
										{
											"name": "submitted_at",
											"type": "4",
											"typeName": "N",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "543",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"inclusion",
								"CandidatePendingAvailability"
							],
							"params": [
								{
									"name": "H",
									"type": "9"
								},
								{
									"name": "N",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "core",
											"type": "84",
											"typeName": "CoreIndex",
											"docs": []
										},
										{
											"name": "hash",
											"type": "93",
											"typeName": "CandidateHash",
											"docs": []
										},
										{
											"name": "descriptor",
											"type": "76",
											"typeName": "CandidateDescriptor<H>",
											"docs": []
										},
										{
											"name": "availability_votes",
											"type": "402",
											"typeName": "BitVec<u8, BitOrderLsb0>",
											"docs": []
										},
										{
											"name": "backers",
											"type": "402",
											"typeName": "BitVec<u8, BitOrderLsb0>",
											"docs": []
										},
										{
											"name": "relay_parent_number",
											"type": "4",
											"typeName": "N",
											"docs": []
										},
										{
											"name": "backed_in_number",
											"type": "4",
											"typeName": "N",
											"docs": []
										},
										{
											"name": "backing_group",
											"type": "85",
											"typeName": "GroupIndex",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "544",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"inclusion",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "UnsortedOrDuplicateValidatorIndices",
											"fields": [],
											"index": "0",
											"docs": [
												"Validator indices are out of order or contains duplicates."
											]
										},
										{
											"name": "UnsortedOrDuplicateDisputeStatementSet",
											"fields": [],
											"index": "1",
											"docs": [
												"Dispute statement sets are out of order or contain duplicates."
											]
										},
										{
											"name": "UnsortedOrDuplicateBackedCandidates",
											"fields": [],
											"index": "2",
											"docs": [
												"Backed candidates are out of order (core index) or contain duplicates."
											]
										},
										{
											"name": "UnexpectedRelayParent",
											"fields": [],
											"index": "3",
											"docs": [
												"A different relay parent was provided compared to the on-chain stored one."
											]
										},
										{
											"name": "WrongBitfieldSize",
											"fields": [],
											"index": "4",
											"docs": [
												"Availability bitfield has unexpected size."
											]
										},
										{
											"name": "BitfieldAllZeros",
											"fields": [],
											"index": "5",
											"docs": [
												"Bitfield consists of zeros only."
											]
										},
										{
											"name": "BitfieldDuplicateOrUnordered",
											"fields": [],
											"index": "6",
											"docs": [
												"Multiple bitfields submitted by same validator or validators out of order by index."
											]
										},
										{
											"name": "ValidatorIndexOutOfBounds",
											"fields": [],
											"index": "7",
											"docs": [
												"Validator index out of bounds."
											]
										},
										{
											"name": "InvalidBitfieldSignature",
											"fields": [],
											"index": "8",
											"docs": [
												"Invalid signature"
											]
										},
										{
											"name": "UnscheduledCandidate",
											"fields": [],
											"index": "9",
											"docs": [
												"Candidate submitted but para not scheduled."
											]
										},
										{
											"name": "CandidateScheduledBeforeParaFree",
											"fields": [],
											"index": "10",
											"docs": [
												"Candidate scheduled despite pending candidate already existing for the para."
											]
										},
										{
											"name": "WrongCollator",
											"fields": [],
											"index": "11",
											"docs": [
												"Candidate included with the wrong collator."
											]
										},
										{
											"name": "ScheduledOutOfOrder",
											"fields": [],
											"index": "12",
											"docs": [
												"Scheduled cores out of order."
											]
										},
										{
											"name": "HeadDataTooLarge",
											"fields": [],
											"index": "13",
											"docs": [
												"Head data exceeds the configured maximum."
											]
										},
										{
											"name": "PrematureCodeUpgrade",
											"fields": [],
											"index": "14",
											"docs": [
												"Code upgrade prematurely."
											]
										},
										{
											"name": "NewCodeTooLarge",
											"fields": [],
											"index": "15",
											"docs": [
												"Output code is too large"
											]
										},
										{
											"name": "CandidateNotInParentContext",
											"fields": [],
											"index": "16",
											"docs": [
												"Candidate not in parent context."
											]
										},
										{
											"name": "InvalidGroupIndex",
											"fields": [],
											"index": "17",
											"docs": [
												"Invalid group index in core assignment."
											]
										},
										{
											"name": "InsufficientBacking",
											"fields": [],
											"index": "18",
											"docs": [
												"Insufficient (non-majority) backing."
											]
										},
										{
											"name": "InvalidBacking",
											"fields": [],
											"index": "19",
											"docs": [
												"Invalid (bad signature, unknown validator, etc.) backing."
											]
										},
										{
											"name": "NotCollatorSigned",
											"fields": [],
											"index": "20",
											"docs": [
												"Collator did not sign PoV."
											]
										},
										{
											"name": "ValidationDataHashMismatch",
											"fields": [],
											"index": "21",
											"docs": [
												"The validation data hash does not match expected."
											]
										},
										{
											"name": "IncorrectDownwardMessageHandling",
											"fields": [],
											"index": "22",
											"docs": [
												"The downward message queue is not processed correctly."
											]
										},
										{
											"name": "InvalidUpwardMessages",
											"fields": [],
											"index": "23",
											"docs": [
												"At least one upward message sent does not pass the acceptance criteria."
											]
										},
										{
											"name": "HrmpWatermarkMishandling",
											"fields": [],
											"index": "24",
											"docs": [
												"The candidate didn't follow the rules of HRMP watermark advancement."
											]
										},
										{
											"name": "InvalidOutboundHrmp",
											"fields": [],
											"index": "25",
											"docs": [
												"The HRMP messages sent by the candidate is not valid."
											]
										},
										{
											"name": "InvalidValidationCodeHash",
											"fields": [],
											"index": "26",
											"docs": [
												"The validation code hash of the candidate is not valid."
											]
										},
										{
											"name": "ParaHeadMismatch",
											"fields": [],
											"index": "27",
											"docs": [
												"The `para_head` hash in the candidate descriptor doesn't match the hash of the actual para head in the",
												"commitments."
											]
										},
										{
											"name": "BitfieldReferencesFreedCore",
											"fields": [],
											"index": "28",
											"docs": [
												"A bitfield that references a freed core,",
												"either intentionally or as part of a concluded",
												"invalid dispute."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "545",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"ScrapedOnChainVotes"
							],
							"params": [
								{
									"name": "H",
									"type": "9"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "session",
											"type": "4",
											"typeName": "SessionIndex",
											"docs": []
										},
										{
											"name": "backing_validators_per_candidate",
											"type": "546",
											"typeName": "Vec<(CandidateReceipt<H>, Vec<(ValidatorIndex, ValidityAttestation)>)\n>",
											"docs": []
										},
										{
											"name": "disputes",
											"type": "416",
											"typeName": "MultiDisputeStatementSet",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "546",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "547"
								}
							},
							"docs": []
						}
					},
					{
						"id": "547",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"75",
									"548"
								]
							},
							"docs": []
						}
					},
					{
						"id": "548",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "549"
								}
							},
							"docs": []
						}
					},
					{
						"id": "549",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"404",
									"415"
								]
							},
							"docs": []
						}
					},
					{
						"id": "550",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"paras_inherent",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "TooManyInclusionInherents",
											"fields": [],
											"index": "0",
											"docs": [
												"Inclusion inherent called more than once per block."
											]
										},
										{
											"name": "InvalidParentHeader",
											"fields": [],
											"index": "1",
											"docs": [
												"The hash of the submitted parent header doesn't correspond to the saved block hash of",
												"the parent."
											]
										},
										{
											"name": "CandidateConcludedInvalid",
											"fields": [],
											"index": "2",
											"docs": [
												"Disputed candidate that was concluded invalid."
											]
										},
										{
											"name": "InherentOverweight",
											"fields": [],
											"index": "3",
											"docs": [
												"The data given to the inherent will result in an overweight block."
											]
										},
										{
											"name": "DisputeStatementsUnsortedOrDuplicates",
											"fields": [],
											"index": "4",
											"docs": [
												"The ordering of dispute statements was invalid."
											]
										},
										{
											"name": "DisputeInvalid",
											"fields": [],
											"index": "5",
											"docs": [
												"A dispute statement was invalid."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "551",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "540"
								}
							},
							"docs": []
						}
					},
					{
						"id": "552",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"scheduler",
								"ParathreadClaimQueue"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "queue",
											"type": "553",
											"typeName": "Vec<QueuedParathread>",
											"docs": []
										},
										{
											"name": "next_core_offset",
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "553",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "554"
								}
							},
							"docs": []
						}
					},
					{
						"id": "554",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"scheduler",
								"QueuedParathread"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "claim",
											"type": "555",
											"typeName": "ParathreadEntry",
											"docs": []
										},
										{
											"name": "core_offset",
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "555",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"ParathreadEntry"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "claim",
											"type": "556",
											"typeName": "ParathreadClaim",
											"docs": []
										},
										{
											"name": "retries",
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "556",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"ParathreadClaim"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "77",
											"typeName": "Id",
											"docs": []
										},
										{
											"name": null,
											"type": "78",
											"typeName": "CollatorId",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "557",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "558"
								}
							},
							"docs": []
						}
					},
					{
						"id": "558",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "559"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "559",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "559",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"CoreOccupied"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Parathread",
											"fields": [
												{
													"name": null,
													"type": "555",
													"typeName": "ParathreadEntry",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Parachain",
											"fields": [],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "560",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "77"
								}
							},
							"docs": []
						}
					},
					{
						"id": "561",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "562"
								}
							},
							"docs": []
						}
					},
					{
						"id": "562",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"scheduler",
								"CoreAssignment"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "core",
											"type": "84",
											"typeName": "CoreIndex",
											"docs": []
										},
										{
											"name": "para_id",
											"type": "77",
											"typeName": "ParaId",
											"docs": []
										},
										{
											"name": "kind",
											"type": "563",
											"typeName": "AssignmentKind",
											"docs": []
										},
										{
											"name": "group_idx",
											"type": "85",
											"typeName": "GroupIndex",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "563",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"scheduler",
								"AssignmentKind"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Parachain",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Parathread",
											"fields": [
												{
													"name": null,
													"type": "78",
													"typeName": "CollatorId",
													"docs": []
												},
												{
													"name": null,
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "564",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"paras",
								"PvfCheckActiveVoteState"
							],
							"params": [
								{
									"name": "BlockNumber",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "votes_accept",
											"type": "402",
											"typeName": "BitVec<u8, BitOrderLsb0>",
											"docs": []
										},
										{
											"name": "votes_reject",
											"type": "402",
											"typeName": "BitVec<u8, BitOrderLsb0>",
											"docs": []
										},
										{
											"name": "age",
											"type": "4",
											"typeName": "SessionIndex",
											"docs": []
										},
										{
											"name": "created_at",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "causes",
											"type": "565",
											"typeName": "Vec<PvfCheckCause<BlockNumber>>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "565",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "566"
								}
							},
							"docs": []
						}
					},
					{
						"id": "566",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"paras",
								"PvfCheckCause"
							],
							"params": [
								{
									"name": "BlockNumber",
									"type": "4"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Onboarding",
											"fields": [
												{
													"name": null,
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "Upgrade",
											"fields": [
												{
													"name": "id",
													"type": "77",
													"typeName": "ParaId",
													"docs": []
												},
												{
													"name": "relay_parent_number",
													"type": "4",
													"typeName": "BlockNumber",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "567",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "82"
								}
							},
							"docs": []
						}
					},
					{
						"id": "568",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"paras",
								"ParaLifecycle"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Onboarding",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Parathread",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "Parachain",
											"fields": [],
											"index": "2",
											"docs": []
										},
										{
											"name": "UpgradingParathread",
											"fields": [],
											"index": "3",
											"docs": []
										},
										{
											"name": "DowngradingParachain",
											"fields": [],
											"index": "4",
											"docs": []
										},
										{
											"name": "OffboardingParathread",
											"fields": [],
											"index": "5",
											"docs": []
										},
										{
											"name": "OffboardingParachain",
											"fields": [],
											"index": "6",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "569",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"77",
									"4"
								]
							},
							"docs": []
						}
					},
					{
						"id": "570",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"paras",
								"ParaPastCodeMeta"
							],
							"params": [
								{
									"name": "N",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "upgrade_times",
											"type": "571",
											"typeName": "Vec<ReplacementTimes<N>>",
											"docs": []
										},
										{
											"name": "last_pruned",
											"type": "250",
											"typeName": "Option<N>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "571",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "572"
								}
							},
							"docs": []
						}
					},
					{
						"id": "572",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"paras",
								"ReplacementTimes"
							],
							"params": [
								{
									"name": "N",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "expected_at",
											"type": "4",
											"typeName": "N",
											"docs": []
										},
										{
											"name": "activated_at",
											"type": "4",
											"typeName": "N",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "573",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "569"
								}
							},
							"docs": []
						}
					},
					{
						"id": "574",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"UpgradeGoAhead"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Abort",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "GoAhead",
											"fields": [],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "575",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"UpgradeRestriction"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Present",
											"fields": [],
											"index": "0",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "576",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"paras",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "NotRegistered",
											"fields": [],
											"index": "0",
											"docs": [
												"Para is not registered in our system."
											]
										},
										{
											"name": "CannotOnboard",
											"fields": [],
											"index": "1",
											"docs": [
												"Para cannot be onboarded because it is already tracked by our system."
											]
										},
										{
											"name": "CannotOffboard",
											"fields": [],
											"index": "2",
											"docs": [
												"Para cannot be offboarded at this time."
											]
										},
										{
											"name": "CannotUpgrade",
											"fields": [],
											"index": "3",
											"docs": [
												"Para cannot be upgraded to a parachain."
											]
										},
										{
											"name": "CannotDowngrade",
											"fields": [],
											"index": "4",
											"docs": [
												"Para cannot be downgraded to a parathread."
											]
										},
										{
											"name": "PvfCheckStatementStale",
											"fields": [],
											"index": "5",
											"docs": [
												"The statement for PVF pre-checking is stale."
											]
										},
										{
											"name": "PvfCheckStatementFuture",
											"fields": [],
											"index": "6",
											"docs": [
												"The statement for PVF pre-checking is for a future session."
											]
										},
										{
											"name": "PvfCheckValidatorIndexOutOfBounds",
											"fields": [],
											"index": "7",
											"docs": [
												"Claimed validator index is out of bounds."
											]
										},
										{
											"name": "PvfCheckInvalidSignature",
											"fields": [],
											"index": "8",
											"docs": [
												"The signature for the PVF pre-checking is invalid."
											]
										},
										{
											"name": "PvfCheckDoubleVote",
											"fields": [],
											"index": "9",
											"docs": [
												"The given validator already has cast a vote."
											]
										},
										{
											"name": "PvfCheckSubjectInvalid",
											"fields": [],
											"index": "10",
											"docs": [
												"The given PVF does not exist at the moment of process a vote."
											]
										},
										{
											"name": "PvfCheckDisabled",
											"fields": [],
											"index": "11",
											"docs": [
												"The PVF pre-checking statement cannot be included since the PVF pre-checking mechanism",
												"is disabled."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "577",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "578"
								}
							},
							"docs": []
						}
					},
					{
						"id": "578",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"initializer",
								"BufferedSessionChange"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "validators",
											"type": "541",
											"typeName": "Vec<ValidatorId>",
											"docs": []
										},
										{
											"name": "queued",
											"type": "541",
											"typeName": "Vec<ValidatorId>",
											"docs": []
										},
										{
											"name": "session_index",
											"type": "4",
											"typeName": "SessionIndex",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "579",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "580"
								}
							},
							"docs": []
						}
					},
					{
						"id": "580",
						"type": {
							"path": [
								"polkadot_core_primitives",
								"InboundDownwardMessage"
							],
							"params": [
								{
									"name": "BlockNumber",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "sent_at",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "msg",
											"type": "10",
											"typeName": "DownwardMessage",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "581",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"77",
									"10"
								]
							},
							"docs": []
						}
					},
					{
						"id": "582",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"ump",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "UnknownMessageIndex",
											"fields": [],
											"index": "0",
											"docs": [
												"The message index given is unknown."
											]
										},
										{
											"name": "WeightOverLimit",
											"fields": [],
											"index": "1",
											"docs": [
												"The amount of weight given is possibly not enough for executing the message."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "583",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"hrmp",
								"HrmpOpenChannelRequest"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "confirmed",
											"type": "34",
											"typeName": "bool",
											"docs": []
										},
										{
											"name": "_age",
											"type": "4",
											"typeName": "SessionIndex",
											"docs": []
										},
										{
											"name": "sender_deposit",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "max_message_size",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "max_capacity",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "max_total_size",
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "584",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "91"
								}
							},
							"docs": []
						}
					},
					{
						"id": "585",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"hrmp",
								"HrmpChannel"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "max_capacity",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "max_total_size",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "max_message_size",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "msg_count",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "total_size",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "mqc_head",
											"type": "586",
											"typeName": "Option<Hash>",
											"docs": []
										},
										{
											"name": "sender_deposit",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "recipient_deposit",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "586",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "9"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "9",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "587",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "588"
								}
							},
							"docs": []
						}
					},
					{
						"id": "588",
						"type": {
							"path": [
								"polkadot_core_primitives",
								"InboundHrmpMessage"
							],
							"params": [
								{
									"name": "BlockNumber",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "sent_at",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "data",
											"type": "10",
											"typeName": "sp_std::vec::Vec<u8>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "589",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "590"
								}
							},
							"docs": []
						}
					},
					{
						"id": "590",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"4",
									"560"
								]
							},
							"docs": []
						}
					},
					{
						"id": "591",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"hrmp",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "OpenHrmpChannelToSelf",
											"fields": [],
											"index": "0",
											"docs": [
												"The sender tried to open a channel to themselves."
											]
										},
										{
											"name": "OpenHrmpChannelInvalidRecipient",
											"fields": [],
											"index": "1",
											"docs": [
												"The recipient is not a valid para."
											]
										},
										{
											"name": "OpenHrmpChannelZeroCapacity",
											"fields": [],
											"index": "2",
											"docs": [
												"The requested capacity is zero."
											]
										},
										{
											"name": "OpenHrmpChannelCapacityExceedsLimit",
											"fields": [],
											"index": "3",
											"docs": [
												"The requested capacity exceeds the global limit."
											]
										},
										{
											"name": "OpenHrmpChannelZeroMessageSize",
											"fields": [],
											"index": "4",
											"docs": [
												"The requested maximum message size is 0."
											]
										},
										{
											"name": "OpenHrmpChannelMessageSizeExceedsLimit",
											"fields": [],
											"index": "5",
											"docs": [
												"The open request requested the message size that exceeds the global limit."
											]
										},
										{
											"name": "OpenHrmpChannelAlreadyExists",
											"fields": [],
											"index": "6",
											"docs": [
												"The channel already exists"
											]
										},
										{
											"name": "OpenHrmpChannelAlreadyRequested",
											"fields": [],
											"index": "7",
											"docs": [
												"There is already a request to open the same channel."
											]
										},
										{
											"name": "OpenHrmpChannelLimitExceeded",
											"fields": [],
											"index": "8",
											"docs": [
												"The sender already has the maximum number of allowed outbound channels."
											]
										},
										{
											"name": "AcceptHrmpChannelDoesntExist",
											"fields": [],
											"index": "9",
											"docs": [
												"The channel from the sender to the origin doesn't exist."
											]
										},
										{
											"name": "AcceptHrmpChannelAlreadyConfirmed",
											"fields": [],
											"index": "10",
											"docs": [
												"The channel is already confirmed."
											]
										},
										{
											"name": "AcceptHrmpChannelLimitExceeded",
											"fields": [],
											"index": "11",
											"docs": [
												"The recipient already has the maximum number of allowed inbound channels."
											]
										},
										{
											"name": "CloseHrmpChannelUnauthorized",
											"fields": [],
											"index": "12",
											"docs": [
												"The origin tries to close a channel where it is neither the sender nor the recipient."
											]
										},
										{
											"name": "CloseHrmpChannelDoesntExist",
											"fields": [],
											"index": "13",
											"docs": [
												"The channel to be closed doesn't exist."
											]
										},
										{
											"name": "CloseHrmpChannelAlreadyUnderway",
											"fields": [],
											"index": "14",
											"docs": [
												"The channel close request is already requested."
											]
										},
										{
											"name": "CancelHrmpOpenChannelUnauthorized",
											"fields": [],
											"index": "15",
											"docs": [
												"Canceling is requested by neither the sender nor recipient of the open channel request."
											]
										},
										{
											"name": "OpenHrmpChannelDoesntExist",
											"fields": [],
											"index": "16",
											"docs": [
												"The open request doesn't exist."
											]
										},
										{
											"name": "OpenHrmpChannelAlreadyConfirmed",
											"fields": [],
											"index": "17",
											"docs": [
												"Cannot cancel an HRMP open channel request because it is already confirmed."
											]
										},
										{
											"name": "WrongWitness",
											"fields": [],
											"index": "18",
											"docs": [
												"The provided witness data is wrong."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "592",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "241"
								}
							},
							"docs": []
						}
					},
					{
						"id": "593",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"SessionInfo"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "active_validator_indices",
											"type": "540",
											"typeName": "Vec<ValidatorIndex>",
											"docs": []
										},
										{
											"name": "random_seed",
											"type": "1",
											"typeName": "[u8; 32]",
											"docs": []
										},
										{
											"name": "dispute_period",
											"type": "4",
											"typeName": "SessionIndex",
											"docs": []
										},
										{
											"name": "validators",
											"type": "541",
											"typeName": "Vec<ValidatorId>",
											"docs": []
										},
										{
											"name": "discovery_keys",
											"type": "594",
											"typeName": "Vec<AuthorityDiscoveryId>",
											"docs": []
										},
										{
											"name": "assignment_keys",
											"type": "592",
											"typeName": "Vec<AssignmentId>",
											"docs": []
										},
										{
											"name": "validator_groups",
											"type": "551",
											"typeName": "Vec<Vec<ValidatorIndex>>",
											"docs": []
										},
										{
											"name": "n_cores",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "zeroth_delay_tranche_width",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "relay_vrf_modulo_samples",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "n_delay_tranches",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "no_show_slots",
											"type": "4",
											"typeName": "u32",
											"docs": []
										},
										{
											"name": "needed_approvals",
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "594",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "242"
								}
							},
							"docs": []
						}
					},
					{
						"id": "595",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"4",
									"93"
								]
							},
							"docs": []
						}
					},
					{
						"id": "596",
						"type": {
							"path": [
								"polkadot_primitives",
								"v2",
								"DisputeState"
							],
							"params": [
								{
									"name": "N",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "validators_for",
											"type": "402",
											"typeName": "BitVec<u8, bitvec::order::Lsb0>",
											"docs": []
										},
										{
											"name": "validators_against",
											"type": "402",
											"typeName": "BitVec<u8, bitvec::order::Lsb0>",
											"docs": []
										},
										{
											"name": "start",
											"type": "4",
											"typeName": "N",
											"docs": []
										},
										{
											"name": "concluded_at",
											"type": "250",
											"typeName": "Option<N>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "597",
						"type": {
							"path": [
								"polkadot_runtime_parachains",
								"disputes",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "DuplicateDisputeStatementSets",
											"fields": [],
											"index": "0",
											"docs": [
												"Duplicate dispute statement sets provided."
											]
										},
										{
											"name": "AncientDisputeStatement",
											"fields": [],
											"index": "1",
											"docs": [
												"Ancient dispute statement provided."
											]
										},
										{
											"name": "ValidatorIndexOutOfBounds",
											"fields": [],
											"index": "2",
											"docs": [
												"Validator index on statement is out of bounds for session."
											]
										},
										{
											"name": "InvalidSignature",
											"fields": [],
											"index": "3",
											"docs": [
												"Invalid signature on statement."
											]
										},
										{
											"name": "DuplicateStatement",
											"fields": [],
											"index": "4",
											"docs": [
												"Validator vote submitted more than once to dispute."
											]
										},
										{
											"name": "PotentialSpam",
											"fields": [],
											"index": "5",
											"docs": [
												"Too many spam slots used by some specific validator."
											]
										},
										{
											"name": "SingleSidedDispute",
											"fields": [],
											"index": "6",
											"docs": [
												"A dispute where there are only votes on one side."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "598",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"paras_registrar",
								"ParaInfo"
							],
							"params": [
								{
									"name": "Account",
									"type": "0"
								},
								{
									"name": "Balance",
									"type": "6"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "manager",
											"type": "0",
											"typeName": "Account",
											"docs": []
										},
										{
											"name": "deposit",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "locked",
											"type": "34",
											"typeName": "bool",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "599",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"paras_registrar",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "NotRegistered",
											"fields": [],
											"index": "0",
											"docs": [
												"The ID is not registered."
											]
										},
										{
											"name": "AlreadyRegistered",
											"fields": [],
											"index": "1",
											"docs": [
												"The ID is already registered."
											]
										},
										{
											"name": "NotOwner",
											"fields": [],
											"index": "2",
											"docs": [
												"The caller is not the owner of this Id."
											]
										},
										{
											"name": "CodeTooLarge",
											"fields": [],
											"index": "3",
											"docs": [
												"Invalid para code size."
											]
										},
										{
											"name": "HeadDataTooLarge",
											"fields": [],
											"index": "4",
											"docs": [
												"Invalid para head data size."
											]
										},
										{
											"name": "NotParachain",
											"fields": [],
											"index": "5",
											"docs": [
												"Para is not a Parachain."
											]
										},
										{
											"name": "NotParathread",
											"fields": [],
											"index": "6",
											"docs": [
												"Para is not a Parathread."
											]
										},
										{
											"name": "CannotDeregister",
											"fields": [],
											"index": "7",
											"docs": [
												"Cannot deregister para"
											]
										},
										{
											"name": "CannotDowngrade",
											"fields": [],
											"index": "8",
											"docs": [
												"Cannot schedule downgrade of parachain to parathread"
											]
										},
										{
											"name": "CannotUpgrade",
											"fields": [],
											"index": "9",
											"docs": [
												"Cannot schedule upgrade of parathread to parachain"
											]
										},
										{
											"name": "ParaLocked",
											"fields": [],
											"index": "10",
											"docs": [
												"Para is locked from manipulation by the manager. Must use parachain or relay chain governance."
											]
										},
										{
											"name": "NotReserved",
											"fields": [],
											"index": "11",
											"docs": [
												"The ID given for registration has not been reserved."
											]
										},
										{
											"name": "EmptyCode",
											"fields": [],
											"index": "12",
											"docs": [
												"Registering parachain with empty code is not allowed."
											]
										},
										{
											"name": "CannotSwap",
											"fields": [],
											"index": "13",
											"docs": [
												"Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras are",
												"correct for the swap to work."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "600",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "503"
								}
							},
							"docs": []
						}
					},
					{
						"id": "601",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"slots",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "ParaNotOnboarding",
											"fields": [],
											"index": "0",
											"docs": [
												"The parachain ID is not onboarding."
											]
										},
										{
											"name": "LeaseError",
											"fields": [],
											"index": "1",
											"docs": [
												"There was an error with the lease."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "602",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"paras_sudo_wrapper",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "ParaDoesntExist",
											"fields": [],
											"index": "0",
											"docs": [
												"The specified parachain or parathread is not registered."
											]
										},
										{
											"name": "ParaAlreadyExists",
											"fields": [],
											"index": "1",
											"docs": [
												"The specified parachain or parathread is already registered."
											]
										},
										{
											"name": "ExceedsMaxMessageSize",
											"fields": [],
											"index": "2",
											"docs": [
												"A DMP message couldn't be sent because it exceeds the maximum size allowed for a downward",
												"message."
											]
										},
										{
											"name": "CouldntCleanup",
											"fields": [],
											"index": "3",
											"docs": [
												"Could not schedule para cleanup."
											]
										},
										{
											"name": "NotParathread",
											"fields": [],
											"index": "4",
											"docs": [
												"Not a parathread."
											]
										},
										{
											"name": "NotParachain",
											"fields": [],
											"index": "5",
											"docs": [
												"Not a parachain."
											]
										},
										{
											"name": "CannotUpgrade",
											"fields": [],
											"index": "6",
											"docs": [
												"Cannot upgrade parathread."
											]
										},
										{
											"name": "CannotDowngrade",
											"fields": [],
											"index": "7",
											"docs": [
												"Cannot downgrade parachain."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "603",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"0",
									"77"
								]
							},
							"docs": []
						}
					},
					{
						"id": "604",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"array": {
									"len": "36",
									"type": "605"
								}
							},
							"docs": []
						}
					},
					{
						"id": "605",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "606"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "606",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "606",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"0",
									"77",
									"6"
								]
							},
							"docs": []
						}
					},
					{
						"id": "607",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"auctions",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "AuctionInProgress",
											"fields": [],
											"index": "0",
											"docs": [
												"This auction is already in progress."
											]
										},
										{
											"name": "LeasePeriodInPast",
											"fields": [],
											"index": "1",
											"docs": [
												"The lease period is in the past."
											]
										},
										{
											"name": "ParaNotRegistered",
											"fields": [],
											"index": "2",
											"docs": [
												"Para is not registered"
											]
										},
										{
											"name": "NotCurrentAuction",
											"fields": [],
											"index": "3",
											"docs": [
												"Not a current auction."
											]
										},
										{
											"name": "NotAuction",
											"fields": [],
											"index": "4",
											"docs": [
												"Not an auction."
											]
										},
										{
											"name": "AuctionEnded",
											"fields": [],
											"index": "5",
											"docs": [
												"Auction has already ended."
											]
										},
										{
											"name": "AlreadyLeasedOut",
											"fields": [],
											"index": "6",
											"docs": [
												"The para is already leased out for part of this range."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "608",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"crowdloan",
								"FundInfo"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								},
								{
									"name": "Balance",
									"type": "6"
								},
								{
									"name": "BlockNumber",
									"type": "4"
								},
								{
									"name": "LeasePeriod",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "depositor",
											"type": "0",
											"typeName": "AccountId",
											"docs": []
										},
										{
											"name": "verifier",
											"type": "448",
											"typeName": "Option<MultiSigner>",
											"docs": []
										},
										{
											"name": "deposit",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "raised",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "end",
											"type": "4",
											"typeName": "BlockNumber",
											"docs": []
										},
										{
											"name": "cap",
											"type": "6",
											"typeName": "Balance",
											"docs": []
										},
										{
											"name": "last_contribution",
											"type": "609",
											"typeName": "LastContribution<BlockNumber>",
											"docs": []
										},
										{
											"name": "first_period",
											"type": "4",
											"typeName": "LeasePeriod",
											"docs": []
										},
										{
											"name": "last_period",
											"type": "4",
											"typeName": "LeasePeriod",
											"docs": []
										},
										{
											"name": "fund_index",
											"type": "4",
											"typeName": "FundIndex",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "609",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"crowdloan",
								"LastContribution"
							],
							"params": [
								{
									"name": "BlockNumber",
									"type": "4"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Never",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "PreEnding",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "u32",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Ending",
											"fields": [
												{
													"name": null,
													"type": "4",
													"typeName": "BlockNumber",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "610",
						"type": {
							"path": [
								"frame_support",
								"PalletId"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "120",
											"typeName": "[u8; 8]",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "611",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"crowdloan",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "FirstPeriodInPast",
											"fields": [],
											"index": "0",
											"docs": [
												"The current lease period is more than the first lease period."
											]
										},
										{
											"name": "FirstPeriodTooFarInFuture",
											"fields": [],
											"index": "1",
											"docs": [
												"The first lease period needs to at least be less than 3 `max_value`."
											]
										},
										{
											"name": "LastPeriodBeforeFirstPeriod",
											"fields": [],
											"index": "2",
											"docs": [
												"Last lease period must be greater than first lease period."
											]
										},
										{
											"name": "LastPeriodTooFarInFuture",
											"fields": [],
											"index": "3",
											"docs": [
												"The last lease period cannot be more than 3 periods after the first period."
											]
										},
										{
											"name": "CannotEndInPast",
											"fields": [],
											"index": "4",
											"docs": [
												"The campaign ends before the current block number. The end must be in the future."
											]
										},
										{
											"name": "EndTooFarInFuture",
											"fields": [],
											"index": "5",
											"docs": [
												"The end date for this crowdloan is not sensible."
											]
										},
										{
											"name": "Overflow",
											"fields": [],
											"index": "6",
											"docs": [
												"There was an overflow."
											]
										},
										{
											"name": "ContributionTooSmall",
											"fields": [],
											"index": "7",
											"docs": [
												"The contribution was below the minimum, `MinContribution`."
											]
										},
										{
											"name": "InvalidParaId",
											"fields": [],
											"index": "8",
											"docs": [
												"Invalid fund index."
											]
										},
										{
											"name": "CapExceeded",
											"fields": [],
											"index": "9",
											"docs": [
												"Contributions exceed maximum amount."
											]
										},
										{
											"name": "ContributionPeriodOver",
											"fields": [],
											"index": "10",
											"docs": [
												"The contribution period has already ended."
											]
										},
										{
											"name": "InvalidOrigin",
											"fields": [],
											"index": "11",
											"docs": [
												"The origin of this call is invalid."
											]
										},
										{
											"name": "NotParachain",
											"fields": [],
											"index": "12",
											"docs": [
												"This crowdloan does not correspond to a parachain."
											]
										},
										{
											"name": "LeaseActive",
											"fields": [],
											"index": "13",
											"docs": [
												"This parachain lease is still active and retirement cannot yet begin."
											]
										},
										{
											"name": "BidOrLeaseActive",
											"fields": [],
											"index": "14",
											"docs": [
												"This parachain's bid or lease is still active and withdraw cannot yet begin."
											]
										},
										{
											"name": "FundNotEnded",
											"fields": [],
											"index": "15",
											"docs": [
												"The crowdloan has not yet ended."
											]
										},
										{
											"name": "NoContributions",
											"fields": [],
											"index": "16",
											"docs": [
												"There are no contributions stored in this crowdloan."
											]
										},
										{
											"name": "NotReadyToDissolve",
											"fields": [],
											"index": "17",
											"docs": [
												"The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement period."
											]
										},
										{
											"name": "InvalidSignature",
											"fields": [],
											"index": "18",
											"docs": [
												"Invalid signature."
											]
										},
										{
											"name": "MemoTooLarge",
											"fields": [],
											"index": "19",
											"docs": [
												"The provided memo is too large."
											]
										},
										{
											"name": "AlreadyInNewRaise",
											"fields": [],
											"index": "20",
											"docs": [
												"The fund is already in `NewRaise`"
											]
										},
										{
											"name": "VrfDelayInProgress",
											"fields": [],
											"index": "21",
											"docs": [
												"No contributions allowed during the VRF delay"
											]
										},
										{
											"name": "NoLeasePeriod",
											"fields": [],
											"index": "22",
											"docs": [
												"A lease period has not started yet, due to an offset in the starting block."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "612",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"assigned_slots",
								"ParachainTemporarySlot"
							],
							"params": [
								{
									"name": "AccountId",
									"type": "0"
								},
								{
									"name": "LeasePeriod",
									"type": "4"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": "manager",
											"type": "0",
											"typeName": "AccountId",
											"docs": []
										},
										{
											"name": "period_begin",
											"type": "4",
											"typeName": "LeasePeriod",
											"docs": []
										},
										{
											"name": "period_count",
											"type": "4",
											"typeName": "LeasePeriod",
											"docs": []
										},
										{
											"name": "last_lease",
											"type": "250",
											"typeName": "Option<LeasePeriod>",
											"docs": []
										},
										{
											"name": "lease_count",
											"type": "4",
											"typeName": "u32",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "613",
						"type": {
							"path": [
								"polkadot_runtime_common",
								"assigned_slots",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "ParaDoesntExist",
											"fields": [],
											"index": "0",
											"docs": [
												"The specified parachain or parathread is not registered."
											]
										},
										{
											"name": "NotParathread",
											"fields": [],
											"index": "1",
											"docs": [
												"Not a parathread."
											]
										},
										{
											"name": "CannotUpgrade",
											"fields": [],
											"index": "2",
											"docs": [
												"Cannot upgrade parathread."
											]
										},
										{
											"name": "CannotDowngrade",
											"fields": [],
											"index": "3",
											"docs": [
												"Cannot downgrade parachain."
											]
										},
										{
											"name": "SlotAlreadyAssigned",
											"fields": [],
											"index": "4",
											"docs": [
												"Permanent or Temporary slot already assigned."
											]
										},
										{
											"name": "SlotNotAssigned",
											"fields": [],
											"index": "5",
											"docs": [
												"Permanent or Temporary slot has not been assigned."
											]
										},
										{
											"name": "OngoingLeaseExists",
											"fields": [],
											"index": "6",
											"docs": [
												"An ongoing lease already exists."
											]
										},
										{
											"name": "MaxPermanentSlotsExceeded",
											"fields": [],
											"index": "7",
											"docs": []
										},
										{
											"name": "MaxTemporarySlotsExceeded",
											"fields": [],
											"index": "8",
											"docs": []
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "614",
						"type": {
							"path": [
								"pallet_xcm",
								"pallet",
								"QueryStatus"
							],
							"params": [
								{
									"name": "BlockNumber",
									"type": "4"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Pending",
											"fields": [
												{
													"name": "responder",
													"type": "136",
													"typeName": "VersionedMultiLocation",
													"docs": []
												},
												{
													"name": "maybe_notify",
													"type": "615",
													"typeName": "Option<(u8, u8)>",
													"docs": []
												},
												{
													"name": "timeout",
													"type": "4",
													"typeName": "BlockNumber",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "VersionNotifier",
											"fields": [
												{
													"name": "origin",
													"type": "136",
													"typeName": "VersionedMultiLocation",
													"docs": []
												},
												{
													"name": "is_active",
													"type": "34",
													"typeName": "bool",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Ready",
											"fields": [
												{
													"name": "response",
													"type": "617",
													"typeName": "VersionedResponse",
													"docs": []
												},
												{
													"name": "at",
													"type": "4",
													"typeName": "BlockNumber",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "615",
						"type": {
							"path": [
								"Option"
							],
							"params": [
								{
									"name": "T",
									"type": "616"
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "None",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Some",
											"fields": [
												{
													"name": null,
													"type": "616",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "616",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"2",
									"2"
								]
							},
							"docs": []
						}
					},
					{
						"id": "617",
						"type": {
							"path": [
								"xcm",
								"VersionedResponse"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "V0",
											"fields": [
												{
													"name": null,
													"type": "439",
													"typeName": "v0::Response",
													"docs": []
												}
											],
											"index": "0",
											"docs": []
										},
										{
											"name": "V1",
											"fields": [
												{
													"name": null,
													"type": "444",
													"typeName": "v1::Response",
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "V2",
											"fields": [
												{
													"name": null,
													"type": "121",
													"typeName": "v2::Response",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "618",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"4",
									"136"
								]
							},
							"docs": []
						}
					},
					{
						"id": "619",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"8",
									"8",
									"4"
								]
							},
							"docs": []
						}
					},
					{
						"id": "620",
						"type": {
							"path": [
								"frame_support",
								"storage",
								"bounded_vec",
								"BoundedVec"
							],
							"params": [
								{
									"name": "T",
									"type": "621"
								},
								{
									"name": "S",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "622",
											"typeName": "Vec<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "621",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"136",
									"4"
								]
							},
							"docs": []
						}
					},
					{
						"id": "622",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"sequence": {
									"type": "621"
								}
							},
							"docs": []
						}
					},
					{
						"id": "623",
						"type": {
							"path": [
								"pallet_xcm",
								"pallet",
								"VersionMigrationStage"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "MigrateSupportedVersion",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "MigrateVersionNotifiers",
											"fields": [],
											"index": "1",
											"docs": []
										},
										{
											"name": "NotifyCurrentTargets",
											"fields": [
												{
													"name": null,
													"type": "60",
													"typeName": "Option<Vec<u8>>",
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "MigrateAndNotifyOldTargets",
											"fields": [],
											"index": "3",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "624",
						"type": {
							"path": [
								"pallet_xcm",
								"pallet",
								"Error"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Unreachable",
											"fields": [],
											"index": "0",
											"docs": [
												"The desired destination was unreachable, generally because there is a no way of routing",
												"to it."
											]
										},
										{
											"name": "SendFailure",
											"fields": [],
											"index": "1",
											"docs": [
												"There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
												"a lack of space for buffering the message."
											]
										},
										{
											"name": "Filtered",
											"fields": [],
											"index": "2",
											"docs": [
												"The message execution fails the filter."
											]
										},
										{
											"name": "UnweighableMessage",
											"fields": [],
											"index": "3",
											"docs": [
												"The message's weight could not be determined."
											]
										},
										{
											"name": "DestinationNotInvertible",
											"fields": [],
											"index": "4",
											"docs": [
												"The destination `MultiLocation` provided cannot be inverted."
											]
										},
										{
											"name": "Empty",
											"fields": [],
											"index": "5",
											"docs": [
												"The assets to be sent are empty."
											]
										},
										{
											"name": "CannotReanchor",
											"fields": [],
											"index": "6",
											"docs": [
												"Could not re-anchor the assets to declare the fees for the destination chain."
											]
										},
										{
											"name": "TooManyAssets",
											"fields": [],
											"index": "7",
											"docs": [
												"Too many assets have been attempted for transfer."
											]
										},
										{
											"name": "InvalidOrigin",
											"fields": [],
											"index": "8",
											"docs": [
												"Origin is invalid for sending."
											]
										},
										{
											"name": "BadVersion",
											"fields": [],
											"index": "9",
											"docs": [
												"The version of the `Versioned` value used is not able to be interpreted."
											]
										},
										{
											"name": "BadLocation",
											"fields": [],
											"index": "10",
											"docs": [
												"The given location could not be used (e.g. because it cannot be expressed in the",
												"desired version of XCM)."
											]
										},
										{
											"name": "NoSubscription",
											"fields": [],
											"index": "11",
											"docs": [
												"The referenced subscription could not be found."
											]
										},
										{
											"name": "AlreadySubscribed",
											"fields": [],
											"index": "12",
											"docs": [
												"The location is invalid since it already has a subscription from us."
											]
										}
									]
								}
							},
							"docs": [
								"\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
							]
						}
					},
					{
						"id": "625",
						"type": {
							"path": [
								"sp_runtime",
								"generic",
								"unchecked_extrinsic",
								"UncheckedExtrinsic"
							],
							"params": [
								{
									"name": "Address",
									"type": "189"
								},
								{
									"name": "Call",
									"type": "280"
								},
								{
									"name": "Signature",
									"type": "453"
								},
								{
									"name": "Extra",
									"type": "626"
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "10",
											"typeName": null,
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "626",
						"type": {
							"path": [],
							"params": [],
							"def": {
								"tuple": [
									"627",
									"628",
									"629",
									"630",
									"631",
									"633",
									"634",
									"635"
								]
							},
							"docs": []
						}
					},
					{
						"id": "627",
						"type": {
							"path": [
								"frame_system",
								"extensions",
								"check_non_zero_sender",
								"CheckNonZeroSender"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": []
								}
							},
							"docs": []
						}
					},
					{
						"id": "628",
						"type": {
							"path": [
								"frame_system",
								"extensions",
								"check_spec_version",
								"CheckSpecVersion"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": []
								}
							},
							"docs": []
						}
					},
					{
						"id": "629",
						"type": {
							"path": [
								"frame_system",
								"extensions",
								"check_tx_version",
								"CheckTxVersion"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": []
								}
							},
							"docs": []
						}
					},
					{
						"id": "630",
						"type": {
							"path": [
								"frame_system",
								"extensions",
								"check_genesis",
								"CheckGenesis"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": []
								}
							},
							"docs": []
						}
					},
					{
						"id": "631",
						"type": {
							"path": [
								"frame_system",
								"extensions",
								"check_mortality",
								"CheckMortality"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "632",
											"typeName": "Era",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "632",
						"type": {
							"path": [
								"sp_runtime",
								"generic",
								"era",
								"Era"
							],
							"params": [],
							"def": {
								"variant": {
									"variants": [
										{
											"name": "Immortal",
											"fields": [],
											"index": "0",
											"docs": []
										},
										{
											"name": "Mortal1",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "1",
											"docs": []
										},
										{
											"name": "Mortal2",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "2",
											"docs": []
										},
										{
											"name": "Mortal3",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "3",
											"docs": []
										},
										{
											"name": "Mortal4",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "4",
											"docs": []
										},
										{
											"name": "Mortal5",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "5",
											"docs": []
										},
										{
											"name": "Mortal6",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "6",
											"docs": []
										},
										{
											"name": "Mortal7",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "7",
											"docs": []
										},
										{
											"name": "Mortal8",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "8",
											"docs": []
										},
										{
											"name": "Mortal9",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "9",
											"docs": []
										},
										{
											"name": "Mortal10",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "10",
											"docs": []
										},
										{
											"name": "Mortal11",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "11",
											"docs": []
										},
										{
											"name": "Mortal12",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "12",
											"docs": []
										},
										{
											"name": "Mortal13",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "13",
											"docs": []
										},
										{
											"name": "Mortal14",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "14",
											"docs": []
										},
										{
											"name": "Mortal15",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "15",
											"docs": []
										},
										{
											"name": "Mortal16",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "16",
											"docs": []
										},
										{
											"name": "Mortal17",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "17",
											"docs": []
										},
										{
											"name": "Mortal18",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "18",
											"docs": []
										},
										{
											"name": "Mortal19",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "19",
											"docs": []
										},
										{
											"name": "Mortal20",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "20",
											"docs": []
										},
										{
											"name": "Mortal21",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "21",
											"docs": []
										},
										{
											"name": "Mortal22",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "22",
											"docs": []
										},
										{
											"name": "Mortal23",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "23",
											"docs": []
										},
										{
											"name": "Mortal24",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "24",
											"docs": []
										},
										{
											"name": "Mortal25",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "25",
											"docs": []
										},
										{
											"name": "Mortal26",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "26",
											"docs": []
										},
										{
											"name": "Mortal27",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "27",
											"docs": []
										},
										{
											"name": "Mortal28",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "28",
											"docs": []
										},
										{
											"name": "Mortal29",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "29",
											"docs": []
										},
										{
											"name": "Mortal30",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "30",
											"docs": []
										},
										{
											"name": "Mortal31",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "31",
											"docs": []
										},
										{
											"name": "Mortal32",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "32",
											"docs": []
										},
										{
											"name": "Mortal33",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "33",
											"docs": []
										},
										{
											"name": "Mortal34",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "34",
											"docs": []
										},
										{
											"name": "Mortal35",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "35",
											"docs": []
										},
										{
											"name": "Mortal36",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "36",
											"docs": []
										},
										{
											"name": "Mortal37",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "37",
											"docs": []
										},
										{
											"name": "Mortal38",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "38",
											"docs": []
										},
										{
											"name": "Mortal39",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "39",
											"docs": []
										},
										{
											"name": "Mortal40",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "40",
											"docs": []
										},
										{
											"name": "Mortal41",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "41",
											"docs": []
										},
										{
											"name": "Mortal42",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "42",
											"docs": []
										},
										{
											"name": "Mortal43",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "43",
											"docs": []
										},
										{
											"name": "Mortal44",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "44",
											"docs": []
										},
										{
											"name": "Mortal45",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "45",
											"docs": []
										},
										{
											"name": "Mortal46",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "46",
											"docs": []
										},
										{
											"name": "Mortal47",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "47",
											"docs": []
										},
										{
											"name": "Mortal48",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "48",
											"docs": []
										},
										{
											"name": "Mortal49",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "49",
											"docs": []
										},
										{
											"name": "Mortal50",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "50",
											"docs": []
										},
										{
											"name": "Mortal51",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "51",
											"docs": []
										},
										{
											"name": "Mortal52",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "52",
											"docs": []
										},
										{
											"name": "Mortal53",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "53",
											"docs": []
										},
										{
											"name": "Mortal54",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "54",
											"docs": []
										},
										{
											"name": "Mortal55",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "55",
											"docs": []
										},
										{
											"name": "Mortal56",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "56",
											"docs": []
										},
										{
											"name": "Mortal57",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "57",
											"docs": []
										},
										{
											"name": "Mortal58",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "58",
											"docs": []
										},
										{
											"name": "Mortal59",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "59",
											"docs": []
										},
										{
											"name": "Mortal60",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "60",
											"docs": []
										},
										{
											"name": "Mortal61",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "61",
											"docs": []
										},
										{
											"name": "Mortal62",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "62",
											"docs": []
										},
										{
											"name": "Mortal63",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "63",
											"docs": []
										},
										{
											"name": "Mortal64",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "64",
											"docs": []
										},
										{
											"name": "Mortal65",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "65",
											"docs": []
										},
										{
											"name": "Mortal66",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "66",
											"docs": []
										},
										{
											"name": "Mortal67",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "67",
											"docs": []
										},
										{
											"name": "Mortal68",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "68",
											"docs": []
										},
										{
											"name": "Mortal69",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "69",
											"docs": []
										},
										{
											"name": "Mortal70",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "70",
											"docs": []
										},
										{
											"name": "Mortal71",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "71",
											"docs": []
										},
										{
											"name": "Mortal72",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "72",
											"docs": []
										},
										{
											"name": "Mortal73",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "73",
											"docs": []
										},
										{
											"name": "Mortal74",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "74",
											"docs": []
										},
										{
											"name": "Mortal75",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "75",
											"docs": []
										},
										{
											"name": "Mortal76",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "76",
											"docs": []
										},
										{
											"name": "Mortal77",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "77",
											"docs": []
										},
										{
											"name": "Mortal78",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "78",
											"docs": []
										},
										{
											"name": "Mortal79",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "79",
											"docs": []
										},
										{
											"name": "Mortal80",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "80",
											"docs": []
										},
										{
											"name": "Mortal81",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "81",
											"docs": []
										},
										{
											"name": "Mortal82",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "82",
											"docs": []
										},
										{
											"name": "Mortal83",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "83",
											"docs": []
										},
										{
											"name": "Mortal84",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "84",
											"docs": []
										},
										{
											"name": "Mortal85",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "85",
											"docs": []
										},
										{
											"name": "Mortal86",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "86",
											"docs": []
										},
										{
											"name": "Mortal87",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "87",
											"docs": []
										},
										{
											"name": "Mortal88",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "88",
											"docs": []
										},
										{
											"name": "Mortal89",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "89",
											"docs": []
										},
										{
											"name": "Mortal90",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "90",
											"docs": []
										},
										{
											"name": "Mortal91",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "91",
											"docs": []
										},
										{
											"name": "Mortal92",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "92",
											"docs": []
										},
										{
											"name": "Mortal93",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "93",
											"docs": []
										},
										{
											"name": "Mortal94",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "94",
											"docs": []
										},
										{
											"name": "Mortal95",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "95",
											"docs": []
										},
										{
											"name": "Mortal96",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "96",
											"docs": []
										},
										{
											"name": "Mortal97",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "97",
											"docs": []
										},
										{
											"name": "Mortal98",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "98",
											"docs": []
										},
										{
											"name": "Mortal99",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "99",
											"docs": []
										},
										{
											"name": "Mortal100",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "100",
											"docs": []
										},
										{
											"name": "Mortal101",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "101",
											"docs": []
										},
										{
											"name": "Mortal102",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "102",
											"docs": []
										},
										{
											"name": "Mortal103",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "103",
											"docs": []
										},
										{
											"name": "Mortal104",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "104",
											"docs": []
										},
										{
											"name": "Mortal105",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "105",
											"docs": []
										},
										{
											"name": "Mortal106",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "106",
											"docs": []
										},
										{
											"name": "Mortal107",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "107",
											"docs": []
										},
										{
											"name": "Mortal108",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "108",
											"docs": []
										},
										{
											"name": "Mortal109",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "109",
											"docs": []
										},
										{
											"name": "Mortal110",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "110",
											"docs": []
										},
										{
											"name": "Mortal111",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "111",
											"docs": []
										},
										{
											"name": "Mortal112",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "112",
											"docs": []
										},
										{
											"name": "Mortal113",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "113",
											"docs": []
										},
										{
											"name": "Mortal114",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "114",
											"docs": []
										},
										{
											"name": "Mortal115",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "115",
											"docs": []
										},
										{
											"name": "Mortal116",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "116",
											"docs": []
										},
										{
											"name": "Mortal117",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "117",
											"docs": []
										},
										{
											"name": "Mortal118",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "118",
											"docs": []
										},
										{
											"name": "Mortal119",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "119",
											"docs": []
										},
										{
											"name": "Mortal120",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "120",
											"docs": []
										},
										{
											"name": "Mortal121",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "121",
											"docs": []
										},
										{
											"name": "Mortal122",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "122",
											"docs": []
										},
										{
											"name": "Mortal123",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "123",
											"docs": []
										},
										{
											"name": "Mortal124",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "124",
											"docs": []
										},
										{
											"name": "Mortal125",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "125",
											"docs": []
										},
										{
											"name": "Mortal126",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "126",
											"docs": []
										},
										{
											"name": "Mortal127",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "127",
											"docs": []
										},
										{
											"name": "Mortal128",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "128",
											"docs": []
										},
										{
											"name": "Mortal129",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "129",
											"docs": []
										},
										{
											"name": "Mortal130",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "130",
											"docs": []
										},
										{
											"name": "Mortal131",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "131",
											"docs": []
										},
										{
											"name": "Mortal132",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "132",
											"docs": []
										},
										{
											"name": "Mortal133",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "133",
											"docs": []
										},
										{
											"name": "Mortal134",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "134",
											"docs": []
										},
										{
											"name": "Mortal135",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "135",
											"docs": []
										},
										{
											"name": "Mortal136",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "136",
											"docs": []
										},
										{
											"name": "Mortal137",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "137",
											"docs": []
										},
										{
											"name": "Mortal138",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "138",
											"docs": []
										},
										{
											"name": "Mortal139",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "139",
											"docs": []
										},
										{
											"name": "Mortal140",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "140",
											"docs": []
										},
										{
											"name": "Mortal141",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "141",
											"docs": []
										},
										{
											"name": "Mortal142",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "142",
											"docs": []
										},
										{
											"name": "Mortal143",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "143",
											"docs": []
										},
										{
											"name": "Mortal144",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "144",
											"docs": []
										},
										{
											"name": "Mortal145",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "145",
											"docs": []
										},
										{
											"name": "Mortal146",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "146",
											"docs": []
										},
										{
											"name": "Mortal147",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "147",
											"docs": []
										},
										{
											"name": "Mortal148",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "148",
											"docs": []
										},
										{
											"name": "Mortal149",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "149",
											"docs": []
										},
										{
											"name": "Mortal150",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "150",
											"docs": []
										},
										{
											"name": "Mortal151",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "151",
											"docs": []
										},
										{
											"name": "Mortal152",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "152",
											"docs": []
										},
										{
											"name": "Mortal153",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "153",
											"docs": []
										},
										{
											"name": "Mortal154",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "154",
											"docs": []
										},
										{
											"name": "Mortal155",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "155",
											"docs": []
										},
										{
											"name": "Mortal156",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "156",
											"docs": []
										},
										{
											"name": "Mortal157",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "157",
											"docs": []
										},
										{
											"name": "Mortal158",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "158",
											"docs": []
										},
										{
											"name": "Mortal159",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "159",
											"docs": []
										},
										{
											"name": "Mortal160",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "160",
											"docs": []
										},
										{
											"name": "Mortal161",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "161",
											"docs": []
										},
										{
											"name": "Mortal162",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "162",
											"docs": []
										},
										{
											"name": "Mortal163",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "163",
											"docs": []
										},
										{
											"name": "Mortal164",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "164",
											"docs": []
										},
										{
											"name": "Mortal165",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "165",
											"docs": []
										},
										{
											"name": "Mortal166",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "166",
											"docs": []
										},
										{
											"name": "Mortal167",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "167",
											"docs": []
										},
										{
											"name": "Mortal168",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "168",
											"docs": []
										},
										{
											"name": "Mortal169",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "169",
											"docs": []
										},
										{
											"name": "Mortal170",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "170",
											"docs": []
										},
										{
											"name": "Mortal171",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "171",
											"docs": []
										},
										{
											"name": "Mortal172",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "172",
											"docs": []
										},
										{
											"name": "Mortal173",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "173",
											"docs": []
										},
										{
											"name": "Mortal174",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "174",
											"docs": []
										},
										{
											"name": "Mortal175",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "175",
											"docs": []
										},
										{
											"name": "Mortal176",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "176",
											"docs": []
										},
										{
											"name": "Mortal177",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "177",
											"docs": []
										},
										{
											"name": "Mortal178",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "178",
											"docs": []
										},
										{
											"name": "Mortal179",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "179",
											"docs": []
										},
										{
											"name": "Mortal180",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "180",
											"docs": []
										},
										{
											"name": "Mortal181",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "181",
											"docs": []
										},
										{
											"name": "Mortal182",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "182",
											"docs": []
										},
										{
											"name": "Mortal183",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "183",
											"docs": []
										},
										{
											"name": "Mortal184",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "184",
											"docs": []
										},
										{
											"name": "Mortal185",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "185",
											"docs": []
										},
										{
											"name": "Mortal186",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "186",
											"docs": []
										},
										{
											"name": "Mortal187",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "187",
											"docs": []
										},
										{
											"name": "Mortal188",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "188",
											"docs": []
										},
										{
											"name": "Mortal189",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "189",
											"docs": []
										},
										{
											"name": "Mortal190",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "190",
											"docs": []
										},
										{
											"name": "Mortal191",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "191",
											"docs": []
										},
										{
											"name": "Mortal192",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "192",
											"docs": []
										},
										{
											"name": "Mortal193",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "193",
											"docs": []
										},
										{
											"name": "Mortal194",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "194",
											"docs": []
										},
										{
											"name": "Mortal195",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "195",
											"docs": []
										},
										{
											"name": "Mortal196",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "196",
											"docs": []
										},
										{
											"name": "Mortal197",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "197",
											"docs": []
										},
										{
											"name": "Mortal198",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "198",
											"docs": []
										},
										{
											"name": "Mortal199",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "199",
											"docs": []
										},
										{
											"name": "Mortal200",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "200",
											"docs": []
										},
										{
											"name": "Mortal201",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "201",
											"docs": []
										},
										{
											"name": "Mortal202",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "202",
											"docs": []
										},
										{
											"name": "Mortal203",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "203",
											"docs": []
										},
										{
											"name": "Mortal204",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "204",
											"docs": []
										},
										{
											"name": "Mortal205",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "205",
											"docs": []
										},
										{
											"name": "Mortal206",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "206",
											"docs": []
										},
										{
											"name": "Mortal207",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "207",
											"docs": []
										},
										{
											"name": "Mortal208",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "208",
											"docs": []
										},
										{
											"name": "Mortal209",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "209",
											"docs": []
										},
										{
											"name": "Mortal210",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "210",
											"docs": []
										},
										{
											"name": "Mortal211",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "211",
											"docs": []
										},
										{
											"name": "Mortal212",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "212",
											"docs": []
										},
										{
											"name": "Mortal213",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "213",
											"docs": []
										},
										{
											"name": "Mortal214",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "214",
											"docs": []
										},
										{
											"name": "Mortal215",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "215",
											"docs": []
										},
										{
											"name": "Mortal216",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "216",
											"docs": []
										},
										{
											"name": "Mortal217",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "217",
											"docs": []
										},
										{
											"name": "Mortal218",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "218",
											"docs": []
										},
										{
											"name": "Mortal219",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "219",
											"docs": []
										},
										{
											"name": "Mortal220",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "220",
											"docs": []
										},
										{
											"name": "Mortal221",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "221",
											"docs": []
										},
										{
											"name": "Mortal222",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "222",
											"docs": []
										},
										{
											"name": "Mortal223",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "223",
											"docs": []
										},
										{
											"name": "Mortal224",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "224",
											"docs": []
										},
										{
											"name": "Mortal225",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "225",
											"docs": []
										},
										{
											"name": "Mortal226",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "226",
											"docs": []
										},
										{
											"name": "Mortal227",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "227",
											"docs": []
										},
										{
											"name": "Mortal228",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "228",
											"docs": []
										},
										{
											"name": "Mortal229",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "229",
											"docs": []
										},
										{
											"name": "Mortal230",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "230",
											"docs": []
										},
										{
											"name": "Mortal231",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "231",
											"docs": []
										},
										{
											"name": "Mortal232",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "232",
											"docs": []
										},
										{
											"name": "Mortal233",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "233",
											"docs": []
										},
										{
											"name": "Mortal234",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "234",
											"docs": []
										},
										{
											"name": "Mortal235",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "235",
											"docs": []
										},
										{
											"name": "Mortal236",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "236",
											"docs": []
										},
										{
											"name": "Mortal237",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "237",
											"docs": []
										},
										{
											"name": "Mortal238",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "238",
											"docs": []
										},
										{
											"name": "Mortal239",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "239",
											"docs": []
										},
										{
											"name": "Mortal240",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "240",
											"docs": []
										},
										{
											"name": "Mortal241",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "241",
											"docs": []
										},
										{
											"name": "Mortal242",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "242",
											"docs": []
										},
										{
											"name": "Mortal243",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "243",
											"docs": []
										},
										{
											"name": "Mortal244",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "244",
											"docs": []
										},
										{
											"name": "Mortal245",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "245",
											"docs": []
										},
										{
											"name": "Mortal246",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "246",
											"docs": []
										},
										{
											"name": "Mortal247",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "247",
											"docs": []
										},
										{
											"name": "Mortal248",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "248",
											"docs": []
										},
										{
											"name": "Mortal249",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "249",
											"docs": []
										},
										{
											"name": "Mortal250",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "250",
											"docs": []
										},
										{
											"name": "Mortal251",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "251",
											"docs": []
										},
										{
											"name": "Mortal252",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "252",
											"docs": []
										},
										{
											"name": "Mortal253",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "253",
											"docs": []
										},
										{
											"name": "Mortal254",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "254",
											"docs": []
										},
										{
											"name": "Mortal255",
											"fields": [
												{
													"name": null,
													"type": "2",
													"typeName": null,
													"docs": []
												}
											],
											"index": "255",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "633",
						"type": {
							"path": [
								"frame_system",
								"extensions",
								"check_nonce",
								"CheckNonce"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "105",
											"typeName": "T::Index",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "634",
						"type": {
							"path": [
								"frame_system",
								"extensions",
								"check_weight",
								"CheckWeight"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": []
								}
							},
							"docs": []
						}
					},
					{
						"id": "635",
						"type": {
							"path": [
								"pallet_transaction_payment",
								"ChargeTransactionPayment"
							],
							"params": [
								{
									"name": "T",
									"type": null
								}
							],
							"def": {
								"composite": {
									"fields": [
										{
											"name": null,
											"type": "49",
											"typeName": "BalanceOf<T>",
											"docs": []
										}
									]
								}
							},
							"docs": []
						}
					},
					{
						"id": "636",
						"type": {
							"path": [
								"westend_runtime",
								"Runtime"
							],
							"params": [],
							"def": {
								"composite": {
									"fields": []
								}
							},
							"docs": []
						}
					}
				]
			},
			"pallets": [
				{
					"name": "System",
					"storage": {
						"prefix": "System",
						"items": [
							{
								"name": "Account",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Blake2_128Concat"
										],
										"key": "0",
										"value": "3"
									}
								},
								"fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
								"docs": [
									" The full account information for a particular account ID."
								]
							},
							{
								"name": "ExtrinsicCount",
								"modifier": "Optional",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00",
								"docs": [
									" Total extrinsics count for the current block."
								]
							},
							{
								"name": "BlockWeight",
								"modifier": "Default",
								"type": {
									"plain": "7"
								},
								"fallback": "0x000000000000000000000000000000000000000000000000",
								"docs": [
									" The current weight for the block."
								]
							},
							{
								"name": "AllExtrinsicsLen",
								"modifier": "Optional",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00",
								"docs": [
									" Total length (in bytes) for all extrinsics put together, for the current block."
								]
							},
							{
								"name": "BlockHash",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "4",
										"value": "9"
									}
								},
								"fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
								"docs": [
									" Map of block numbers to block hashes."
								]
							},
							{
								"name": "ExtrinsicData",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "4",
										"value": "10"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Extrinsics data for the current block (maps an extrinsic's index to its data)."
								]
							},
							{
								"name": "Number",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" The current block number being processed. Set by `execute_block`."
								]
							},
							{
								"name": "ParentHash",
								"modifier": "Default",
								"type": {
									"plain": "9"
								},
								"fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
								"docs": [
									" Hash of the previous block."
								]
							},
							{
								"name": "Digest",
								"modifier": "Default",
								"type": {
									"plain": "11"
								},
								"fallback": "0x00",
								"docs": [
									" Digest of the current block, also part of the block header."
								]
							},
							{
								"name": "Events",
								"modifier": "Default",
								"type": {
									"plain": "15"
								},
								"fallback": "0x00",
								"docs": [
									" Events deposited for the current block.",
									"",
									" NOTE: The item is unbound and should therefore never be read on chain.",
									" It could otherwise inflate the PoV size of a block.",
									"",
									" Events have a large in-memory size. Box the events to not go out-of-memory",
									" just in case someone still reads them from within the runtime."
								]
							},
							{
								"name": "EventCount",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" The number of events in the `Events<T>` list."
								]
							},
							{
								"name": "EventTopics",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Blake2_128Concat"
										],
										"key": "9",
										"value": "139"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Mapping between a topic (represented by T::Hash) and a vector of indexes",
									" of events in the `<Events<T>>` list.",
									"",
									" All topic vectors have deterministic storage locations depending on the topic. This",
									" allows light-clients to leverage the changes trie storage tracking mechanism and",
									" in case of changes fetch the list of events of interest.",
									"",
									" The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
									" the `EventIndex` then in case if the topic has the same contents on the next block",
									" no notification will be triggered thus the event might be lost."
								]
							},
							{
								"name": "LastRuntimeUpgrade",
								"modifier": "Optional",
								"type": {
									"plain": "140"
								},
								"fallback": "0x00",
								"docs": [
									" Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
								]
							},
							{
								"name": "UpgradedToU32RefCount",
								"modifier": "Default",
								"type": {
									"plain": "34"
								},
								"fallback": "0x00",
								"docs": [
									" True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
								]
							},
							{
								"name": "UpgradedToTripleRefCount",
								"modifier": "Default",
								"type": {
									"plain": "34"
								},
								"fallback": "0x00",
								"docs": [
									" True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
									" (default) if not."
								]
							},
							{
								"name": "ExecutionPhase",
								"modifier": "Optional",
								"type": {
									"plain": "137"
								},
								"fallback": "0x00",
								"docs": [
									" The execution phase of the block."
								]
							}
						]
					},
					"calls": {
						"type": "142"
					},
					"events": {
						"type": "18"
					},
					"constants": [
						{
							"name": "BlockWeights",
							"type": "146",
							"value": {
								"baseBlock": "4554981000",
								"maxBlock": "2000000000000",
								"perClass": {
									"normal": {
										"baseExtrinsic": "77592000",
										"maxExtrinsic": "1479922408000",
										"maxTotal": "1500000000000",
										"reserved": "0"
									},
									"operational": {
										"baseExtrinsic": "77592000",
										"maxExtrinsic": "1979922408000",
										"maxTotal": "2000000000000",
										"reserved": "500000000000"
									},
									"mandatory": {
										"baseExtrinsic": "77592000",
										"maxExtrinsic": null,
										"maxTotal": null,
										"reserved": null
									}
								}
							},
							"docs": [
								" Block & extrinsics weights: base values and limits."
							]
						},
						{
							"name": "BlockLength",
							"type": "150",
							"value": {
								"max": {
									"normal": "3932160",
									"operational": "5242880",
									"mandatory": "5242880"
								}
							},
							"docs": [
								" The maximum length of a block (in bytes)."
							]
						},
						{
							"name": "BlockHashCount",
							"type": "4",
							"value": "2400",
							"docs": [
								" Maximum number of block number to block hash mappings to keep (oldest pruned first)."
							]
						},
						{
							"name": "DbWeight",
							"type": "152",
							"value": {
								"read": "25000000",
								"write": "100000000"
							},
							"docs": [
								" The weight of runtime database operations the runtime can invoke."
							]
						},
						{
							"name": "Version",
							"type": "153",
							"value": {
								"specName": "westend",
								"implName": "parity-westend",
								"authoringVersion": "2",
								"specVersion": "9200",
								"implVersion": "0",
								"apis": [
									[
										"0xdf6acb689907609b",
										"4"
									],
									[
										"0x37e397fc7c91f5e4",
										"1"
									],
									[
										"0x40fe3ad401f8959a",
										"6"
									],
									[
										"0xd2bc9897eed08f15",
										"3"
									],
									[
										"0xf78b278be53f454c",
										"2"
									],
									[
										"0xaf2c0297a23e6d3d",
										"2"
									],
									[
										"0x49eaaf1b548a0cb0",
										"1"
									],
									[
										"0x91d5df18b0d2cf58",
										"1"
									],
									[
										"0xed99c5acb25eedf5",
										"3"
									],
									[
										"0xcbca25e39f142387",
										"2"
									],
									[
										"0x687ad44ad37f03c2",
										"1"
									],
									[
										"0xab3c0572291feb8b",
										"1"
									],
									[
										"0xbc9d89904f5b923f",
										"1"
									],
									[
										"0x37c8bb1350a9a2a8",
										"1"
									]
								],
								"transactionVersion": "11",
								"stateVersion": "0"
							},
							"docs": [
								" Get the chain's current version."
							]
						},
						{
							"name": "SS58Prefix",
							"type": "67",
							"value": "42",
							"docs": [
								" The designated SS85 prefix of this chain.",
								"",
								" This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
								" that the runtime should know about the prefix in order to make use of it as",
								" an identifier of the chain."
							]
						}
					],
					"errors": {
						"type": "157"
					},
					"index": "0"
				},
				{
					"name": "Babe",
					"storage": {
						"prefix": "Babe",
						"items": [
							{
								"name": "EpochIndex",
								"modifier": "Default",
								"type": {
									"plain": "8"
								},
								"fallback": "0x0000000000000000",
								"docs": [
									" Current epoch index."
								]
							},
							{
								"name": "Authorities",
								"modifier": "Default",
								"type": {
									"plain": "158"
								},
								"fallback": "0x00",
								"docs": [
									" Current epoch authorities."
								]
							},
							{
								"name": "GenesisSlot",
								"modifier": "Default",
								"type": {
									"plain": "162"
								},
								"fallback": "0x0000000000000000",
								"docs": [
									" The slot at which the first epoch actually started. This is 0",
									" until the first block of the chain."
								]
							},
							{
								"name": "CurrentSlot",
								"modifier": "Default",
								"type": {
									"plain": "162"
								},
								"fallback": "0x0000000000000000",
								"docs": [
									" Current slot number."
								]
							},
							{
								"name": "Randomness",
								"modifier": "Default",
								"type": {
									"plain": "1"
								},
								"fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
								"docs": [
									" The epoch randomness for the *current* epoch.",
									"",
									" # Security",
									"",
									" This MUST NOT be used for gambling, as it can be influenced by a",
									" malicious validator in the short term. It MAY be used in many",
									" cryptographic protocols, however, so long as one remembers that this",
									" (like everything else on-chain) it is public. For example, it can be",
									" used where a number is needed that cannot have been chosen by an",
									" adversary, for purposes such as public-coin zero-knowledge proofs."
								]
							},
							{
								"name": "PendingEpochConfigChange",
								"modifier": "Optional",
								"type": {
									"plain": "163"
								},
								"fallback": "0x00",
								"docs": [
									" Pending epoch configuration change that will be applied when the next epoch is enacted."
								]
							},
							{
								"name": "NextRandomness",
								"modifier": "Default",
								"type": {
									"plain": "1"
								},
								"fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
								"docs": [
									" Next epoch randomness."
								]
							},
							{
								"name": "NextAuthorities",
								"modifier": "Default",
								"type": {
									"plain": "158"
								},
								"fallback": "0x00",
								"docs": [
									" Next epoch authorities."
								]
							},
							{
								"name": "SegmentIndex",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" Randomness under construction.",
									"",
									" We make a trade-off between storage accesses and list length.",
									" We store the under-construction randomness in segments of up to",
									" `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
									"",
									" Once a segment reaches this length, we begin the next one.",
									" We reset all segments and return to `0` at the beginning of every",
									" epoch."
								]
							},
							{
								"name": "UnderConstruction",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "4",
										"value": "166"
									}
								},
								"fallback": "0x00",
								"docs": [
									" TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
								]
							},
							{
								"name": "Initialized",
								"modifier": "Optional",
								"type": {
									"plain": "168"
								},
								"fallback": "0x00",
								"docs": [
									" Temporary value (cleared at block finalization) which is `Some`",
									" if per-block initialization has already been called for current block."
								]
							},
							{
								"name": "AuthorVrfRandomness",
								"modifier": "Default",
								"type": {
									"plain": "168"
								},
								"fallback": "0x00",
								"docs": [
									" This field should always be populated during block processing unless",
									" secondary plain slots are enabled (which don't contain a VRF output).",
									"",
									" It is set in `on_initialize`, before it will contain the value from the last block."
								]
							},
							{
								"name": "EpochStart",
								"modifier": "Default",
								"type": {
									"plain": "59"
								},
								"fallback": "0x0000000000000000",
								"docs": [
									" The block numbers when the last and current epoch have started, respectively `N-1` and",
									" `N`.",
									" NOTE: We track this is in order to annotate the block number when a given pool of",
									" entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
									" slots, which may be skipped, the block numbers may not line up with the slot numbers."
								]
							},
							{
								"name": "Lateness",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" How late the current block is compared to its parent.",
									"",
									" This entry is populated as part of block execution and is cleaned up",
									" on block finalization. Querying this storage entry outside of block",
									" execution context should always yield zero."
								]
							},
							{
								"name": "EpochConfig",
								"modifier": "Optional",
								"type": {
									"plain": "169"
								},
								"fallback": "0x00",
								"docs": [
									" The configuration for the current epoch. Should never be `None` as it is initialized in",
									" genesis."
								]
							},
							{
								"name": "NextEpochConfig",
								"modifier": "Optional",
								"type": {
									"plain": "169"
								},
								"fallback": "0x00",
								"docs": [
									" The configuration for the next epoch, `None` if the config will not change",
									" (you can fallback to `EpochConfig` instead in that case)."
								]
							}
						]
					},
					"calls": {
						"type": "170"
					},
					"events": null,
					"constants": [
						{
							"name": "EpochDuration",
							"type": "8",
							"value": "600",
							"docs": [
								" The amount of time, in slots, that each epoch should last.",
								" NOTE: Currently it is not possible to change the epoch duration after",
								" the chain has started. Attempting to do so will brick block production."
							]
						},
						{
							"name": "ExpectedBlockTime",
							"type": "8",
							"value": "6000",
							"docs": [
								" The expected average block time at which BABE should be creating",
								" blocks. Since BABE is probabilistic it is not trivial to figure out",
								" what the expected average block time should be based on the slot",
								" duration and the security parameter `c` (where `1 - c` represents",
								" the probability of a slot being empty)."
							]
						},
						{
							"name": "MaxAuthorities",
							"type": "4",
							"value": "100000",
							"docs": [
								" Max number of authorities allowed"
							]
						}
					],
					"errors": {
						"type": "175"
					},
					"index": "1"
				},
				{
					"name": "Timestamp",
					"storage": {
						"prefix": "Timestamp",
						"items": [
							{
								"name": "Now",
								"modifier": "Default",
								"type": {
									"plain": "8"
								},
								"fallback": "0x0000000000000000",
								"docs": [
									" Current time for the current block."
								]
							},
							{
								"name": "DidUpdate",
								"modifier": "Default",
								"type": {
									"plain": "34"
								},
								"fallback": "0x00",
								"docs": [
									" Did the timestamp get updated in this block?"
								]
							}
						]
					},
					"calls": {
						"type": "176"
					},
					"events": null,
					"constants": [
						{
							"name": "MinimumPeriod",
							"type": "8",
							"value": "3000",
							"docs": [
								" The minimum period between blocks. Beware that this is different to the *expected*",
								" period that the block production apparatus provides. Your chosen consensus system will",
								" generally work with this to determine a sensible block time. e.g. For Aura, it will be",
								" double this period on default settings."
							]
						}
					],
					"errors": null,
					"index": "2"
				},
				{
					"name": "Indices",
					"storage": {
						"prefix": "Indices",
						"items": [
							{
								"name": "Accounts",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Blake2_128Concat"
										],
										"key": "4",
										"value": "177"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The lookup from index to account."
								]
							}
						]
					},
					"calls": {
						"type": "178"
					},
					"events": {
						"type": "27"
					},
					"constants": [
						{
							"name": "Deposit",
							"type": "6",
							"value": "1000000000000",
							"docs": [
								" The deposit needed for reserving an index."
							]
						}
					],
					"errors": {
						"type": "179"
					},
					"index": "3"
				},
				{
					"name": "Balances",
					"storage": {
						"prefix": "Balances",
						"items": [
							{
								"name": "TotalIssuance",
								"modifier": "Default",
								"type": {
									"plain": "6"
								},
								"fallback": "0x00000000000000000000000000000000",
								"docs": [
									" The total units issued in the system."
								]
							},
							{
								"name": "Account",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Blake2_128Concat"
										],
										"key": "0",
										"value": "5"
									}
								},
								"fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
								"docs": [
									" The Balances pallet example of storing the balance of an account.",
									"",
									" # Example",
									"",
									" ```nocompile",
									"  impl pallet_balances::Config for Runtime {",
									"    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
									"  }",
									" ```",
									"",
									" You can also store the balance of an account in the `System` pallet.",
									"",
									" # Example",
									"",
									" ```nocompile",
									"  impl pallet_balances::Config for Runtime {",
									"   type AccountStore = System",
									"  }",
									" ```",
									"",
									" But this comes with tradeoffs, storing account balances in the system pallet stores",
									" `frame_system` data alongside the account data contrary to storing account balances in the",
									" `Balances` pallet, which uses a `StorageMap` to store balances data only.",
									" NOTE: This is only used in the case that this pallet is used to store balances."
								]
							},
							{
								"name": "Locks",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Blake2_128Concat"
										],
										"key": "0",
										"value": "180"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Any liquidity locks on some account balances.",
									" NOTE: Should only be accessed when setting, changing and freeing a lock."
								]
							},
							{
								"name": "Reserves",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Blake2_128Concat"
										],
										"key": "0",
										"value": "184"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Named reserves on some account balances."
								]
							},
							{
								"name": "StorageVersion",
								"modifier": "Default",
								"type": {
									"plain": "187"
								},
								"fallback": "0x00",
								"docs": [
									" Storage version of the pallet.",
									"",
									" This is set to v2.0.0 for new networks."
								]
							}
						]
					},
					"calls": {
						"type": "188"
					},
					"events": {
						"type": "28"
					},
					"constants": [
						{
							"name": "ExistentialDeposit",
							"type": "6",
							"value": "10000000000",
							"docs": [
								" The minimum amount required to keep an account open."
							]
						},
						{
							"name": "MaxLocks",
							"type": "4",
							"value": "50",
							"docs": [
								" The maximum number of locks that should exist on an account.",
								" Not strictly enforced, but used for weight estimation."
							]
						},
						{
							"name": "MaxReserves",
							"type": "4",
							"value": "50",
							"docs": [
								" The maximum number of named reserves that can exist on an account."
							]
						}
					],
					"errors": {
						"type": "191"
					},
					"index": "4"
				},
				{
					"name": "TransactionPayment",
					"storage": {
						"prefix": "TransactionPayment",
						"items": [
							{
								"name": "NextFeeMultiplier",
								"modifier": "Default",
								"type": {
									"plain": "192"
								},
								"fallback": "0x000064a7b3b6e00d0000000000000000",
								"docs": []
							},
							{
								"name": "StorageVersion",
								"modifier": "Default",
								"type": {
									"plain": "193"
								},
								"fallback": "0x00",
								"docs": []
							}
						]
					},
					"calls": null,
					"events": null,
					"constants": [
						{
							"name": "OperationalFeeMultiplier",
							"type": "2",
							"value": "5",
							"docs": [
								" A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
								" `priority`",
								"",
								" This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
								" added to a tip component in regular `priority` calculations.",
								" It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
								" extrinsic (with no tip), by including a tip value greater than the virtual tip.",
								"",
								" ```rust,ignore",
								" // For `Normal`",
								" let priority = priority_calc(tip);",
								"",
								" // For `Operational`",
								" let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
								" let priority = priority_calc(tip + virtual_tip);",
								" ```",
								"",
								" Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
								" sent with the transaction. So, not only does the transaction get a priority bump based",
								" on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
								" transactions."
							]
						},
						{
							"name": "WeightToFee",
							"type": "194",
							"value": [
								{
									"coeffInteger": "12",
									"coeffFrac": "887926590",
									"negative": false,
									"degree": "1"
								}
							],
							"docs": [
								" The polynomial that is applied in order to derive fee from weight."
							]
						},
						{
							"name": "LengthToFee",
							"type": "194",
							"value": [
								{
									"coeffInteger": "100000000",
									"coeffFrac": "0",
									"negative": false,
									"degree": "1"
								}
							],
							"docs": [
								" The polynomial that is applied in order to derive fee from length."
							]
						}
					],
					"errors": null,
					"index": "26"
				},
				{
					"name": "Authorship",
					"storage": {
						"prefix": "Authorship",
						"items": [
							{
								"name": "Uncles",
								"modifier": "Default",
								"type": {
									"plain": "196"
								},
								"fallback": "0x00",
								"docs": [
									" Uncles"
								]
							},
							{
								"name": "Author",
								"modifier": "Optional",
								"type": {
									"plain": "0"
								},
								"fallback": "0x00",
								"docs": [
									" Author of current block."
								]
							},
							{
								"name": "DidSetUncles",
								"modifier": "Default",
								"type": {
									"plain": "34"
								},
								"fallback": "0x00",
								"docs": [
									" Whether uncles were already set in this block."
								]
							}
						]
					},
					"calls": {
						"type": "198"
					},
					"events": null,
					"constants": [
						{
							"name": "UncleGenerations",
							"type": "4",
							"value": "0",
							"docs": [
								" The number of blocks back we should accept uncles.",
								" This means that we will deal with uncle-parents that are",
								" `UncleGenerations + 1` before `now`."
							]
						}
					],
					"errors": {
						"type": "200"
					},
					"index": "5"
				},
				{
					"name": "Staking",
					"storage": {
						"prefix": "Staking",
						"items": [
							{
								"name": "HistoryDepth",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x54000000",
								"docs": [
									" Number of eras to keep in history.",
									"",
									" Information is kept for eras in `[current_era - history_depth; current_era]`.",
									"",
									" Must be more than the number of eras delayed by session otherwise. I.e. active era must",
									" always be in history. I.e. `active_era > current_era - history_depth` must be",
									" guaranteed."
								]
							},
							{
								"name": "ValidatorCount",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" The ideal number of staking participants."
								]
							},
							{
								"name": "MinimumValidatorCount",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" Minimum number of staking participants before emergency conditions are imposed."
								]
							},
							{
								"name": "Invulnerables",
								"modifier": "Default",
								"type": {
									"plain": "201"
								},
								"fallback": "0x00",
								"docs": [
									" Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
									" easy to initialize and the performance hit is minimal (we expect no more than four",
									" invulnerables) and restricted to testnets."
								]
							},
							{
								"name": "Bonded",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "0",
										"value": "0"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Map from all locked \"stash\" accounts to the controller account."
								]
							},
							{
								"name": "MinNominatorBond",
								"modifier": "Default",
								"type": {
									"plain": "6"
								},
								"fallback": "0x00000000000000000000000000000000",
								"docs": [
									" The minimum active bond to become and maintain the role of a nominator."
								]
							},
							{
								"name": "MinValidatorBond",
								"modifier": "Default",
								"type": {
									"plain": "6"
								},
								"fallback": "0x00000000000000000000000000000000",
								"docs": [
									" The minimum active bond to become and maintain the role of a validator."
								]
							},
							{
								"name": "MinCommission",
								"modifier": "Default",
								"type": {
									"plain": "33"
								},
								"fallback": "0x00000000",
								"docs": [
									" The minimum amount of commission that validators can set.",
									"",
									" If set to `0`, no limit exists."
								]
							},
							{
								"name": "Ledger",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Blake2_128Concat"
										],
										"key": "0",
										"value": "202"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
								]
							},
							{
								"name": "Payee",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "0",
										"value": "207"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Where the reward payment should be made. Keyed by stash."
								]
							},
							{
								"name": "Validators",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "0",
										"value": "31"
									}
								},
								"fallback": "0x0000",
								"docs": [
									" The map from (wannabe) validator stash key to the preferences of that validator."
								]
							},
							{
								"name": "CounterForValidators",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									"Counter for the related counted storage map"
								]
							},
							{
								"name": "MaxValidatorsCount",
								"modifier": "Optional",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00",
								"docs": [
									" The maximum validator count before we stop allowing new validators to join.",
									"",
									" When this value is not set, no limits are enforced."
								]
							},
							{
								"name": "Nominators",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "0",
										"value": "208"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The map from nominator stash key to their nomination preferences, namely the validators that",
									" they wish to support.",
									"",
									" Note that the keys of this storage map might become non-decodable in case the",
									" [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators",
									" are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
									" indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
									" nominators will effectively not-exist, until they re-submit their preferences such that it",
									" is within the bounds of the newly set `Config::MaxNominations`.",
									"",
									" This implies that `::iter_keys().count()` and `::iter().count()` might return different",
									" values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
									" number of keys that exist.",
									"",
									" Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
									" [`Call::chill_other`] dispatchable by anyone."
								]
							},
							{
								"name": "CounterForNominators",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									"Counter for the related counted storage map"
								]
							},
							{
								"name": "MaxNominatorsCount",
								"modifier": "Optional",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00",
								"docs": [
									" The maximum nominator count before we stop allowing new validators to join.",
									"",
									" When this value is not set, no limits are enforced."
								]
							},
							{
								"name": "CurrentEra",
								"modifier": "Optional",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00",
								"docs": [
									" The current era index.",
									"",
									" This is the latest planned era, depending on how the Session pallet queues the validator",
									" set, it might be active or not."
								]
							},
							{
								"name": "ActiveEra",
								"modifier": "Optional",
								"type": {
									"plain": "210"
								},
								"fallback": "0x00",
								"docs": [
									" The active era information, it holds index and start.",
									"",
									" The active era is the era being currently rewarded. Validator set of this era must be",
									" equal to [`SessionInterface::validators`]."
								]
							},
							{
								"name": "ErasStartSessionIndex",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "4",
										"value": "4"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The session index at which the era start for the last `HISTORY_DEPTH` eras.",
									"",
									" Note: This tracks the starting session (i.e. session index when era start being active)",
									" for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
								]
							},
							{
								"name": "ErasStakers",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Twox64Concat"
										],
										"key": "211",
										"value": "48"
									}
								},
								"fallback": "0x000000",
								"docs": [
									" Exposure of validator at era.",
									"",
									" This is keyed first by the era index to allow bulk deletion and then the stash account.",
									"",
									" Is it removed after `HISTORY_DEPTH` eras.",
									" If stakers hasn't been set or has been removed then empty exposure is returned."
								]
							},
							{
								"name": "ErasStakersClipped",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Twox64Concat"
										],
										"key": "211",
										"value": "48"
									}
								},
								"fallback": "0x000000",
								"docs": [
									" Clipped Exposure of validator at era.",
									"",
									" This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
									" `T::MaxNominatorRewardedPerValidator` biggest stakers.",
									" (Note: the field `total` and `own` of the exposure remains unchanged).",
									" This is used to limit the i/o cost for the nominator payout.",
									"",
									" This is keyed fist by the era index to allow bulk deletion and then the stash account.",
									"",
									" Is it removed after `HISTORY_DEPTH` eras.",
									" If stakers hasn't been set or has been removed then empty exposure is returned."
								]
							},
							{
								"name": "ErasValidatorPrefs",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Twox64Concat"
										],
										"key": "211",
										"value": "31"
									}
								},
								"fallback": "0x0000",
								"docs": [
									" Similar to `ErasStakers`, this holds the preferences of validators.",
									"",
									" This is keyed first by the era index to allow bulk deletion and then the stash account.",
									"",
									" Is it removed after `HISTORY_DEPTH` eras."
								]
							},
							{
								"name": "ErasValidatorReward",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "4",
										"value": "6"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The total validator era payout for the last `HISTORY_DEPTH` eras.",
									"",
									" Eras that haven't finished yet or has been removed doesn't have reward."
								]
							},
							{
								"name": "ErasRewardPoints",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "4",
										"value": "212"
									}
								},
								"fallback": "0x0000000000",
								"docs": [
									" Rewards for the last `HISTORY_DEPTH` eras.",
									" If reward hasn't been set or has been removed then 0 reward is returned."
								]
							},
							{
								"name": "ErasTotalStake",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "4",
										"value": "6"
									}
								},
								"fallback": "0x00000000000000000000000000000000",
								"docs": [
									" The total amount staked for the last `HISTORY_DEPTH` eras.",
									" If total hasn't been set or has been removed then 0 stake is returned."
								]
							},
							{
								"name": "ForceEra",
								"modifier": "Default",
								"type": {
									"plain": "216"
								},
								"fallback": "0x00",
								"docs": [
									" Mode of era forcing."
								]
							},
							{
								"name": "SlashRewardFraction",
								"modifier": "Default",
								"type": {
									"plain": "33"
								},
								"fallback": "0x00000000",
								"docs": [
									" The percentage of the slash that is distributed to reporters.",
									"",
									" The rest of the slashed value is handled by the `Slash`."
								]
							},
							{
								"name": "CanceledSlashPayout",
								"modifier": "Default",
								"type": {
									"plain": "6"
								},
								"fallback": "0x00000000000000000000000000000000",
								"docs": [
									" The amount of currency given to reporters of a slash event which was",
									" canceled by extraordinary circumstances (e.g. governance)."
								]
							},
							{
								"name": "UnappliedSlashes",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "4",
										"value": "217"
									}
								},
								"fallback": "0x00",
								"docs": [
									" All unapplied slashes that are queued for later."
								]
							},
							{
								"name": "BondedEras",
								"modifier": "Default",
								"type": {
									"plain": "139"
								},
								"fallback": "0x00",
								"docs": [
									" A mapping from still-bonded eras to the first session index of that era.",
									"",
									" Must contains information for eras for the range:",
									" `[active_era - bounding_duration; active_era]`"
								]
							},
							{
								"name": "ValidatorSlashInEra",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Twox64Concat"
										],
										"key": "211",
										"value": "221"
									}
								},
								"fallback": "0x00",
								"docs": [
									" All slashing events on validators, mapped by era to the highest slash proportion",
									" and slash value of the era."
								]
							},
							{
								"name": "NominatorSlashInEra",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Twox64Concat"
										],
										"key": "211",
										"value": "6"
									}
								},
								"fallback": "0x00",
								"docs": [
									" All slashing events on nominators, mapped by era to the highest slash value of the era."
								]
							},
							{
								"name": "SlashingSpans",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "0",
										"value": "222"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Slashing spans for stash accounts."
								]
							},
							{
								"name": "SpanSlash",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "215",
										"value": "223"
									}
								},
								"fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
								"docs": [
									" Records information about the maximum slash of a stash within a slashing span,",
									" as well as how much reward has been paid out."
								]
							},
							{
								"name": "EarliestUnappliedSlash",
								"modifier": "Optional",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00",
								"docs": [
									" The earliest era for which we have a pending, unapplied slash."
								]
							},
							{
								"name": "CurrentPlannedSession",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" The last planned session scheduled by the session pallet.",
									"",
									" This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
								]
							},
							{
								"name": "OffendingValidators",
								"modifier": "Default",
								"type": {
									"plain": "224"
								},
								"fallback": "0x00",
								"docs": [
									" Indices of validators that have offended in the active era and whether they are currently",
									" disabled.",
									"",
									" This value should be a superset of disabled validators since not all offences lead to the",
									" validator being disabled (if there was no slash). This is needed to track the percentage of",
									" validators that have offended in the current era, ensuring a new era is forced if",
									" `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
									" whether a given validator has previously offended using binary search. It gets cleared when",
									" the era ends."
								]
							},
							{
								"name": "StorageVersion",
								"modifier": "Default",
								"type": {
									"plain": "226"
								},
								"fallback": "0x07",
								"docs": [
									" True if network has been upgraded to this version.",
									" Storage version of the pallet.",
									"",
									" This is set to v7.0.0 for new networks."
								]
							},
							{
								"name": "ChillThreshold",
								"modifier": "Optional",
								"type": {
									"plain": "227"
								},
								"fallback": "0x00",
								"docs": [
									" The threshold for when users can start calling `chill_other` for other validators /",
									" nominators. The threshold is compared to the actual number of validators / nominators",
									" (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
								]
							}
						]
					},
					"calls": {
						"type": "228"
					},
					"events": {
						"type": "30"
					},
					"constants": [
						{
							"name": "MaxNominations",
							"type": "4",
							"value": "16",
							"docs": [
								" Maximum number of nominations per nominator."
							]
						},
						{
							"name": "SessionsPerEra",
							"type": "4",
							"value": "6",
							"docs": [
								" Number of sessions per era."
							]
						},
						{
							"name": "BondingDuration",
							"type": "4",
							"value": "28",
							"docs": [
								" Number of eras that staked funds must remain bonded for."
							]
						},
						{
							"name": "SlashDeferDuration",
							"type": "4",
							"value": "27",
							"docs": [
								" Number of eras that slashes are deferred by, after computation.",
								"",
								" This should be less than the bonding duration. Set to 0 if slashes",
								" should be applied immediately, without opportunity for intervention."
							]
						},
						{
							"name": "MaxNominatorRewardedPerValidator",
							"type": "4",
							"value": "64",
							"docs": [
								" The maximum number of nominators rewarded for each validator.",
								"",
								" For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
								" claim their reward. This used to limit the i/o cost for the nominator payout."
							]
						},
						{
							"name": "MaxUnlockingChunks",
							"type": "4",
							"value": "32",
							"docs": [
								" The maximum number of `unlocking` chunks a [`StakingLedger`] can have. Effectively",
								" determines how many unique eras a staker may be unbonding in."
							]
						}
					],
					"errors": {
						"type": "234"
					},
					"index": "6"
				},
				{
					"name": "Offences",
					"storage": {
						"prefix": "Offences",
						"items": [
							{
								"name": "Reports",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "9",
										"value": "235"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The primary structure that holds all offence records keyed by report identifiers."
								]
							},
							{
								"name": "ConcurrentReportsIndex",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Twox64Concat"
										],
										"key": "236",
										"value": "138"
									}
								},
								"fallback": "0x00",
								"docs": [
									" A vector of reports of the same kind that happened at the same time slot."
								]
							},
							{
								"name": "ReportsByKindIndex",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "36",
										"value": "10"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Enumerates all reports of a kind along with the time they happened.",
									"",
									" All reports are sorted by the time of offence.",
									"",
									" Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
									" different types are not supported at the moment so we are doing the manual serialization."
								]
							}
						]
					},
					"calls": null,
					"events": {
						"type": "35"
					},
					"constants": [],
					"errors": null,
					"index": "7"
				},
				{
					"name": "Historical",
					"storage": null,
					"calls": null,
					"events": null,
					"constants": [],
					"errors": null,
					"index": "27"
				},
				{
					"name": "Session",
					"storage": {
						"prefix": "Session",
						"items": [
							{
								"name": "Validators",
								"modifier": "Default",
								"type": {
									"plain": "201"
								},
								"fallback": "0x00",
								"docs": [
									" The current set of validators."
								]
							},
							{
								"name": "CurrentIndex",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" Current index of the session."
								]
							},
							{
								"name": "QueuedChanged",
								"modifier": "Default",
								"type": {
									"plain": "34"
								},
								"fallback": "0x00",
								"docs": [
									" True if the underlying economic identities or weighting behind the validators",
									" has changed in the queued validator set."
								]
							},
							{
								"name": "QueuedKeys",
								"modifier": "Default",
								"type": {
									"plain": "237"
								},
								"fallback": "0x00",
								"docs": [
									" The queued keys for the next session. When the next session begins, these keys",
									" will be used to determine the validator's session keys."
								]
							},
							{
								"name": "DisabledValidators",
								"modifier": "Default",
								"type": {
									"plain": "206"
								},
								"fallback": "0x00",
								"docs": [
									" Indices of disabled validators.",
									"",
									" The vec is always kept sorted so that we can find whether a given validator is",
									" disabled using binary search. It gets cleared when `on_session_ending` returns",
									" a new set of identities."
								]
							},
							{
								"name": "NextKeys",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "0",
										"value": "239"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The next session keys for a validator."
								]
							},
							{
								"name": "KeyOwner",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "243",
										"value": "0"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The owner of a key. The key is the `KeyTypeId` + the encoded key."
								]
							}
						]
					},
					"calls": {
						"type": "245"
					},
					"events": {
						"type": "37"
					},
					"constants": [],
					"errors": {
						"type": "246"
					},
					"index": "8"
				},
				{
					"name": "Grandpa",
					"storage": {
						"prefix": "Grandpa",
						"items": [
							{
								"name": "State",
								"modifier": "Default",
								"type": {
									"plain": "247"
								},
								"fallback": "0x00",
								"docs": [
									" State of the current authority set."
								]
							},
							{
								"name": "PendingChange",
								"modifier": "Optional",
								"type": {
									"plain": "248"
								},
								"fallback": "0x00",
								"docs": [
									" Pending change: (signaled at, scheduled change)."
								]
							},
							{
								"name": "NextForced",
								"modifier": "Optional",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00",
								"docs": [
									" next block number where we can force a change."
								]
							},
							{
								"name": "Stalled",
								"modifier": "Optional",
								"type": {
									"plain": "59"
								},
								"fallback": "0x00",
								"docs": [
									" `true` if we are currently stalled."
								]
							},
							{
								"name": "CurrentSetId",
								"modifier": "Default",
								"type": {
									"plain": "8"
								},
								"fallback": "0x0000000000000000",
								"docs": [
									" The number of changes (both in terms of keys and underlying economic responsibilities)",
									" in the \"set\" of Grandpa validators from genesis."
								]
							},
							{
								"name": "SetIdSession",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "8",
										"value": "4"
									}
								},
								"fallback": "0x00",
								"docs": [
									" A mapping from grandpa set ID to the index of the *most recent* session for which its",
									" members were responsible.",
									"",
									" TWOX-NOTE: `SetId` is not under user control."
								]
							}
						]
					},
					"calls": {
						"type": "251"
					},
					"events": {
						"type": "38"
					},
					"constants": [
						{
							"name": "MaxAuthorities",
							"type": "4",
							"value": "100000",
							"docs": [
								" Max Authorities in use"
							]
						}
					],
					"errors": {
						"type": "262"
					},
					"index": "10"
				},
				{
					"name": "ImOnline",
					"storage": {
						"prefix": "ImOnline",
						"items": [
							{
								"name": "HeartbeatAfter",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" The block number after which it's ok to send heartbeats in the current",
									" session.",
									"",
									" At the beginning of each session we set this to a value that should fall",
									" roughly in the middle of the session duration. The idea is to first wait for",
									" the validators to produce a block in the current session, so that the",
									" heartbeat later on will not be necessary.",
									"",
									" This value will only be used as a fallback if we fail to get a proper session",
									" progress estimate from `NextSessionRotation`, as those estimates should be",
									" more accurate then the value we calculate for `HeartbeatAfter`."
								]
							},
							{
								"name": "Keys",
								"modifier": "Default",
								"type": {
									"plain": "263"
								},
								"fallback": "0x00",
								"docs": [
									" The current set of keys that may issue a heartbeat."
								]
							},
							{
								"name": "ReceivedHeartbeats",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Twox64Concat"
										],
										"key": "59",
										"value": "265"
									}
								},
								"fallback": "0x00",
								"docs": [
									" For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to",
									" `WrapperOpaque<BoundedOpaqueNetworkState>`."
								]
							},
							{
								"name": "AuthoredBlocks",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Twox64Concat"
										],
										"key": "211",
										"value": "4"
									}
								},
								"fallback": "0x00000000",
								"docs": [
									" For each session index, we keep a mapping of `ValidatorId<T>` to the",
									" number of blocks authored by the given authority."
								]
							}
						]
					},
					"calls": {
						"type": "270"
					},
					"events": {
						"type": "43"
					},
					"constants": [
						{
							"name": "UnsignedPriority",
							"type": "8",
							"value": "18446744073709551615",
							"docs": [
								" A configuration for base priority of unsigned transactions.",
								"",
								" This is exposed so that it can be tuned for particular runtime, when",
								" multiple pallets send unsigned transactions."
							]
						}
					],
					"errors": {
						"type": "277"
					},
					"index": "11"
				},
				{
					"name": "AuthorityDiscovery",
					"storage": null,
					"calls": null,
					"events": null,
					"constants": [],
					"errors": null,
					"index": "12"
				},
				{
					"name": "Utility",
					"storage": null,
					"calls": {
						"type": "278"
					},
					"events": {
						"type": "52"
					},
					"constants": [
						{
							"name": "batched_calls_limit",
							"type": "4",
							"value": "10922",
							"docs": [
								" The limit on the number of batched calls."
							]
						}
					],
					"errors": {
						"type": "477"
					},
					"index": "16"
				},
				{
					"name": "Identity",
					"storage": {
						"prefix": "Identity",
						"items": [
							{
								"name": "IdentityOf",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "0",
										"value": "478"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Information that is pertinent to identify the entity behind an account.",
									"",
									" TWOX-NOTE: OK ― `AccountId` is a secure hash."
								]
							},
							{
								"name": "SuperOf",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Blake2_128Concat"
										],
										"key": "0",
										"value": "317"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The super-identity of an alternative \"sub\" identity together with its name, within that",
									" context. If the account is not some other account's sub-identity, then just `None`."
								]
							},
							{
								"name": "SubsOf",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "0",
										"value": "482"
									}
								},
								"fallback": "0x0000000000000000000000000000000000",
								"docs": [
									" Alternative \"sub\" identities of this account.",
									"",
									" The first item is the deposit, the second is a vector of the accounts.",
									"",
									" TWOX-NOTE: OK ― `AccountId` is a secure hash."
								]
							},
							{
								"name": "Registrars",
								"modifier": "Default",
								"type": {
									"plain": "484"
								},
								"fallback": "0x00",
								"docs": [
									" The set of registrars. Not expected to get very big as can only be added through a",
									" special origin (likely a council motion).",
									"",
									" The index into this can be cast to `RegistrarIndex` to get a valid value."
								]
							}
						]
					},
					"calls": {
						"type": "281"
					},
					"events": {
						"type": "55"
					},
					"constants": [
						{
							"name": "BasicDeposit",
							"type": "6",
							"value": "10000000000000",
							"docs": [
								" The amount held on deposit for a registered identity"
							]
						},
						{
							"name": "FieldDeposit",
							"type": "6",
							"value": "2500000000000",
							"docs": [
								" The amount held on deposit per additional field for a registered identity."
							]
						},
						{
							"name": "SubAccountDeposit",
							"type": "6",
							"value": "2000000000000",
							"docs": [
								" The amount held on deposit for a registered subaccount. This should account for the fact",
								" that one storage item's value will increase by the size of an account ID, and there will",
								" be another trie item whose value is the size of an account ID plus 32 bytes."
							]
						},
						{
							"name": "MaxSubAccounts",
							"type": "4",
							"value": "100",
							"docs": [
								" The maximum number of sub-accounts allowed per identified account."
							]
						},
						{
							"name": "MaxAdditionalFields",
							"type": "4",
							"value": "100",
							"docs": [
								" Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
								" required to access an identity, but can be pretty high."
							]
						},
						{
							"name": "MaxRegistrars",
							"type": "4",
							"value": "20",
							"docs": [
								" Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
								" of, e.g., updating judgements."
							]
						}
					],
					"errors": {
						"type": "488"
					},
					"index": "17"
				},
				{
					"name": "Recovery",
					"storage": {
						"prefix": "Recovery",
						"items": [
							{
								"name": "Recoverable",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "0",
										"value": "489"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The set of recoverable accounts and their recovery configuration."
								]
							},
							{
								"name": "ActiveRecoveries",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Twox64Concat"
										],
										"key": "491",
										"value": "492"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Active recovery attempts.",
									"",
									" First account is the account to be recovered, and the second account",
									" is the user trying to recover the account."
								]
							},
							{
								"name": "Proxy",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Blake2_128Concat"
										],
										"key": "0",
										"value": "0"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The list of allowed proxy accounts.",
									"",
									" Map from the user who can access it to the recovered account."
								]
							}
						]
					},
					"calls": {
						"type": "321"
					},
					"events": {
						"type": "56"
					},
					"constants": [
						{
							"name": "ConfigDepositBase",
							"type": "6",
							"value": "5000000000000",
							"docs": [
								" The base amount of currency needed to reserve for creating a recovery configuration.",
								"",
								" This is held for an additional storage item whose value size is",
								" `2 + sizeof(BlockNumber, Balance)` bytes."
							]
						},
						{
							"name": "FriendDepositFactor",
							"type": "6",
							"value": "500000000000",
							"docs": [
								" The amount of currency needed per additional user when creating a recovery",
								" configuration.",
								"",
								" This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage",
								" value."
							]
						},
						{
							"name": "MaxFriends",
							"type": "4",
							"value": "9",
							"docs": [
								" The maximum amount of friends allowed in a recovery configuration.",
								"",
								" NOTE: The threshold programmed in this Pallet uses u16, so it does",
								" not really make sense to have a limit here greater than u16::MAX.",
								" But also, that is a lot more than you should probably set this value",
								" to anyway..."
							]
						},
						{
							"name": "RecoveryDeposit",
							"type": "6",
							"value": "5000000000000",
							"docs": [
								" The base amount of currency needed to reserve for starting a recovery.",
								"",
								" This is primarily held for deterring malicious recovery attempts, and should",
								" have a value large enough that a bad actor would choose not to place this",
								" deposit. It also acts to fund additional storage item whose value size is",
								" `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable",
								" threshold."
							]
						}
					],
					"errors": {
						"type": "493"
					},
					"index": "18"
				},
				{
					"name": "Vesting",
					"storage": {
						"prefix": "Vesting",
						"items": [
							{
								"name": "Vesting",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Blake2_128Concat"
										],
										"key": "0",
										"value": "494"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Information regarding the vesting of a given account."
								]
							},
							{
								"name": "StorageVersion",
								"modifier": "Default",
								"type": {
									"plain": "496"
								},
								"fallback": "0x00",
								"docs": [
									" Storage version of the pallet.",
									"",
									" New networks start with latest version, as determined by the genesis build."
								]
							}
						]
					},
					"calls": {
						"type": "322"
					},
					"events": {
						"type": "57"
					},
					"constants": [
						{
							"name": "MinVestedTransfer",
							"type": "6",
							"value": "1000000000000",
							"docs": [
								" The minimum amount transferred to call `vested_transfer`."
							]
						},
						{
							"name": "MaxVestingSchedules",
							"type": "4",
							"value": "28",
							"docs": []
						}
					],
					"errors": {
						"type": "497"
					},
					"index": "19"
				},
				{
					"name": "Scheduler",
					"storage": {
						"prefix": "Scheduler",
						"items": [
							{
								"name": "Agenda",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "4",
										"value": "498"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Items to be executed, indexed by the block number that they should be executed on."
								]
							},
							{
								"name": "Lookup",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "10",
										"value": "59"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Lookup from identity to the block number and index of the task."
								]
							}
						]
					},
					"calls": {
						"type": "324"
					},
					"events": {
						"type": "58"
					},
					"constants": [
						{
							"name": "MaximumWeight",
							"type": "8",
							"value": "1600000000000",
							"docs": [
								" The maximum weight that may be scheduled per block for any dispatchables of less",
								" priority than `schedule::HARD_DEADLINE`."
							]
						},
						{
							"name": "MaxScheduledPerBlock",
							"type": "4",
							"value": "50",
							"docs": [
								" The maximum number of scheduled calls in the queue for a single block.",
								" Not strictly enforced, but used for weight estimation."
							]
						}
					],
					"errors": {
						"type": "501"
					},
					"index": "20"
				},
				{
					"name": "Preimage",
					"storage": {
						"prefix": "Preimage",
						"items": [
							{
								"name": "StatusFor",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Identity"
										],
										"key": "9",
										"value": "502"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The request status of a given hash."
								]
							},
							{
								"name": "PreimageFor",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Identity"
										],
										"key": "9",
										"value": "504"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The preimages stored by this pallet."
								]
							}
						]
					},
					"calls": {
						"type": "327"
					},
					"events": {
						"type": "62"
					},
					"constants": [],
					"errors": {
						"type": "505"
					},
					"index": "28"
				},
				{
					"name": "Sudo",
					"storage": {
						"prefix": "Sudo",
						"items": [
							{
								"name": "Key",
								"modifier": "Optional",
								"type": {
									"plain": "0"
								},
								"fallback": "0x00",
								"docs": [
									" The `AccountId` of the sudo key."
								]
							}
						]
					},
					"calls": {
						"type": "328"
					},
					"events": {
						"type": "63"
					},
					"constants": [],
					"errors": {
						"type": "506"
					},
					"index": "21"
				},
				{
					"name": "Proxy",
					"storage": {
						"prefix": "Proxy",
						"items": [
							{
								"name": "Proxies",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "0",
										"value": "507"
									}
								},
								"fallback": "0x0000000000000000000000000000000000",
								"docs": [
									" The set of account proxies. Maps the account which has delegated to the accounts",
									" which are being delegated to, together with the amount held on deposit."
								]
							},
							{
								"name": "Announcements",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "0",
										"value": "511"
									}
								},
								"fallback": "0x0000000000000000000000000000000000",
								"docs": [
									" The announcements made by the proxy (key)."
								]
							}
						]
					},
					"calls": {
						"type": "329"
					},
					"events": {
						"type": "65"
					},
					"constants": [
						{
							"name": "ProxyDepositBase",
							"type": "6",
							"value": "1000400000000",
							"docs": [
								" The base amount of currency needed to reserve for creating a proxy.",
								"",
								" This is held for an additional storage item whose value size is",
								" `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
							]
						},
						{
							"name": "ProxyDepositFactor",
							"type": "6",
							"value": "1650000000",
							"docs": [
								" The amount of currency needed per proxy added.",
								"",
								" This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
								" pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
								" into account `32 + proxy_type.encode().len()` bytes of data."
							]
						},
						{
							"name": "MaxProxies",
							"type": "4",
							"value": "32",
							"docs": [
								" The maximum amount of proxies allowed for a single account."
							]
						},
						{
							"name": "MaxPending",
							"type": "4",
							"value": "32",
							"docs": [
								" The maximum amount of time-delayed announcements that are allowed to be pending."
							]
						},
						{
							"name": "AnnouncementDepositBase",
							"type": "6",
							"value": "1000400000000",
							"docs": [
								" The base amount of currency needed to reserve for creating an announcement.",
								"",
								" This is held when a new storage item holding a `Balance` is created (typically 16",
								" bytes)."
							]
						},
						{
							"name": "AnnouncementDepositFactor",
							"type": "6",
							"value": "3300000000",
							"docs": [
								" The amount of currency needed per announcement made.",
								"",
								" This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
								" into a pre-existing storage value."
							]
						}
					],
					"errors": {
						"type": "515"
					},
					"index": "22"
				},
				{
					"name": "Multisig",
					"storage": {
						"prefix": "Multisig",
						"items": [
							{
								"name": "Multisigs",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Blake2_128Concat"
										],
										"key": "516",
										"value": "517"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The set of open multisig operations."
								]
							},
							{
								"name": "Calls",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Identity"
										],
										"key": "1",
										"value": "518"
									}
								},
								"fallback": "0x00",
								"docs": []
							}
						]
					},
					"calls": {
						"type": "331"
					},
					"events": {
						"type": "68"
					},
					"constants": [
						{
							"name": "DepositBase",
							"type": "6",
							"value": "1004400000000",
							"docs": [
								" The base amount of currency needed to reserve for creating a multisig execution or to",
								" store a dispatch call for later.",
								"",
								" This is held for an additional storage item whose value size is",
								" `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
								" `32 + sizeof(AccountId)` bytes."
							]
						},
						{
							"name": "DepositFactor",
							"type": "6",
							"value": "1600000000",
							"docs": [
								" The amount of currency needed per unit threshold when creating a multisig execution.",
								"",
								" This is held for adding 32 bytes more into a pre-existing storage value."
							]
						},
						{
							"name": "MaxSignatories",
							"type": "67",
							"value": "100",
							"docs": [
								" The maximum amount of signatories allowed in the multisig."
							]
						}
					],
					"errors": {
						"type": "519"
					},
					"index": "23"
				},
				{
					"name": "ElectionProviderMultiPhase",
					"storage": {
						"prefix": "ElectionProviderMultiPhase",
						"items": [
							{
								"name": "Round",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x01000000",
								"docs": [
									" Internal counter for the number of rounds.",
									"",
									" This is useful for de-duplication of transactions submitted to the pool, and general",
									" diagnostics of the pallet.",
									"",
									" This is merely incremented once per every time that an upstream `elect` is called."
								]
							},
							{
								"name": "CurrentPhase",
								"modifier": "Default",
								"type": {
									"plain": "520"
								},
								"fallback": "0x00",
								"docs": [
									" Current phase."
								]
							},
							{
								"name": "QueuedSolution",
								"modifier": "Optional",
								"type": {
									"plain": "522"
								},
								"fallback": "0x00",
								"docs": [
									" Current best solution, signed or unsigned, queued to be returned upon `elect`."
								]
							},
							{
								"name": "Snapshot",
								"modifier": "Optional",
								"type": {
									"plain": "523"
								},
								"fallback": "0x00",
								"docs": [
									" Snapshot data of the round.",
									"",
									" This is created at the beginning of the signed phase and cleared upon calling `elect`."
								]
							},
							{
								"name": "DesiredTargets",
								"modifier": "Optional",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00",
								"docs": [
									" Desired number of targets to elect for this round.",
									"",
									" Only exists when [`Snapshot`] is present."
								]
							},
							{
								"name": "SnapshotMetadata",
								"modifier": "Optional",
								"type": {
									"plain": "388"
								},
								"fallback": "0x00",
								"docs": [
									" The metadata of the [`RoundSnapshot`]",
									"",
									" Only exists when [`Snapshot`] is present."
								]
							},
							{
								"name": "SignedSubmissionNextIndex",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" The next index to be assigned to an incoming signed submission.",
									"",
									" Every accepted submission is assigned a unique index; that index is bound to that particular",
									" submission for the duration of the election. On election finalization, the next index is",
									" reset to 0.",
									"",
									" We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
									" capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
									" because iteration is slow. Instead, we store the value here."
								]
							},
							{
								"name": "SignedSubmissionIndices",
								"modifier": "Default",
								"type": {
									"plain": "526"
								},
								"fallback": "0x00",
								"docs": [
									" A sorted, bounded set of `(score, index)`, where each `index` points to a value in",
									" `SignedSubmissions`.",
									"",
									" We never need to process more than a single signed submission at a time. Signed submissions",
									" can be quite large, so we're willing to pay the cost of multiple database accesses to access",
									" them one at a time instead of reading and decoding all of them at once."
								]
							},
							{
								"name": "SignedSubmissionsMap",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "4",
										"value": "530"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Unchecked, signed solutions.",
									"",
									" Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
									" allowing us to keep only a single one in memory at a time.",
									"",
									" Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
									" affect; we shouldn't need a cryptographically secure hasher."
								]
							},
							{
								"name": "MinimumUntrustedScore",
								"modifier": "Optional",
								"type": {
									"plain": "387"
								},
								"fallback": "0x00",
								"docs": [
									" The minimum score that each 'untrusted' solution must attain in order to be considered",
									" feasible.",
									"",
									" Can be set via `set_minimum_untrusted_score`."
								]
							}
						]
					},
					"calls": {
						"type": "334"
					},
					"events": {
						"type": "70"
					},
					"constants": [
						{
							"name": "UnsignedPhase",
							"type": "4",
							"value": "150",
							"docs": [
								" Duration of the unsigned phase."
							]
						},
						{
							"name": "SignedPhase",
							"type": "4",
							"value": "150",
							"docs": [
								" Duration of the signed phase."
							]
						},
						{
							"name": "SolutionImprovementThreshold",
							"type": "33",
							"value": "500000",
							"docs": [
								" The minimum amount of improvement to the solution score that defines a solution as",
								" \"better\" (in any phase)."
							]
						},
						{
							"name": "OffchainRepeat",
							"type": "4",
							"value": "37",
							"docs": [
								" The repeat threshold of the offchain worker.",
								"",
								" For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
								" to submit the worker's solution."
							]
						},
						{
							"name": "MinerTxPriority",
							"type": "8",
							"value": "9223372036854775807",
							"docs": [
								" The priority of the unsigned transaction submitted in the unsigned-phase"
							]
						},
						{
							"name": "MinerMaxWeight",
							"type": "8",
							"value": "1475367427000",
							"docs": [
								" Maximum weight that the miner should consume.",
								"",
								" The miner will ensure that the total weight of the unsigned solution will not exceed",
								" this value, based on [`WeightInfo::submit_unsigned`]."
							]
						},
						{
							"name": "SignedMaxSubmissions",
							"type": "4",
							"value": "128",
							"docs": [
								" Maximum number of signed submissions that can be queued.",
								"",
								" It is best to avoid adjusting this during an election, as it impacts downstream data",
								" structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
								" update this value during an election, you _must_ ensure that",
								" `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
								" attempts to submit new solutions may cause a runtime panic."
							]
						},
						{
							"name": "SignedMaxWeight",
							"type": "8",
							"value": "1475367427000",
							"docs": [
								" Maximum weight of a signed solution.",
								"",
								" This should probably be similar to [`Config::MinerMaxWeight`]."
							]
						},
						{
							"name": "SignedRewardBase",
							"type": "6",
							"value": "1000000000000",
							"docs": [
								" Base reward for a signed solution"
							]
						},
						{
							"name": "SignedDepositBase",
							"type": "6",
							"value": "2000000000000",
							"docs": [
								" Base deposit for a signed solution."
							]
						},
						{
							"name": "SignedDepositByte",
							"type": "6",
							"value": "488281",
							"docs": [
								" Per-byte deposit for a signed solution."
							]
						},
						{
							"name": "SignedDepositWeight",
							"type": "6",
							"value": "0",
							"docs": [
								" Per-weight deposit for a signed solution."
							]
						},
						{
							"name": "MaxElectingVoters",
							"type": "4",
							"value": "22500",
							"docs": [
								" The maximum number of electing voters to put in the snapshot. At the moment, snapshots",
								" are only over a single block, but once multi-block elections are introduced they will",
								" take place over multiple blocks."
							]
						},
						{
							"name": "MaxElectableTargets",
							"type": "67",
							"value": "65535",
							"docs": [
								" The maximum number of electable targets to put in the snapshot."
							]
						},
						{
							"name": "MinerMaxLength",
							"type": "4",
							"value": "3538944",
							"docs": [
								" Maximum length (bytes) that the mined solution should consume.",
								"",
								" The miner will ensure that the total length of the unsigned solution will not exceed",
								" this value."
							]
						}
					],
					"errors": {
						"type": "531"
					},
					"index": "24"
				},
				{
					"name": "BagsList",
					"storage": {
						"prefix": "BagsList",
						"items": [
							{
								"name": "ListNodes",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "0",
										"value": "532"
									}
								},
								"fallback": "0x00",
								"docs": [
									" A single node, within some bag.",
									"",
									" Nodes store links forward and back within their respective bags."
								]
							},
							{
								"name": "CounterForListNodes",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									"Counter for the related counted storage map"
								]
							},
							{
								"name": "ListBags",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "8",
										"value": "533"
									}
								},
								"fallback": "0x00",
								"docs": [
									" A bag stored in storage.",
									"",
									" Stores a `Bag` struct, which stores head and tail pointers to itself."
								]
							}
						]
					},
					"calls": {
						"type": "393"
					},
					"events": {
						"type": "73"
					},
					"constants": [
						{
							"name": "BagThresholds",
							"type": "534",
							"value": [
								"10000000000",
								"11131723507",
								"12391526824",
								"13793905044",
								"15354993703",
								"17092754435",
								"19027181634",
								"21180532507",
								"23577583160",
								"26245913670",
								"29216225417",
								"32522694326",
								"36203364094",
								"40300583912",
								"44861495728",
								"49938576656",
								"55590242767",
								"61881521217",
								"68884798439",
								"76680653006",
								"85358782760",
								"95019036859",
								"105772564622",
								"117743094401",
								"131068357174",
								"145901671259",
								"162413706368",
								"180794447305",
								"201255379901",
								"224031924337",
								"249386143848",
								"277609759981",
								"309027509097",
								"344000878735",
								"382932266827",
								"426269611626",
								"474511545609",
								"528213132664",
								"587992254562",
								"654536720209",
								"728612179460",
								"811070932564",
								"902861736593",
								"1005040721687",
								"1118783542717",
								"1245398906179",
								"1386343627960",
								"1543239395225",
								"1717891425287",
								"1912309236147",
								"2128729767682",
								"2369643119512",
								"2637821201686",
								"2936349627828",
								"3268663217709",
								"3638585517729",
								"4050372794022",
								"4508763004364",
								"5019030312352",
								"5587045771074",
								"6219344874498",
								"6923202753807",
								"7706717883882",
								"8578905263043",
								"9549800138161",
								"10630573468586",
								"11833660457397",
								"13172903628838",
								"14663712098160",
								"16323238866411",
								"18170578180087",
								"20226985226447",
								"22516120692255",
								"25064322999817",
								"27900911352605",
								"31058523077268",
								"34573489143434",
								"38486252181966",
								"42841831811331",
								"47690342626046",
								"53087570807094",
								"59095615988698",
								"65783605766662",
								"73228491069308",
								"81515931542404",
								"90741281135191",
								"101010685227495",
								"112442301921293",
								"125167661548718",
								"139333180038781",
								"155101843555358",
								"172655083789626",
								"192194865483744",
								"213946010204502",
								"238158783103893",
								"265111772429462",
								"295115094915607",
								"328513963936552",
								"365692661475578",
								"407078959611349",
								"453149042394237",
								"504432984742966",
								"561520851400862",
								"625069486125324",
								"695810069225823",
								"774556530406243",
								"862214913708369",
								"959793802308039",
								"1068415923109985",
								"1189331064661951",
								"1323930457019515",
								"1473762779014021",
								"1640551977100649",
								"1826217100807404",
								"2032894383008501",
								"2262961819074188",
								"2519066527700738",
								"2804155208229882",
								"3121508044894685",
								"3474776448088622",
								"3868025066902796",
								"4305778556320752",
								"0x001107466b868e49",
								"0x0012f49fde53c1b2",
								"0x001519ceb22f8a27",
								"0x00177d24849f39b2",
								"0x001a25aa04e799e1",
								"0x001d1b33abf513ba",
								"0x00206678cc854726",
								"0x0024112d3f80bf88",
								"0x0028261df823981c",
								"0x002cb150d422c4cc",
								"0x0031c028058288f0",
								"0x003761897e6d7c36",
								"0x003da60ad329936e",
								"0x0044a022136cbc8c",
								"0x004c645c2af37000",
								"0x0055099969843bb4",
								"0x005ea950e4abb480",
								"0x00695fdb79a9cda0",
								"0x00754cc74c7fc24c",
								"0x00829334ba0eacd0",
								"0x00915a3dcf0c3e48",
								"0x00a1cd69748ec668",
								"0x00b41d2ba56f1e28",
								"0x00c87f742623a998",
								"0x00df304d63749af0",
								"0x00f8728d4bfccd80",
								"0x0114909a2d601490",
								"0x0133dd45d913b4f0",
								"0x0156b4c196359720",
								"0x017d7dadaefbdc50",
								"0x01a8aa47b99811e0",
								"0x01d8b9bb16eec730",
								"0x020e399786486e20",
								"0x0249c7721d4bfaa0",
								"0x028c12b5707111c0",
								"0x02d5dea643168a80",
								"0x032804a2b123f8c0",
								"0x038376a27059af80",
								"0x03e941ff872d6fc0",
								"0x045a928fac7f9340",
								"0x04d8b61771099100",
								"0x056520215bdf0f40",
								"0x06016e4449c14900",
								"0x06af6ce5a6bc8e00",
								"0x07711c8586565900",
								"0x0848b7a434aa6880",
								"0x0938b9529ee2a180",
								"0x0a43e480e8abbd00",
								"0x0b6d4c20b4722a00",
								"0x0cb85c3313c0f180",
								"0x0e28e3dccb3ca000",
								"0x0fc3209e9a62b880",
								"0x118bcad29356de00",
								"0x138823934c7f5d00",
								"0x15be0435df871a00",
								"0x1833ef844bcea700",
								"0x1af124eafb100100",
								"0x1dfdb5d1e52a8000",
								"0x21629d6034a12200",
								"0x2529daf06b214400",
								"0x295e8f82f1610200",
								"0x2e0d1e85cf206600",
								"0x3343525219108400",
								"0x391084ca8fc1a000",
								"0x3f85cc9314ad2600",
								"0x46b62f6624cdd000",
								"0x4eb6da1c9ae19c00",
								"0x579f5f0cc2cc5800",
								"0x6189fb78750a2000",
								"0x6c93e4d6bbbb3000",
								"0x78dd9edca7cb6000",
								"0x868b5b42c03bb800",
								"0x95c564612386b800",
								"0xa6b893dc5ff1f800",
								"0xb996d6c0916a2000",
								"0xce97c08fe2efd800",
								"0xe5f92ef59b296800",
								"0xffffffffffffffff"
							],
							"docs": [
								" The list of thresholds separating the various bags.",
								"",
								" Ids are separated into unsorted bags according to their score. This specifies the",
								" thresholds separating the bags. An id's bag is the largest bag for which the id's score",
								" is less than or equal to its upper threshold.",
								"",
								" When ids are iterated, higher bags are iterated completely before lower bags. This means",
								" that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
								" score, but peer ids within a particular bag are sorted in insertion order.",
								"",
								" # Expressing the constant",
								"",
								" This constant must be sorted in strictly increasing order. Duplicate items are not",
								" permitted.",
								"",
								" There is an implied upper limit of `Score::MAX`; that value does not need to be",
								" specified within the bag. For any two threshold lists, if one ends with",
								" `Score::MAX`, the other one does not, and they are otherwise equal, the two",
								" lists will behave identically.",
								"",
								" # Calculation",
								"",
								" It is recommended to generate the set of thresholds in a geometric series, such that",
								" there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
								" constant_ratio).max(threshold[k] + 1)` for all `k`.",
								"",
								" The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
								"",
								" # Examples",
								"",
								" - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
								"   iteration is strictly in insertion order.",
								" - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
								"   the procedure given above, then the constant ratio is equal to 2.",
								" - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
								"   the procedure given above, then the constant ratio is approximately equal to 1.248.",
								" - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
								"   into bag 0, an id with score 2 will fall into bag 1, etc.",
								"",
								" # Migration",
								"",
								" In the event that this list ever changes, a copy of the old bags list must be retained.",
								" With that `List::migrate` can be called, which will perform the appropriate migration."
							]
						}
					],
					"errors": {
						"type": "535"
					},
					"index": "25"
				},
				{
					"name": "ParachainsOrigin",
					"storage": null,
					"calls": null,
					"events": null,
					"constants": [],
					"errors": null,
					"index": "41"
				},
				{
					"name": "Configuration",
					"storage": {
						"prefix": "Configuration",
						"items": [
							{
								"name": "ActiveConfig",
								"modifier": "Default",
								"type": {
									"plain": "536"
								},
								"fallback": "0x00000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000100000001000000000000000000060000006400000002000000c8000000010000000000000000000000000000000000000000c817a804000000000200000002000000",
								"docs": [
									" The active configuration for the current session."
								]
							},
							{
								"name": "PendingConfigs",
								"modifier": "Default",
								"type": {
									"plain": "537"
								},
								"fallback": "0x00",
								"docs": [
									" Pending configuration changes.",
									"",
									" This is a list of configuration changes, each with a session index at which it should",
									" be applied.",
									"",
									" The list is sorted ascending by session index. Also, this list can only contain at most",
									" 2 items: for the next session and for the `scheduled_session`."
								]
							},
							{
								"name": "BypassConsistencyCheck",
								"modifier": "Default",
								"type": {
									"plain": "34"
								},
								"fallback": "0x00",
								"docs": [
									" If this is set, then the configuration setters will bypass the consistency checks. This",
									" is meant to be used only as the last resort."
								]
							}
						]
					},
					"calls": {
						"type": "394"
					},
					"events": null,
					"constants": [],
					"errors": {
						"type": "539"
					},
					"index": "42"
				},
				{
					"name": "ParasShared",
					"storage": {
						"prefix": "ParasShared",
						"items": [
							{
								"name": "CurrentSessionIndex",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" The current session index."
								]
							},
							{
								"name": "ActiveValidatorIndices",
								"modifier": "Default",
								"type": {
									"plain": "540"
								},
								"fallback": "0x00",
								"docs": [
									" All the validators actively participating in parachain consensus.",
									" Indices are into the broader validator set."
								]
							},
							{
								"name": "ActiveValidatorKeys",
								"modifier": "Default",
								"type": {
									"plain": "541"
								},
								"fallback": "0x00",
								"docs": [
									" The parachain attestation keys of the validators actively participating in parachain consensus.",
									" This should be the same length as `ActiveValidatorIndices`."
								]
							}
						]
					},
					"calls": {
						"type": "395"
					},
					"events": null,
					"constants": [],
					"errors": null,
					"index": "43"
				},
				{
					"name": "ParaInclusion",
					"storage": {
						"prefix": "ParaInclusion",
						"items": [
							{
								"name": "AvailabilityBitfields",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "404",
										"value": "542"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The latest bitfield for each validator, referred to by their index in the validator set."
								]
							},
							{
								"name": "PendingAvailability",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "543"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Candidates pending availability by `ParaId`."
								]
							},
							{
								"name": "PendingAvailabilityCommitments",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "409"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The commitments of candidates pending availability, by `ParaId`."
								]
							}
						]
					},
					"calls": {
						"type": "396"
					},
					"events": {
						"type": "74"
					},
					"constants": [],
					"errors": {
						"type": "544"
					},
					"index": "44"
				},
				{
					"name": "ParaInherent",
					"storage": {
						"prefix": "ParaInherent",
						"items": [
							{
								"name": "Included",
								"modifier": "Optional",
								"type": {
									"plain": "54"
								},
								"fallback": "0x00",
								"docs": [
									" Whether the paras inherent was included within this block.",
									"",
									" The `Option<()>` is effectively a `bool`, but it never hits storage in the `None` variant",
									" due to the guarantees of FRAME's storage APIs.",
									"",
									" If this is `None` at the end of the block, we panic and render the block invalid."
								]
							},
							{
								"name": "OnChainVotes",
								"modifier": "Optional",
								"type": {
									"plain": "545"
								},
								"fallback": "0x00",
								"docs": [
									" Scraped on chain data for extracting resolved disputes as well as backing votes."
								]
							}
						]
					},
					"calls": {
						"type": "397"
					},
					"events": null,
					"constants": [],
					"errors": {
						"type": "550"
					},
					"index": "45"
				},
				{
					"name": "ParaScheduler",
					"storage": {
						"prefix": "ParaScheduler",
						"items": [
							{
								"name": "ValidatorGroups",
								"modifier": "Default",
								"type": {
									"plain": "551"
								},
								"fallback": "0x00",
								"docs": [
									" All the validator groups. One for each core. Indices are into `ActiveValidators` - not the",
									" broader set of Polkadot validators, but instead just the subset used for parachains during",
									" this session.",
									"",
									" Bound: The number of cores is the sum of the numbers of parachains and parathread multiplexers.",
									" Reasonably, 100-1000. The dominant factor is the number of validators: safe upper bound at 10k."
								]
							},
							{
								"name": "ParathreadQueue",
								"modifier": "Default",
								"type": {
									"plain": "552"
								},
								"fallback": "0x0000000000",
								"docs": [
									" A queue of upcoming claims and which core they should be mapped onto.",
									"",
									" The number of queued claims is bounded at the `scheduling_lookahead`",
									" multiplied by the number of parathread multiplexer cores. Reasonably, 10 * 50 = 500."
								]
							},
							{
								"name": "AvailabilityCores",
								"modifier": "Default",
								"type": {
									"plain": "557"
								},
								"fallback": "0x00",
								"docs": [
									" One entry for each availability core. Entries are `None` if the core is not currently occupied. Can be",
									" temporarily `Some` if scheduled but not occupied.",
									" The i'th parachain belongs to the i'th core, with the remaining cores all being",
									" parathread-multiplexers.",
									"",
									" Bounded by the maximum of either of these two values:",
									"   * The number of parachains and parathread multiplexers",
									"   * The number of validators divided by `configuration.max_validators_per_core`."
								]
							},
							{
								"name": "ParathreadClaimIndex",
								"modifier": "Default",
								"type": {
									"plain": "560"
								},
								"fallback": "0x00",
								"docs": [
									" An index used to ensure that only one claim on a parathread exists in the queue or is",
									" currently being handled by an occupied core.",
									"",
									" Bounded by the number of parathread cores and scheduling lookahead. Reasonably, 10 * 50 = 500."
								]
							},
							{
								"name": "SessionStartBlock",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" The block number where the session start occurred. Used to track how many group rotations have occurred.",
									"",
									" Note that in the context of parachains modules the session change is signaled during",
									" the block and enacted at the end of the block (at the finalization stage, to be exact).",
									" Thus for all intents and purposes the effect of the session change is observed at the",
									" block following the session change, block number of which we save in this storage value."
								]
							},
							{
								"name": "Scheduled",
								"modifier": "Default",
								"type": {
									"plain": "561"
								},
								"fallback": "0x00",
								"docs": [
									" Currently scheduled cores - free but up to be occupied.",
									"",
									" Bounded by the number of cores: one for each parachain and parathread multiplexer.",
									"",
									" The value contained here will not be valid after the end of a block. Runtime APIs should be used to determine scheduled cores/",
									" for the upcoming block."
								]
							}
						]
					},
					"calls": null,
					"events": null,
					"constants": [],
					"errors": null,
					"index": "46"
				},
				{
					"name": "Paras",
					"storage": {
						"prefix": "Paras",
						"items": [
							{
								"name": "PvfActiveVoteMap",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "82",
										"value": "564"
									}
								},
								"fallback": "0x00",
								"docs": [
									" All currently active PVF pre-checking votes.",
									"",
									" Invariant:",
									" - There are no PVF pre-checking votes that exists in list but not in the set and vice versa."
								]
							},
							{
								"name": "PvfActiveVoteList",
								"modifier": "Default",
								"type": {
									"plain": "567"
								},
								"fallback": "0x00",
								"docs": [
									" The list of all currently active PVF votes. Auxiliary to `PvfActiveVoteMap`."
								]
							},
							{
								"name": "Parachains",
								"modifier": "Default",
								"type": {
									"plain": "560"
								},
								"fallback": "0x00",
								"docs": [
									" All parachains. Ordered ascending by `ParaId`. Parathreads are not included.",
									"",
									" Consider using the [`ParachainsCache`] type of modifying."
								]
							},
							{
								"name": "ParaLifecycles",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "568"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The current lifecycle of a all known Para IDs."
								]
							},
							{
								"name": "Heads",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "83"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The head-data of every registered para."
								]
							},
							{
								"name": "CurrentCodeHash",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "82"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The validation code hash of every live para.",
									"",
									" Corresponding code can be retrieved with [`CodeByHash`]."
								]
							},
							{
								"name": "PastCodeHash",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "569",
										"value": "82"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Actual past code hash, indicated by the para id as well as the block number at which it",
									" became outdated.",
									"",
									" Corresponding code can be retrieved with [`CodeByHash`]."
								]
							},
							{
								"name": "PastCodeMeta",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "570"
									}
								},
								"fallback": "0x0000",
								"docs": [
									" Past code of parachains. The parachains themselves may not be registered anymore,",
									" but we also keep their code on-chain for the same amount of time as outdated code",
									" to keep it available for secondary checkers."
								]
							},
							{
								"name": "PastCodePruning",
								"modifier": "Default",
								"type": {
									"plain": "573"
								},
								"fallback": "0x00",
								"docs": [
									" Which paras have past code that needs pruning and the relay-chain block at which the code was replaced.",
									" Note that this is the actual height of the included block, not the expected height at which the",
									" code upgrade would be applied, although they may be equal.",
									" This is to ensure the entire acceptance period is covered, not an offset acceptance period starting",
									" from the time at which the parachain perceives a code upgrade as having occurred.",
									" Multiple entries for a single para are permitted. Ordered ascending by block number."
								]
							},
							{
								"name": "FutureCodeUpgrades",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "4"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The block number at which the planned code change is expected for a para.",
									" The change will be applied after the first parablock for this ID included which executes",
									" in the context of a relay chain block with a number >= `expected_at`."
								]
							},
							{
								"name": "FutureCodeHash",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "82"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The actual future code hash of a para.",
									"",
									" Corresponding code can be retrieved with [`CodeByHash`]."
								]
							},
							{
								"name": "UpgradeGoAheadSignal",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "574"
									}
								},
								"fallback": "0x00",
								"docs": [
									" This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade procedure.",
									"",
									" This value is absent when there are no upgrades scheduled or during the time the relay chain",
									" performs the checks. It is set at the first relay-chain block when the corresponding parachain",
									" can switch its upgrade function. As soon as the parachain's block is included, the value",
									" gets reset to `None`.",
									"",
									" NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
									" the format will require migration of parachains."
								]
							},
							{
								"name": "UpgradeRestrictionSignal",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "575"
									}
								},
								"fallback": "0x00",
								"docs": [
									" This is used by the relay-chain to communicate that there are restrictions for performing",
									" an upgrade for this parachain.",
									"",
									" This may be a because the parachain waits for the upgrade cooldown to expire. Another",
									" potential use case is when we want to perform some maintenance (such as storage migration)",
									" we could restrict upgrades to make the process simpler.",
									"",
									" NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
									" the format will require migration of parachains."
								]
							},
							{
								"name": "UpgradeCooldowns",
								"modifier": "Default",
								"type": {
									"plain": "573"
								},
								"fallback": "0x00",
								"docs": [
									" The list of parachains that are awaiting for their upgrade restriction to cooldown.",
									"",
									" Ordered ascending by block number."
								]
							},
							{
								"name": "UpcomingUpgrades",
								"modifier": "Default",
								"type": {
									"plain": "573"
								},
								"fallback": "0x00",
								"docs": [
									" The list of upcoming code upgrades. Each item is a pair of which para performs a code",
									" upgrade and at which relay-chain block it is expected at.",
									"",
									" Ordered ascending by block number."
								]
							},
							{
								"name": "ActionsQueue",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "4",
										"value": "560"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The actions to perform during the start of a specific session index."
								]
							},
							{
								"name": "UpcomingParasGenesis",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "433"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Upcoming paras instantiation arguments.",
									"",
									" NOTE that after PVF pre-checking is enabled the para genesis arg will have it's code set",
									" to empty. Instead, the code will be saved into the storage right away via `CodeByHash`."
								]
							},
							{
								"name": "CodeByHashRefs",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Identity"
										],
										"key": "82",
										"value": "4"
									}
								},
								"fallback": "0x00000000",
								"docs": [
									" The number of reference on the validation code in [`CodeByHash`] storage."
								]
							},
							{
								"name": "CodeByHash",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Identity"
										],
										"key": "82",
										"value": "413"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Validation code stored by its hash.",
									"",
									" This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and",
									" [`PastCodeHash`]."
								]
							}
						]
					},
					"calls": {
						"type": "423"
					},
					"events": {
						"type": "86"
					},
					"constants": [
						{
							"name": "UnsignedPriority",
							"type": "8",
							"value": "18446744073709551615",
							"docs": []
						}
					],
					"errors": {
						"type": "576"
					},
					"index": "47"
				},
				{
					"name": "Initializer",
					"storage": {
						"prefix": "Initializer",
						"items": [
							{
								"name": "HasInitialized",
								"modifier": "Optional",
								"type": {
									"plain": "54"
								},
								"fallback": "0x00",
								"docs": [
									" Whether the parachains modules have been initialized within this block.",
									"",
									" Semantically a `bool`, but this guarantees it should never hit the trie,",
									" as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.",
									"",
									" As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one of",
									" them writes to the trie and one does not. This confusion makes `Option<()>` more suitable for",
									" the semantics of this variable."
								]
							},
							{
								"name": "BufferedSessionChanges",
								"modifier": "Default",
								"type": {
									"plain": "577"
								},
								"fallback": "0x00",
								"docs": [
									" Buffered session changes along with the block number at which they should be applied.",
									"",
									" Typically this will be empty or one element long. Apart from that this item never hits",
									" the storage.",
									"",
									" However this is a `Vec` regardless to handle various edge cases that may occur at runtime",
									" upgrade boundaries or if governance intervenes."
								]
							}
						]
					},
					"calls": {
						"type": "425"
					},
					"events": null,
					"constants": [],
					"errors": null,
					"index": "48"
				},
				{
					"name": "Dmp",
					"storage": {
						"prefix": "Dmp",
						"items": [
							{
								"name": "DownwardMessageQueues",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "579"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The downward messages addressed for a certain para."
								]
							},
							{
								"name": "DownwardMessageQueueHeads",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "9"
									}
								},
								"fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
								"docs": [
									" A mapping that stores the downward message queue MQC head for each para.",
									"",
									" Each link in this chain has a form:",
									" `(prev_head, B, H(M))`, where",
									" - `prev_head`: is the previous head hash or zero if none.",
									" - `B`: is the relay-chain block number in which a message was appended.",
									" - `H(M)`: is the hash of the message being appended."
								]
							}
						]
					},
					"calls": {
						"type": "426"
					},
					"events": null,
					"constants": [],
					"errors": null,
					"index": "49"
				},
				{
					"name": "Ump",
					"storage": {
						"prefix": "Ump",
						"items": [
							{
								"name": "RelayDispatchQueues",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "145"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The messages waiting to be handled by the relay-chain originating from a certain parachain.",
									"",
									" Note that some upward messages might have been already processed by the inclusion logic. E.g.",
									" channel management messages.",
									"",
									" The messages are processed in FIFO order."
								]
							},
							{
								"name": "RelayDispatchQueueSize",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "59"
									}
								},
								"fallback": "0x0000000000000000",
								"docs": [
									" Size of the dispatch queues. Caches sizes of the queues in `RelayDispatchQueue`.",
									"",
									" First item in the tuple is the count of messages and second",
									" is the total length (in bytes) of the message payloads.",
									"",
									" Note that this is an auxiliary mapping: it's possible to tell the byte size and the number of",
									" messages only looking at `RelayDispatchQueues`. This mapping is separate to avoid the cost of",
									" loading the whole message queue if only the total size and count are required.",
									"",
									" Invariant:",
									" - The set of keys should exactly match the set of keys of `RelayDispatchQueues`."
								]
							},
							{
								"name": "NeedsDispatch",
								"modifier": "Default",
								"type": {
									"plain": "560"
								},
								"fallback": "0x00",
								"docs": [
									" The ordered list of `ParaId`s that have a `RelayDispatchQueue` entry.",
									"",
									" Invariant:",
									" - The set of items from this vector should be exactly the set of the keys in",
									"   `RelayDispatchQueues` and `RelayDispatchQueueSize`."
								]
							},
							{
								"name": "NextDispatchRoundStartWith",
								"modifier": "Optional",
								"type": {
									"plain": "77"
								},
								"fallback": "0x00",
								"docs": [
									" This is the para that gets will get dispatched first during the next upward dispatchable queue",
									" execution round.",
									"",
									" Invariant:",
									" - If `Some(para)`, then `para` must be present in `NeedsDispatch`."
								]
							},
							{
								"name": "Overweight",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "8",
										"value": "581"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The messages that exceeded max individual message weight budget.",
									"",
									" These messages stay there until manually dispatched."
								]
							},
							{
								"name": "OverweightCount",
								"modifier": "Default",
								"type": {
									"plain": "8"
								},
								"fallback": "0x0000000000000000",
								"docs": [
									" The number of overweight messages ever recorded in `Overweight` (and thus the lowest free",
									" index)."
								]
							}
						]
					},
					"calls": {
						"type": "427"
					},
					"events": {
						"type": "87"
					},
					"constants": [],
					"errors": {
						"type": "582"
					},
					"index": "50"
				},
				{
					"name": "Hrmp",
					"storage": {
						"prefix": "Hrmp",
						"items": [
							{
								"name": "HrmpOpenChannelRequests",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "91",
										"value": "583"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The set of pending HRMP open channel requests.",
									"",
									" The set is accompanied by a list for iteration.",
									"",
									" Invariant:",
									" - There are no channels that exists in list but not in the set and vice versa."
								]
							},
							{
								"name": "HrmpOpenChannelRequestsList",
								"modifier": "Default",
								"type": {
									"plain": "584"
								},
								"fallback": "0x00",
								"docs": []
							},
							{
								"name": "HrmpOpenChannelRequestCount",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "4"
									}
								},
								"fallback": "0x00000000",
								"docs": [
									" This mapping tracks how many open channel requests are initiated by a given sender para.",
									" Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has",
									" `(X, _)` as the number of `HrmpOpenChannelRequestCount` for `X`."
								]
							},
							{
								"name": "HrmpAcceptedChannelRequestCount",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "4"
									}
								},
								"fallback": "0x00000000",
								"docs": [
									" This mapping tracks how many open channel requests were accepted by a given recipient para.",
									" Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with",
									" `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`."
								]
							},
							{
								"name": "HrmpCloseChannelRequests",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "91",
										"value": "54"
									}
								},
								"fallback": "0x00",
								"docs": [
									" A set of pending HRMP close channel requests that are going to be closed during the session",
									" change. Used for checking if a given channel is registered for closure.",
									"",
									" The set is accompanied by a list for iteration.",
									"",
									" Invariant:",
									" - There are no channels that exists in list but not in the set and vice versa."
								]
							},
							{
								"name": "HrmpCloseChannelRequestsList",
								"modifier": "Default",
								"type": {
									"plain": "584"
								},
								"fallback": "0x00",
								"docs": []
							},
							{
								"name": "HrmpWatermarks",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "4"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The HRMP watermark associated with each para.",
									" Invariant:",
									" - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a session."
								]
							},
							{
								"name": "HrmpChannels",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "91",
										"value": "585"
									}
								},
								"fallback": "0x00",
								"docs": [
									" HRMP channel data associated with each para.",
									" Invariant:",
									" - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session."
								]
							},
							{
								"name": "HrmpIngressChannelsIndex",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "560"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Ingress/egress indexes allow to find all the senders and receivers given the opposite side.",
									" I.e.",
									"",
									" (a) ingress index allows to find all the senders for a given recipient.",
									" (b) egress index allows to find all the recipients for a given sender.",
									"",
									" Invariants:",
									" - for each ingress index entry for `P` each item `I` in the index should present in",
									"   `HrmpChannels` as `(I, P)`.",
									" - for each egress index entry for `P` each item `E` in the index should present in",
									"   `HrmpChannels` as `(P, E)`.",
									" - there should be no other dangling channels in `HrmpChannels`.",
									" - the vectors are sorted."
								]
							},
							{
								"name": "HrmpEgressChannelsIndex",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "560"
									}
								},
								"fallback": "0x00",
								"docs": []
							},
							{
								"name": "HrmpChannelContents",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "91",
										"value": "587"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Storage for the messages for each channel.",
									" Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`."
								]
							},
							{
								"name": "HrmpChannelDigests",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "589"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Maintains a mapping that can be used to answer the question: What paras sent a message at",
									" the given block number for a given receiver. Invariants:",
									" - The inner `Vec<ParaId>` is never empty.",
									" - The inner `Vec<ParaId>` cannot store two same `ParaId`.",
									" - The outer vector is sorted ascending by block number and cannot store two items with the",
									"   same block number."
								]
							}
						]
					},
					"calls": {
						"type": "428"
					},
					"events": {
						"type": "90"
					},
					"constants": [],
					"errors": {
						"type": "591"
					},
					"index": "51"
				},
				{
					"name": "ParaSessionInfo",
					"storage": {
						"prefix": "ParaSessionInfo",
						"items": [
							{
								"name": "AssignmentKeysUnsafe",
								"modifier": "Default",
								"type": {
									"plain": "592"
								},
								"fallback": "0x00",
								"docs": [
									" Assignment keys for the current session.",
									" Note that this API is private due to it being prone to 'off-by-one' at session boundaries.",
									" When in doubt, use `Sessions` API instead."
								]
							},
							{
								"name": "EarliestStoredSession",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" The earliest session for which previous session info is stored."
								]
							},
							{
								"name": "Sessions",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Identity"
										],
										"key": "4",
										"value": "593"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Session information in a rolling window.",
									" Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.",
									" Does not have any entries before the session index in the first session change notification."
								]
							}
						]
					},
					"calls": null,
					"events": null,
					"constants": [],
					"errors": null,
					"index": "52"
				},
				{
					"name": "ParasDisputes",
					"storage": {
						"prefix": "ParasDisputes",
						"items": [
							{
								"name": "LastPrunedSession",
								"modifier": "Optional",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00",
								"docs": [
									" The last pruned session, if any. All data stored by this module",
									" references sessions."
								]
							},
							{
								"name": "Disputes",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Blake2_128Concat"
										],
										"key": "595",
										"value": "596"
									}
								},
								"fallback": "0x00",
								"docs": [
									" All ongoing or concluded disputes for the last several sessions."
								]
							},
							{
								"name": "Included",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Blake2_128Concat"
										],
										"key": "595",
										"value": "4"
									}
								},
								"fallback": "0x00",
								"docs": [
									" All included blocks on the chain, as well as the block number in this chain that",
									" should be reverted back to if the candidate is disputed and determined to be invalid."
								]
							},
							{
								"name": "SpamSlots",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "4",
										"value": "206"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Maps session indices to a vector indicating the number of potentially-spam disputes",
									" each validator is participating in. Potentially-spam disputes are remote disputes which have",
									" fewer than `byzantine_threshold + 1` validators.",
									"",
									" The i'th entry of the vector corresponds to the i'th validator in the session."
								]
							},
							{
								"name": "Frozen",
								"modifier": "Default",
								"type": {
									"plain": "250"
								},
								"fallback": "0x00",
								"docs": [
									" Whether the chain is frozen. Starts as `None`. When this is `Some`,",
									" the chain will not accept any new parachain blocks for backing or inclusion,",
									" and its value indicates the last valid block number in the chain.",
									" It can only be set back to `None` by governance intervention."
								]
							}
						]
					},
					"calls": {
						"type": "429"
					},
					"events": {
						"type": "92"
					},
					"constants": [],
					"errors": {
						"type": "597"
					},
					"index": "53"
				},
				{
					"name": "Registrar",
					"storage": {
						"prefix": "Registrar",
						"items": [
							{
								"name": "PendingSwap",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "77"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Pending swap operations."
								]
							},
							{
								"name": "Paras",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "598"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Amount held on deposit for each para and the original depositor.",
									"",
									" The given account ID is responsible for registering the code and initial head data, but may only do",
									" so if it isn't yet registered. (After that, it's up to governance to do so.)"
								]
							},
							{
								"name": "NextFreeParaId",
								"modifier": "Default",
								"type": {
									"plain": "77"
								},
								"fallback": "0x00000000",
								"docs": [
									" The next free `ParaId`."
								]
							}
						]
					},
					"calls": {
						"type": "430"
					},
					"events": {
						"type": "96"
					},
					"constants": [
						{
							"name": "ParaDeposit",
							"type": "6",
							"value": "20000000000000",
							"docs": [
								" The deposit to be paid to run a parathread.",
								" This should include the cost for storing the genesis head and validation code."
							]
						},
						{
							"name": "DataDepositPerByte",
							"type": "6",
							"value": "50000000",
							"docs": [
								" The deposit to be paid per byte stored on chain."
							]
						}
					],
					"errors": {
						"type": "599"
					},
					"index": "60"
				},
				{
					"name": "Slots",
					"storage": {
						"prefix": "Slots",
						"items": [
							{
								"name": "Leases",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "600"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Amounts held on deposit for each (possibly future) leased parachain.",
									"",
									" The actual amount locked on its behalf by any account at any time is the maximum of the second values",
									" of the items in this list whose first value is the account.",
									"",
									" The first item in the list is the amount locked for the current Lease Period. Following",
									" items are for the subsequent lease periods.",
									"",
									" The default value (an empty list) implies that the parachain no longer exists (or never",
									" existed) as far as this pallet is concerned.",
									"",
									" If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it",
									" will be left-padded with one or more `None`s to denote the fact that nothing is held on",
									" deposit for the non-existent chain currently, but is held at some point in the future.",
									"",
									" It is illegal for a `None` value to trail in the list."
								]
							}
						]
					},
					"calls": {
						"type": "431"
					},
					"events": {
						"type": "97"
					},
					"constants": [
						{
							"name": "LeasePeriod",
							"type": "4",
							"value": "403200",
							"docs": [
								" The number of blocks over which a single period lasts."
							]
						},
						{
							"name": "LeaseOffset",
							"type": "4",
							"value": "0",
							"docs": [
								" The number of blocks to offset each lease period by."
							]
						}
					],
					"errors": {
						"type": "601"
					},
					"index": "61"
				},
				{
					"name": "ParasSudoWrapper",
					"storage": null,
					"calls": {
						"type": "432"
					},
					"events": null,
					"constants": [],
					"errors": {
						"type": "602"
					},
					"index": "62"
				},
				{
					"name": "Auctions",
					"storage": {
						"prefix": "Auctions",
						"items": [
							{
								"name": "AuctionCounter",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" Number of auctions started so far."
								]
							},
							{
								"name": "AuctionInfo",
								"modifier": "Optional",
								"type": {
									"plain": "59"
								},
								"fallback": "0x00",
								"docs": [
									" Information relating to the current auction, if there is one.",
									"",
									" The first item in the tuple is the lease period index that the first of the four",
									" contiguous lease periods on auction is for. The second is the block number when the",
									" auction will \"begin to end\", i.e. the first block of the Ending Period of the auction."
								]
							},
							{
								"name": "ReservedAmounts",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "603",
										"value": "6"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Amounts currently reserved in the accounts of the bidders currently winning",
									" (sub-)ranges."
								]
							},
							{
								"name": "Winning",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "4",
										"value": "604"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The winning bids for each of the 10 ranges at each sample in the final Ending Period of",
									" the current auction. The map's key is the 0-based index into the Sample Size. The",
									" first sample of the ending period is 0; the last is `Sample Size - 1`."
								]
							}
						]
					},
					"calls": {
						"type": "445"
					},
					"events": {
						"type": "98"
					},
					"constants": [
						{
							"name": "EndingPeriod",
							"type": "4",
							"value": "72000",
							"docs": [
								" The number of blocks over which an auction may be retroactively ended."
							]
						},
						{
							"name": "SampleLength",
							"type": "4",
							"value": "20",
							"docs": [
								" The length of each sample to take during the ending period.",
								"",
								" `EndingPeriod` / `SampleLength` = Total # of Samples"
							]
						},
						{
							"name": "SlotRangeCount",
							"type": "4",
							"value": "36",
							"docs": []
						},
						{
							"name": "LeasePeriodsPerSlot",
							"type": "4",
							"value": "8",
							"docs": []
						}
					],
					"errors": {
						"type": "607"
					},
					"index": "63"
				},
				{
					"name": "Crowdloan",
					"storage": {
						"prefix": "Crowdloan",
						"items": [
							{
								"name": "Funds",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "608"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Info on all of the funds."
								]
							},
							{
								"name": "NewRaise",
								"modifier": "Default",
								"type": {
									"plain": "560"
								},
								"fallback": "0x00",
								"docs": [
									" The funds that have had additional contributions during the last block. This is used",
									" in order to determine which funds should submit new or updated bids."
								]
							},
							{
								"name": "EndingsCount",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" The number of auctions that have entered into their ending period so far."
								]
							},
							{
								"name": "NextFundIndex",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" Tracker for the next available fund index"
								]
							}
						]
					},
					"calls": {
						"type": "447"
					},
					"events": {
						"type": "99"
					},
					"constants": [
						{
							"name": "PalletId",
							"type": "610",
							"value": "0x70792f6366756e64",
							"docs": [
								" `PalletId` for the crowdloan pallet. An appropriate value could be `PalletId(*b\"py/cfund\")`"
							]
						},
						{
							"name": "MinContribution",
							"type": "6",
							"value": "1000000000000",
							"docs": [
								" The minimum amount that may be contributed into a crowdloan. Should almost certainly be at",
								" least `ExistentialDeposit`."
							]
						},
						{
							"name": "RemoveKeysLimit",
							"type": "4",
							"value": "500",
							"docs": [
								" Max number of storage keys to remove per extrinsic call."
							]
						}
					],
					"errors": {
						"type": "611"
					},
					"index": "64"
				},
				{
					"name": "AssignedSlots",
					"storage": {
						"prefix": "AssignedSlots",
						"items": [
							{
								"name": "PermanentSlots",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "59"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Assigned permanent slots, with their start lease period, and duration."
								]
							},
							{
								"name": "PermanentSlotCount",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" Number of assigned (and active) permanent slots."
								]
							},
							{
								"name": "TemporarySlots",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat"
										],
										"key": "77",
										"value": "612"
									}
								},
								"fallback": "0x00",
								"docs": [
									" Assigned temporary slots."
								]
							},
							{
								"name": "TemporarySlotCount",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" Number of assigned temporary slots."
								]
							},
							{
								"name": "ActiveTemporarySlotCount",
								"modifier": "Default",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00000000",
								"docs": [
									" Number of active temporary slots in current slot lease period."
								]
							}
						]
					},
					"calls": {
						"type": "456"
					},
					"events": {
						"type": "100"
					},
					"constants": [
						{
							"name": "PermanentSlotLeasePeriodLength",
							"type": "4",
							"value": "26",
							"docs": [
								" The number of lease periods a permanent parachain slot lasts."
							]
						},
						{
							"name": "TemporarySlotLeasePeriodLength",
							"type": "4",
							"value": "1",
							"docs": [
								" The number of lease periods a temporary parachain slot lasts."
							]
						},
						{
							"name": "MaxPermanentSlots",
							"type": "4",
							"value": "5",
							"docs": [
								" The max number of permanent slots that can be assigned."
							]
						},
						{
							"name": "MaxTemporarySlots",
							"type": "4",
							"value": "20",
							"docs": [
								" The max number of temporary slots that can be assigned."
							]
						},
						{
							"name": "MaxTemporarySlotPerLeasePeriod",
							"type": "4",
							"value": "5",
							"docs": [
								" The max number of temporary slots to be scheduled per lease periods."
							]
						}
					],
					"errors": {
						"type": "613"
					},
					"index": "65"
				},
				{
					"name": "XcmPallet",
					"storage": {
						"prefix": "XcmPallet",
						"items": [
							{
								"name": "QueryCounter",
								"modifier": "Default",
								"type": {
									"plain": "8"
								},
								"fallback": "0x0000000000000000",
								"docs": [
									" The latest available query index."
								]
							},
							{
								"name": "Queries",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Blake2_128Concat"
										],
										"key": "8",
										"value": "614"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The ongoing queries."
								]
							},
							{
								"name": "AssetTraps",
								"modifier": "Default",
								"type": {
									"map": {
										"hashers": [
											"Identity"
										],
										"key": "9",
										"value": "4"
									}
								},
								"fallback": "0x00000000",
								"docs": [
									" The existing asset traps.",
									"",
									" Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
									" times this pair has been trapped (usually just 1 if it exists at all)."
								]
							},
							{
								"name": "SafeXcmVersion",
								"modifier": "Optional",
								"type": {
									"plain": "4"
								},
								"fallback": "0x00",
								"docs": [
									" Default version to encode XCM when latest version of destination is unknown. If `None`,",
									" then the destinations whose XCM version is unknown are considered unreachable."
								]
							},
							{
								"name": "SupportedVersion",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Blake2_128Concat"
										],
										"key": "618",
										"value": "4"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The Latest versions that we know various locations support."
								]
							},
							{
								"name": "VersionNotifiers",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Blake2_128Concat"
										],
										"key": "618",
										"value": "8"
									}
								},
								"fallback": "0x00",
								"docs": [
									" All locations that we have requested version notifications from."
								]
							},
							{
								"name": "VersionNotifyTargets",
								"modifier": "Optional",
								"type": {
									"map": {
										"hashers": [
											"Twox64Concat",
											"Blake2_128Concat"
										],
										"key": "618",
										"value": "619"
									}
								},
								"fallback": "0x00",
								"docs": [
									" The target locations that are subscribed to our version changes, as well as the most recent",
									" of our versions we informed them of."
								]
							},
							{
								"name": "VersionDiscoveryQueue",
								"modifier": "Default",
								"type": {
									"plain": "620"
								},
								"fallback": "0x00",
								"docs": [
									" Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
									" the `u32` counter is the number of times that a send to the destination has been attempted,",
									" which is used as a prioritization."
								]
							},
							{
								"name": "CurrentMigration",
								"modifier": "Optional",
								"type": {
									"plain": "623"
								},
								"fallback": "0x00",
								"docs": [
									" The current migration's stage, if any."
								]
							}
						]
					},
					"calls": {
						"type": "458"
					},
					"events": {
						"type": "101"
					},
					"constants": [],
					"errors": {
						"type": "624"
					},
					"index": "99"
				}
			],
			"extrinsic": {
				"type": "625",
				"version": "4",
				"signedExtensions": [
					{
						"identifier": "CheckNonZeroSender",
						"type": "627",
						"additionalSigned": "54"
					},
					{
						"identifier": "CheckSpecVersion",
						"type": "628",
						"additionalSigned": "4"
					},
					{
						"identifier": "CheckTxVersion",
						"type": "629",
						"additionalSigned": "4"
					},
					{
						"identifier": "CheckGenesis",
						"type": "630",
						"additionalSigned": "9"
					},
					{
						"identifier": "CheckMortality",
						"type": "631",
						"additionalSigned": "9"
					},
					{
						"identifier": "CheckNonce",
						"type": "633",
						"additionalSigned": "54"
					},
					{
						"identifier": "CheckWeight",
						"type": "634",
						"additionalSigned": "54"
					},
					{
						"identifier": "ChargeTransactionPayment",
						"type": "635",
						"additionalSigned": "54"
					}
				]
			},
			"type": "636"
		}
	}
}
